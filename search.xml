<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>test new hexo theme</title>
      <link href="/2018/04/28/test-new-hexo-theme/"/>
      <url>/2018/04/28/test-new-hexo-theme/</url>
      <content type="html"><![CDATA[<p>1312312312</p>]]></content>
      
      
        <tags>
            
            <tag> 123 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/04/28/hello-world/"/>
      <url>/2018/04/28/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>web学习笔记(补)-angularjs遇到的部分问题</title>
      <link href="/2018/04/27/angularjs%E9%81%87%E5%88%B0%E7%9A%84%E9%83%A8%E5%88%86%E9%97%AE%E9%A2%98/"/>
      <url>/2018/04/27/angularjs%E9%81%87%E5%88%B0%E7%9A%84%E9%83%A8%E5%88%86%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>1.在写一个新页面的时候，编写控制器的时候会出现错误</p><p><img src="https://upload-images.jianshu.io/upload_images/1062695-9afed57bb348f9bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2018-04-27 下午4.33.48.png"></p><p>这个错误是由于在首页没有引入js文件导致的。</p><p>2.获取时间</p><p><img src="https://upload-images.jianshu.io/upload_images/1062695-65a543de8ef3581b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2018-04-27 下午4.34.31.png"></p><p>3.动态创建新的一行</p><p>​    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span><br><span class="line">&gt; </span><br><span class="line">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt; </span><br><span class="line">&lt;head&gt; </span><br><span class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class="line">      &lt;title&gt;test&lt;/title&gt; </span><br><span class="line">    &lt;style type=&quot;text/css&quot;&gt;  body &#123;</span><br><span class="line">        background: #FFFFFF;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">         &lt;/style&gt;</span><br><span class="line">     </span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;         function add() &#123;</span><br><span class="line">        var oTr = document.getElementById(&quot;addtr&quot;).rows[1];</span><br><span class="line">        var newTr = oTr.cloneNode(true);</span><br><span class="line">        document.getElementById(&quot;addtr&quot;).getElementsByTagName(&quot;tbody&quot;)[0].appendChild(newTr);</span><br><span class="line">        newTr.cells[0].firstChild.value = newTr.rowIndex;</span><br><span class="line">        document.getElementById(&quot;b1&quot;).disabled = newTr.rowIndex == 5;</span><br><span class="line">    &#125;     &lt;/script&gt;</span><br><span class="line">     </span><br><span class="line">&lt;/head&gt;</span><br><span class="line"> </span><br><span class="line">&lt;body&gt;  &lt;input type=&quot;button&quot; id=&quot;b1&quot; value=&quot;添加一行&quot; onclick=&quot;add()&quot;/&gt;  </span><br><span class="line">&lt;table width=&quot;700&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; id=&quot;addtr&quot;&gt; </span><br><span class="line">    &lt;tr&gt; </span><br><span class="line">        &lt;td height=&quot;30&quot; align=&quot;center&quot; bgcolor=&quot;#CCCCCC&quot;&gt;ID&lt;/td&gt;</span><br><span class="line">         </span><br><span class="line">        &lt;td align=&quot;center&quot; bgcolor=&quot;#CCCCCC&quot;&gt;Username&lt;/td&gt;</span><br><span class="line">         </span><br><span class="line">        &lt;td align=&quot;center&quot; bgcolor=&quot;#CCCCCC&quot;&gt;Usertype&lt;/td&gt;</span><br><span class="line">         </span><br><span class="line">        &lt;td align=&quot;center&quot; bgcolor=&quot;#CCCCCC&quot;&gt;Other&lt;/td&gt;</span><br><span class="line">         </span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">     </span><br><span class="line">    &lt;tr&gt; </span><br><span class="line">        &lt;td height=&quot;30&quot; align=&quot;center&quot;&gt;&lt;input type=&quot;text&quot; size=&quot;2&quot; value=&quot;1&quot;/&gt;&lt;/td&gt;</span><br><span class="line">         </span><br><span class="line">        &lt;td align=&quot;center&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt;&lt;/td&gt;</span><br><span class="line">         </span><br><span class="line">        &lt;td align=&quot;center&quot;&gt;  &lt;select name=&quot;type&quot;&gt; </span><br><span class="line">            &lt;option value=&quot;1&quot;&gt;Administrator&lt;/option&gt;</span><br><span class="line">              &lt;/select&gt; </span><br><span class="line">        &lt;/td&gt;</span><br><span class="line">         </span><br><span class="line">        &lt;td align=&quot;center&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;username2&quot;/&gt;&lt;/td&gt;</span><br><span class="line">         </span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">     </span><br><span class="line">&lt;/table&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/body&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>​        </p><p>4.在详情页取前一个页面的数据的时候，用loaclcache存储之后再取出来。在头部要引入localcache模块。否则报错</p><p><strong>lendApprovalDetail</strong></p><hr><p><strong>downloadLoanInstruction**</strong>、**</p><hr><p><strong>lendInstruction</strong></p><p><strong>lendConfirmManual</strong></p><hr><p><strong>lendConfirmAuto</strong></p><hr><p><strong>lendBatchDetail</strong></p><p>5.在列表中某些值需要根据同行的一些值进行显示或者隐藏要这么做</p><p>在ng-if上进行判断。</p><p>6.外部div根据内部的div大小改变</p><p>外部div，css添加上overflow:auto</p><p>7.日期选择控件，点击按钮打开，点击按钮收起，只要在点击事件中修改$scope.<strong>opened1 </strong>= !$scope.<strong>opened1</strong>;</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>web学习笔记14-移动端页面上拉无限加载</title>
      <link href="/2018/04/23/web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B014-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B5%E9%9D%A2%E4%B8%8A%E6%8B%89%E6%97%A0%E9%99%90%E5%8A%A0%E8%BD%BD/"/>
      <url>/2018/04/23/web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B014-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B5%E9%9D%A2%E4%B8%8A%E6%8B%89%E6%97%A0%E9%99%90%E5%8A%A0%E8%BD%BD/</url>
      <content type="html"><![CDATA[<p>&#160;&#160;&#160;&#160;已经有好久没有更新文章了，最近做的东西也不算多，只是没有时间更新文章，今天继续弄个给小白看的文章，一般的移动端搜索结果页或者那种分页加载的页面需要用的，上拉无限加载数据，不知道这个题目对不对，大家看了就知道是不是自己需要的东西了。</p><p><img src="https://upload-images.jianshu.io/upload_images/1062695-abc8893f93f1e5b4.gif?imageMogr2/auto-orient/strip" alt="Mar-26-2018 14-35-30.gif"></p><p>&#160;&#160;&#160;&#160;下面直接说完成过程吧，这个可以说是非常简单的一个小功能了，对于小白来说也能一眼就能看明白的，当然，要是有更好的方法，希望大家也跟我说下。这个功能虽然，不过也是上传到github上了，觉得看完还没懂得可以去看看，地址是<a href="https://github.com/Yulingsong/InfiniteLoading" target="_blank" rel="noopener">InfiniteLoading</a></p><h5 id="第一步：构建页面框架"><a href="#第一步：构建页面框架" class="headerlink" title="第一步：构建页面框架"></a>第一步：构建页面框架</h5><p>&#160;&#160;&#160;&#160;这一步很简单，一般自己的项目都会有自己的设计，我就直接写一个简单粗糙的列表页。html部分是：</p><pre><code>&lt;div class=&quot;nav&quot;&gt;  上拉分页无限加载&lt;/div&gt;&lt;!--显示的大概样子--&gt;&lt;div class=&quot;container&quot;&gt;    &lt;div class=&quot;lineItem&quot;&gt;1&lt;/div&gt;    &lt;div class=&quot;lineItem&quot;&gt;2&lt;/div&gt;    &lt;div class=&quot;lineItem&quot;&gt;3&lt;/div&gt;    &lt;div class=&quot;lineItem&quot;&gt;4&lt;/div&gt;    &lt;div class=&quot;lineItem&quot;&gt;5&lt;/div&gt;    &lt;div class=&quot;lineItem&quot;&gt;6&lt;/div&gt;    &lt;div class=&quot;lineItem&quot;&gt;7&lt;/div&gt;    &lt;div class=&quot;lineItem&quot;&gt;8&lt;/div&gt;    &lt;div class=&quot;lineItem&quot;&gt;9&lt;/div&gt;    &lt;div class=&quot;lineItem&quot;&gt;10&lt;/div&gt;    &lt;div class=&quot;lineItem&quot;&gt;11&lt;/div&gt;    &lt;div class=&quot;lineItem&quot;&gt;12&lt;/div&gt;    &lt;div class=&quot;lineItem&quot;&gt;13&lt;/div&gt;    &lt;div class=&quot;spinner&quot;&gt;加载中。。。&lt;/div&gt;    &lt;div class=&quot;spinner&quot;&gt;- 数据已经加载到底 -&lt;/div&gt;&lt;/div&gt;</code></pre><p>css部分是这样的：</p><pre><code>&lt;style&gt;    *{        margin: 0;        padding: 0;    }    .container{        width: 100vw;        height: calc(100vh - 44px);    }    .nav{        width: 100vw;        height: 44px;        line-height: 44px;        text-align: center;        font-size: 20px;    }    .lineItem{        width: 100%;        height: 100px;        margin-top: 10px;        background-color: lightgray;        line-height: 100px;        text-align: left;        font-size: 12px;        overflow: hidden;    }    .spinner{        width: 100%;        height: 50px;        text-align: center;        line-height: 50px;        font-size: 16px;        background-color: lightcyan;        margin-top: 10px;    }&lt;/style&gt;</code></pre><p>写完显示出来的样子是下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/1062695-0a043ede02713bd5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1"></p><p><img src="https://upload-images.jianshu.io/upload_images/1062695-8a7c07ef3cb75112.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2"></p><h5 id="第二步：编写逻辑部分"><a href="#第二步：编写逻辑部分" class="headerlink" title="第二步：编写逻辑部分"></a>第二步：编写逻辑部分</h5><p>&#160;&#160;&#160;&#160;我这边引入了jquery，大家用js写的话，部分地方有点差异，不过都没啥区别。大家注意下，这块我用的ajax请求的url是公司的，所以就拿掉了，大家替换上各自项目的url和请求数据就行。</p><pre><code>//声明部分变量var pageNum = 1;//页码var pageSize = 10;//每页多少条数据var infinite = true;//防止不停调接口加载新数据,false的时候就不能请求接口var count = 0;//总数,判断是否已经加载到底了var dataCache = [];//数据缓存，根据接口不同情况，可以考虑不用这个。//请求方法function sendRequest(num){    var sendData = {        //其它请求参数        pageNum:num,        pageSize:pageSize    };    if(infinite == true){        //只有infinite是true的时候才可以请求接口        infinite = false;        $.ajax({            type: &quot;POST&quot;,            url: &quot; 你自己的url &quot;,            data:sendData,            dataType: &apos;json&apos;,            success: function (data) {                console.log(data);                if(data.code == 200 &amp;&amp; data.data){                    count = data.data.count ? data.data.count:0;                    if(data.data.products &amp;&amp; data.data.products.length != 0){                        setPage(data.data.products);//单独的拼接html,渲染页面的方法。                    }else{                        //这边处理当数据为空的时候,并且页数为第一页的时候,页面应该有相应的显示                        // 比如暂无数据列表之类的文案,背景之类的。                        //并且会有种可能就是在加载到部分页数之后,请求回来的数据为空,页面显示也是有相应的变化                        if(pageNum == 1){                        }else{                        }                    }                    //在页面渲染之后,此时的数字加1,为了下一次的加载                    pageNum = data.data.pageNum + 1;                }else{                    //接口返回部分code不正确的时候,页面应有相应的显示                    console.log(data.content);                }                //设置可以继续请求接口。                infinite = true;            },            error: function (err) {                infinite = true;                console.log(&apos;系统异常&apos;);            }        });    }else{        infinite = true;    }}sendRequest(pageNum);//渲染页面方法function setPage(data){    console.log(data);    $(&quot;.spinner&quot;).remove();//移除加载条    for(var i = 0;i &lt; data.length;i++){        /*这边也可以做一些缓存数据的操作,记住一些数据,然后进行一些别的操作,比如说切换tab的时候,不刷新页面渲染页面        也可以根据不同接口返回的数据来做判断是否数据加载到底。我用的接口不支持返回数量,所以就用这种方式来判断*/        dataCache.push(data[i]);//将数据添加缓存数组中,适合数据量少的时候,不过数据量大的时候也可以用        //拼接html,渲染页面        var html = setHtmlModel(data[i]);        $(&quot;.container&quot;).append(html);//添加html    }    //判断是否加载到底,如果还有数据的话,就直接显示加载中,如果没有数据的话,就直接显示加载到底    //这部分的样式需要各自项目自己定义,我这边就只做粗糙的显示    var loadHtml = &apos;&apos;;    if(count &gt; dataCache.length){        loadHtml = &apos;&lt;div class=&quot;spinner&quot;&gt;加载中。。。&lt;/div&gt;&apos;;    }else{        loadHtml = &apos;&lt;div class=&quot;spinner&quot;&gt;- 数据已经加载到底 -&lt;/div&gt;&apos;;    }    $(&quot;.container&quot;).append(loadHtml);}//拼接html方法,这边的html因为太简单,所以这块看起来有点多余,在部分拼接html复杂的情况下,这样写可以看着好看点,修改添加的时候也方便点function setHtmlModel(data){    var html = &apos;&apos;;    html += &apos;&lt;div class=&quot;lineItem&quot;&gt;&apos;+data.name+&apos;&lt;/div&gt;&apos;;    return html;}</code></pre><p>&#160;&#160;&#160;&#160;这部分的东西基本上就是请求数据，渲染页面，添加加载框或者加载到底的显示，不过最重要的部分无限加载这块还没有添加上去，所以此时你翻来覆去只能请求一次。</p><h5 id="第三步：添加自动加载的方法"><a href="#第三步：添加自动加载的方法" class="headerlink" title="第三步：添加自动加载的方法"></a>第三步：添加自动加载的方法</h5><pre><code>//自动加载新数据,当滚轮滚到离页面下面一段距离的时候,就自动更新数据,请求接口$(function(){    $(window).scroll(function () {        //下面三个参数很重要,大家可以自行百度下具体的解释,一般简单的无限滚动加载都会用到这个        var scrollTop = $(this).scrollTop();//匹配元素的滚动条的垂直位置        var scrollHeight = $(document).height();//匹配元素document的高度        var windowHeight = $(this).height();//匹配元素的高度        if(scrollHeight - scrollTop - windowHeight &lt; 200 ){            //这边多做一个判断,如果还有剩下没有加载的数据就进行加载,如果没有,就不做请求            if(count &gt; dataCache.length){                sendRequest(0,0,pageNum);                infinite = false;            }        }    });});</code></pre><p>&#160;&#160;&#160;&#160;走完这三步就完成了一个简单的自动加载的列表页了。<br>说实话，写前端也有段时间了，按道理来说应该写一点复杂点的东西，像这样简单的东西随随便便都能找到，可能也是我学艺不精，还在慢慢学习中，希望以后能给大家带来更好的文章。有什么问题大家也可以跟我一起交流交流。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>web学习笔记13-移动端搜索框提示功能</title>
      <link href="/2017/09/06/web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B013-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%90%9C%E7%B4%A2%E6%A1%86%E6%8F%90%E7%A4%BA%E5%8A%9F%E8%83%BD/"/>
      <url>/2017/09/06/web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B013-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%90%9C%E7%B4%A2%E6%A1%86%E6%8F%90%E7%A4%BA%E5%8A%9F%E8%83%BD/</url>
      <content type="html"><![CDATA[<h2 id="web学习笔记13-移动端搜索框提示功能"><a href="#web学习笔记13-移动端搜索框提示功能" class="headerlink" title="web学习笔记13-移动端搜索框提示功能"></a>web学习笔记13-移动端搜索框提示功能</h2><p>&#160;&#160;&#160;&#160;最近项目一直在迭代更新，没有什么新的东西做，所以拿出来一个搜索的小模块分享下，功能就是输入关键字能出来相关字的联想吧，删除一些字的时候顺带可以保存上一段的联想，从外观上来看，效果还罢了，这里分享给大家，可以供大家看看。<br>&#160;&#160;&#160;&#160;效果图如下，github链接在此<a href="https://github.com/Yulingsong/search_history" target="_blank" rel="noopener">search_demo</a></p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-d144b2b3e636ece0.gif?imageMogr2/auto-orient/strip" alt="9月-05-2017 16-32-02.gif"></p><p>按照老规矩，下面就直接写编写过程了</p><h4 id="第一步：创建文件"><a href="#第一步：创建文件" class="headerlink" title="第一步：创建文件"></a>第一步：创建文件</h4><p>&#160;&#160;&#160;&#160;创建相应的html，js，css文件，引入jquery。<br><img src="http://upload-images.jianshu.io/upload_images/1062695-b6025aa17b8f6947.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><h4 id="第二步：引入文件，设置meta，编写html以及样式"><a href="#第二步：引入文件，设置meta，编写html以及样式" class="headerlink" title="第二步：引入文件，设置meta，编写html以及样式"></a>第二步：引入文件，设置meta，编写html以及样式</h4><p>html:</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;!--通用媒体查询--&gt;&lt;meta charset=&quot;UTF-8&quot; /&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,user-scalable=0,minimum-scale=1, maximum-scale=1&quot; /&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;search.css&quot;&gt;&lt;title&gt;搜索&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;search_nav&quot;&gt;    &lt;input type=&quot;search&quot; class=&quot;search_input searchProduct&quot; placeholder=&quot;查找您需要的商品&quot;&gt;    &lt;div class=&quot;search_cancel&quot;&gt;取消&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;search_find&quot;&gt;    &lt;div class=&quot;search_history&quot;&gt;        历史搜索    &lt;/div&gt;    &lt;div class=&quot;search_find_line&quot;&gt;       &lt;!--搜索结果和搜索历史--&gt;    &lt;/div&gt;&lt;/div&gt;&lt;script src=&quot;jquery.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;search.js&quot; type=&quot;application/javascript&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>css:</p><pre><code>*{    margin: 0;    padding: 0;}body{    background-color: #f5f5f9;}.search_nav{    width: 100%;    height: 45px;    position: fixed;    top:0;    left: 0;    background-color: #20232b;}.search_input{    float: left;    width: 75%;    height: 35px;    margin-left: 30px;    margin-top: 5px;    font-size: 15px;    text-indent: 30px;    border: 1px solid black;    border-radius: 40px;    outline: none;}input::-webkit-search-cancel-button {display: none;}.search_cancel{    float: right;    width: 15%;    height: 100%;    color:white;    text-align: center;    line-height: 45px;}.search_find{    background:#fff;    line-height:42px;    margin-top: 45px;}.search_history{    padding-left:10px;    font-weight:700;    font-size:16px}.search_find_title{    display:block;    position:relative;    padding-left:15px;    padding-right:10px;    font-size:14px;    color:#8a8a8a;    width:100%;    box-sizing:border-box}.search_find_title:after{    content:&apos;&apos;;    position:absolute;    top:0;    left:15px;    box-sizing:border-box;    width:92%;    height:1px;    color:#ddd;    border-bottom:1px solid #ddd;    -webkit-transform-origin:0 0;    transform-origin:0 0;    -webkit-transform:scaleY(.4);    transform:scaleY(.4)}</code></pre><p>&#160;&#160;&#160;&#160;当然了，这里面的样式格局什么的在自己实际项目中需要根据自己的项目来调整，不需要跟我这写的一样，重要的是逻辑部分。</p><h4 id="第三步：编写js逻辑"><a href="#第三步：编写js逻辑" class="headerlink" title="第三步：编写js逻辑"></a>第三步：编写js逻辑</h4><p>&#160;&#160;&#160;&#160;一般情况下，我们在进入搜索页面的时候，大多数会出现历史搜索，也就是搜索记录，我们首先需要的就是进行历史搜索的渲染，我这里历史搜索都是用localStorage进行存储，大家根据需要可以进行对应的存储或者获取。</p><pre><code>var history_search = [];//存储历史搜索数据//获取历史搜索数据,若没有则为空if(localStorage.getItem(&quot;history_search&quot;)){    history_search = JSON.parse(localStorage.getItem(&quot;history_search&quot;));//获取历史搜索数据}else{    history_search = [];}</code></pre><p>&#160;&#160;&#160;&#160;接下来在获取了历史记录的前提下，我们要把历史记录渲染到页面上</p><pre><code>//渲染历史记录function setpage(){    var product_list = &apos;&apos;;    //动态添加元素至页面上    if(history_search.length != 0){        $(&quot;.search_history&quot;).show();        if(history_search.length &gt;= 10){            for(var i = 0; i &lt; 10 ;i++){                product_list = &apos;&lt;a class=&quot;search_find_title&quot;&gt;&apos;+history_search[i]+&apos;&lt;/a&gt;&apos;;                $(&quot;.search_find_line&quot;).append(product_list);            }        }else{            for(var i = 0; i &lt; history_search.length;i++){                product_list = &apos;&lt;a class=&quot;search_find_title&quot;&gt;&apos;+history_search[i]+&apos;&lt;/a&gt;&apos;;                $(&quot;.search_find_line&quot;).append(product_list);            }        }    }else{        $(&quot;.search_history&quot;).hide();    }}setpage();</code></pre><p>&#160;&#160;&#160;&#160;这里我们需要注意的是，一般的历史记录不会是太多的，一般会显示前十条最近搜索的，我这边在渲染的时候做了截取，其实在存的时候就应该去做判断，在超出10条或者规定条数的时候我们只保存十条或者规定条数，然后在渲染的时候就不需要再去截取了。</p><p>&#160;&#160;&#160;&#160;接下来需要做的处理就是在输入关键字的时候，一些请求和缓存搜索出来的提示数据</p><pre><code>var obj_arr = [];//请求结果var timeout = 0;var keyName = &apos;&apos;;//搜索关键字var ajaxCache = {};//定义缓存对象(保存请求出来的数据)</code></pre><p>&#160;&#160;&#160;&#160;这里我先把另外两个方法先提出来先写了，一个是渲染页面的方法，一个是判断字符串是否为空的方法，这两个方法在接下来的逻辑中需要调用。</p><pre><code>//渲染页面方法function setListPage(obj,no){    console.log(obj);    console.log(no);    ajaxCache = {};    obj_arr = obj;    $(&quot;.search_find_line&quot;).empty();    if(no == 1){        $(&quot;.search_history&quot;).hide();    }else{        $(&quot;.search_history&quot;).show();    }    var search_res = &apos;&apos;;    for(var i = 0; i &lt; obj.length;i++){        search_res = &apos;&lt;a class=&quot;search_find_title&quot;&gt;&apos;+obj[i]+&apos;&lt;/a&gt;&apos;;        $(&quot;.search_find_line&quot;).append(search_res);    }}//判断字符串是不是为空function isNull( str ){    if ( str == &quot;&quot; ) return true;    var regu = &quot;^[ ]+$&quot;;    var re = new RegExp(regu);    return re.test(str);}</code></pre><p>&#160;&#160;&#160;&#160;这里就是最重要的一部分了。</p><pre><code>//当按钮被松开时，触发事件$(&apos;.searchProduct&apos;).keyup(function(evt){//获取到关键字    keyName = $(this).val();//判断关键字是否为空    if(isNull(keyName) == false || keyName != &apos;&apos;){        //若输入字符串不为空,则显示网络请求搜索。        clearTimeout(timeout);        timeout = setTimeout(function(){            if(!!ajaxCache[keyName]){                //显示自动提示框，给框里填关联词条的内容                setListPage(ajaxCache[keyName],1);                ajaxCache = {};            }else{                var sendData = {                    &quot;keyName&quot;:keyName                };                $.ajax({                    type: &quot;POST&quot;,                    url: url,//我们自个的接口没法公开，大家可以用自己的。                    data:JSON.stringify(sendData),                    dataType: &apos;json&apos;,                    success: function (data) {                        console.log(data);                        if(data){                            if(data.data){                                //显示自动提示框，给框里填关联词条的内容                                ajaxCache[keyName]=[];                                ajaxCache[keyName]=data.data;//给缓存对象赋值                                setListPage(data.data,1);                            }                        }                    },                    error: function (err) {                        console.log(err);                    }                });            }        },200);    }else{        //若输入字符串为空,则显示历史搜索。        ajaxCache = {};        if(history_search.length == 0){            //若数组为空,历史搜索不显示            $(&quot;.search_history&quot;).hide();        }else{            $(&quot;.search_history&quot;).show();            setListPage(history_search,2)        }    }//手机端按下右下角的搜索按钮的时候触发事件   if (evt.keyCode == 13) {        localStorage.setItem(&apos;search_keyName&apos;,keyName);        var count = 0;        //判断历史搜索中是否已经存在当前搜索的关键字        for(var j = 0; j &lt; history_search.length;j++){            if(keyName == history_search[j]){                count += 1;            }else{                count += 0;            }        }        //如果没有,则添加进历史搜索        if(count == 0){            history_search.unshift(keyName);        }        //这边缺少的处理是历史搜索排序的问题。        localStorage.setItem(&quot;history_search&quot;,JSON.stringify(history_search));        window.location.href=&quot;&quot;;//跳转到搜索结果页之类的页面    }</code></pre><p>&#160;&#160;&#160;&#160;这就基本完成了，这里没有加一个搜索结果页，在出现提示搜索的时候，应该在<code>&lt;a class=&quot;search_find_title&quot;&gt;&lt;/a&gt;</code>上添加点击事件，以跳转到搜索结果页之类的，这边可以根据自己的需求来处理。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>web学习笔记12-移动端简易电梯效果</title>
      <link href="/2017/07/17/web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B012-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%AE%80%E6%98%93%E7%94%B5%E6%A2%AF%E6%95%88%E6%9E%9C/"/>
      <url>/2017/07/17/web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B012-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%AE%80%E6%98%93%E7%94%B5%E6%A2%AF%E6%95%88%E6%9E%9C/</url>
      <content type="html"><![CDATA[<p>&#160;&#160;&#160;&#160;前两个月离职之后就休息了短时间，最近刚入职新公司，开始做想的电商方面的项目，也挺有意思的，之前jquery相对用得少了点，基础也比较薄弱，在新的项目中就在慢慢补习中。这两天正好做到相关的电梯效果，就写了个小的demo，简易版，供大家刚开始搞的朋友们看看。</p><p>&#160;&#160;&#160;&#160;这里呢还是跟往常一样，先放上github链接<a href="https://github.com/Yulingsong/Elevator" target="_blank" rel="noopener">Elevator</a>和预览图，有个直观的感受才能有兴趣往下看，不过这个偏基础，如果刚入门的话可以看看。</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-84a3acf2a58886ae.gif?imageMogr2/auto-orient/strip" alt="电梯效果.gif"></p><p>&#160;&#160;&#160;&#160;下面就开始正式的说下我的思路，大家要是有好的思路可以更我交流，互相学习学习。</p><h4 id="第一步：设置meta，编写html架子-引入jquery"><a href="#第一步：设置meta，编写html架子-引入jquery" class="headerlink" title="第一步：设置meta，编写html架子,引入jquery"></a>第一步：设置meta，编写html架子,引入jquery</h4><p>&#160;&#160;&#160;&#160;首先就是编写页面，页面分为左右两个部分，上面的数据在实际运用中都是从后台获取，或者是本地数据，我这暂时是写死的数据，左边为<strong>leftSide</strong>，右边为<strong>rightSide</strong>，左边每个分类都在右边有一块代表这个分类的区域，并且内部会有相应的内容。这块内容叫做<strong>rightContent</strong>。因为内容都是动态添加的，所以html部分只有很少的代码。</p><pre><code>&lt;head&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0,minimum-scale=1.0,user-scalable=no&quot;&gt;    &lt;script language=&quot;javascript&quot; src=&quot;jquery.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;content&quot;&gt;        &lt;div class=&quot;leftSide&quot; id=&quot;leftSide&quot;&gt;        &lt;/div&gt;        &lt;div class=&quot;rightSide&quot;&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;</code></pre><h4 id="第二步：给架子添加css样式"><a href="#第二步：给架子添加css样式" class="headerlink" title="第二步：给架子添加css样式"></a>第二步：给架子添加css样式</h4><pre><code>*{     padding:0;     margin: 0;     background-color: #f5f5f9;     overflow:hidden } .content{     width: 100%;     height: 100%;     overflow: hidden;     position: fixed; } .leftSide{     float: left;     width: 30%;     height: 100%;     background-color: transparent;     overflow: auto; } .rightSide{     float: left;     width: 70%;     height: 100%;     background-color: #f5f5f9;     overflow: hidden; }</code></pre><p>&#160;&#160;&#160;&#160;为了不让整个页面随鼠标滚动而滚动，所以要在*中设置overflow:hidden，而整块区域也同样要这么设置。左边区域为了可以上下滑动看分类，则是需要设置成auto的。</p><h4 id="第三步：左右动态添加菜单并设置样式"><a href="#第三步：左右动态添加菜单并设置样式" class="headerlink" title="第三步：左右动态添加菜单并设置样式"></a>第三步：左右动态添加菜单并设置样式</h4><p>&#160;&#160;&#160;&#160;左边要添加很多小块，并且需要设置选中样式，所以先添加样式</p><pre><code>.leftSide span{    display: block;    width: 100%;    height: 40px;    background-color: white;    border-bottom: 1px solid transparent;}.leftSide span p{    display: block;    margin: 0 auto;    width: 80%;    height: 100%;    background-color: transparent;    text-align: center;    line-height: 40px;    font-size: 14px;    color:black;    border-bottom: 1px solid lightgrey;}.leftSide .active{    border-left: 3px solid red;    background-color: #f5f5f9;}.rightSide .rightContent{    width: 100%;    height: 100%;    background-color: #f5f5f9;    overflow: auto;}.line{    width: 80%;    height: 50px;    background-color: lightgrey;    margin: 0 auto;    margin-top: 10px;    text-align: center;    line-height: 50px;}</code></pre><p>&#160;&#160;&#160;&#160;左右动态添加元素和假数据</p><pre><code>//分类数组var list = [&apos;推荐分类&apos;,&apos;京东超市&apos;,&apos;手机数码&apos;,&apos;国际名牌&apos;,&apos;奢侈品&apos;,&apos;电脑办公&apos;,&apos;家用电器&apos;,&apos;食品生鲜&apos;,&apos;酒水饮料&apos;,&apos;母婴童装&apos;,&apos;玩具乐器&apos;,&apos;汽车用品&apos;,&apos;厨具&apos;,&apos;男装&apos;,&apos;女装&apos;,&apos;男鞋&apos;,&apos;女鞋&apos;,&apos;箱包手袋&apos;,&apos;钟表珠宝&apos;];//设置左边滑动var html = &apos;&apos;;for(var i = 0;i &lt; list.length;i++){    if(i == 0){        html = &apos;&lt;span class=&quot;active&quot; onclick=&quot;setActive(&apos;+i+&apos;)&quot;&gt;&apos;+&apos;&lt;p&gt;&apos;+list[i]+&apos;&lt;/p&gt;&apos;+&apos;&lt;/span&gt;&apos;;    }else{        html = &apos;&lt;span onclick=&quot;setActive(&apos;+i+&apos;)&quot;&gt;&apos;+&apos;&lt;p&gt;&apos;+list[i]+&apos;&lt;/p&gt;&apos;+&apos;&lt;/span&gt;&apos;;    }    rightContent = &apos;&lt;div class=&quot;rightContent&quot;&gt;&lt;/div&gt;&apos;;    $(&quot;#leftSide&quot;).append(html);    $(&quot;.rightSide&quot;).append(rightContent);}  //动态添加假数据divvar fadeDataDiv = &apos;&apos;;for(var i = 0; i &lt; list.length;i++){    fadeDataDiv = &apos;&lt;div class=&quot;line&quot;&gt;&apos;+&apos;商品数据&apos;+i+&apos;&lt;/div&gt;&apos;;    $(&quot;.rightContent&quot;).append(fadeDataDiv);}</code></pre><h4 id="第四步：获取距离顶部距离的数组"><a href="#第四步：获取距离顶部距离的数组" class="headerlink" title="第四步：获取距离顶部距离的数组"></a>第四步：获取距离顶部距离的数组</h4><p>&#160;&#160;&#160;&#160;获取每一个分类右侧的div距离顶部的距离，在点击事件中可以进行相应的设置。</p><pre><code>//获取距离顶部距离的数组var topData = [];for(var j=0;j&lt;$(&apos;.rightContent&apos;).length;j++){    topData.push($(&apos;.rightContent&apos;).eq(j).offset().top);}</code></pre><h4 id="第五步：完成点击事件"><a href="#第五步：完成点击事件" class="headerlink" title="第五步：完成点击事件"></a>第五步：完成点击事件</h4><p>&#160;&#160;&#160;&#160;在点击事件中首先要把已点击的样式去掉，然后为被点击的元素添加样式，同时设置右侧菜单距离顶部距离。</p><pre><code>//设置右边显示区域function setActive(i){    $(&quot;.leftSide span&quot;).removeClass(&apos;active&apos;);    $(&quot;.leftSide span&quot;).eq(i).addClass(&apos;active&apos;);    $(&apos;.rightSide&apos;).animate({scrollTop:topData[i]+&apos;px&apos;});}</code></pre><p>&#160;&#160;&#160;&#160;这样就基本完成了功能，在此基础上可以继续往复杂的写，也可以写不一样的。要是看到上面有问题可以留言讨论。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>pageload</title>
      <link href="/2017/07/05/pageload/"/>
      <url>/2017/07/05/pageload/</url>
      <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;无限分页&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;link rel="stylesheet" href="assets/</span>css/index.css<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;div class="</span>l-page<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;ul id="</span>list<span class="string">" class="</span>list<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;script src="</span><span class="comment">//cdn.bootcss.com/jquery/3.1.0/jquery.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line">&lt;script src=<span class="string">"js/jquery.mockjax.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"js/dataMock.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="comment">//作为一个对象的w和h属性返回视口的尺寸</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getViewportSize</span>(<span class="params">w</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//使用指定的窗口， 如果不带参数则使用当前窗口</span></span><br><span class="line">        w = w || <span class="built_in">window</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//除了IE8及更早的版本以外，其他浏览器都能用</span></span><br><span class="line">        <span class="keyword">if</span>(w.innerWidth != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">w</span>: w.innerWidth, <span class="attr">h</span>: w.innerHeight&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对标准模式下的IE（或任意浏览器）</span></span><br><span class="line">        <span class="keyword">var</span> d = w.document;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">document</span>.compatMode == <span class="string">"CSS1Compat"</span>)</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">w</span>: d.documentElement.clientWidth, <span class="attr">h</span>: d.documentElement.clientHeight&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对怪异模式下的浏览器</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">w</span>: d.body.clientWidth, <span class="attr">h</span>: d.body.clientHeight&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//检测滚动条是否滚动到页面底部</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isScrollToPageBottom</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//文档高度</span></span><br><span class="line">        <span class="keyword">var</span> documentHeight = <span class="built_in">document</span>.documentElement.offsetHeight;</span><br><span class="line">        <span class="keyword">var</span> viewPortHeight = getViewportSize().h;</span><br><span class="line">        <span class="keyword">var</span> scrollHeight = <span class="built_in">window</span>.pageYOffset ||</span><br><span class="line">                <span class="built_in">document</span>.documentElement.scrollTop ||</span><br><span class="line">                <span class="built_in">document</span>.body.scrollTop || <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> documentHeight - viewPortHeight - scrollHeight &lt; <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//商品模板</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getGoodsTemplate</span>(<span class="params">goods</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;li&gt;"</span> +</span><br><span class="line">                <span class="string">"&lt;div class='pic-wrap leftFloat'&gt;"</span> +</span><br><span class="line">                <span class="string">"&lt;img src='"</span> + goods.pic + <span class="string">"'&gt;"</span> +</span><br><span class="line">                <span class="string">"&lt;/div&gt;"</span> +</span><br><span class="line">                <span class="string">"&lt;div class='info-wrap leftFloat'&gt;"</span> +</span><br><span class="line">                <span class="string">"&lt;div class='info-name'&gt;&lt;span&gt;"</span> + goods.name + <span class="string">"&lt;/span&gt;&lt;/div&gt;"</span> +</span><br><span class="line">                <span class="string">"&lt;div class='info-address'&gt;&lt;span&gt;"</span> +　goods.address +<span class="string">"&lt;/span&gt;&lt;/div&gt;"</span> +</span><br><span class="line">                <span class="string">"&lt;div class='info-bottom'&gt;"</span> +</span><br><span class="line">                <span class="string">"&lt;div class='info-price leftFloat'&gt;&lt;span&gt;￥"</span> + goods.price + <span class="string">"&lt;/span&gt;&lt;/div&gt;"</span> +</span><br><span class="line">                <span class="string">"&lt;div class='info-star leftFloat'&gt;&lt;span&gt;"</span> + goods.star + <span class="string">"人推荐&lt;/span&gt;&lt;/div&gt;"</span> +</span><br><span class="line">                <span class="string">"&lt;div class='info-more leftFloat'&gt;&lt;span&gt;更多信息&lt;/span&gt;&lt;/div&gt;"</span> +</span><br><span class="line">                <span class="string">"&lt;/div&gt;"</span> +</span><br><span class="line">                <span class="string">"&lt;/div&gt;"</span> +</span><br><span class="line">                <span class="string">"&lt;/li&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化的时候默给list加载100条数据</span></span><br><span class="line">    $.ajax(<span class="string">"http://localhost:8800/loadData?sessionId="</span> + (+ <span class="keyword">new</span> <span class="built_in">Date</span>)).done(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(result.status)&#123;</span><br><span class="line">            <span class="keyword">var</span> html = <span class="string">""</span>;</span><br><span class="line">            result.data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">goods</span>)</span>&#123;</span><br><span class="line">                html += getGoodsTemplate(goods);</span><br><span class="line">            &#125;);</span><br><span class="line">            $(<span class="string">"#list"</span>).append(html);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//加载数据</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">loadDataDynamic</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//先显示正在加载中</span></span><br><span class="line">        <span class="keyword">if</span>( $(<span class="string">"#loadingLi"</span>).length === <span class="number">0</span>)</span><br><span class="line">             $(<span class="string">"#list"</span>).append(<span class="string">"&lt;li id='loadingLi' class='loading'&gt;正在加载...&lt;/li&gt;"</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            $(<span class="string">"#loadingLi"</span>).text(<span class="string">"正在加载..."</span>).removeClass(<span class="string">"space"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> loadingLi = <span class="built_in">document</span>.getElementById(<span class="string">"loadingLi"</span>);</span><br><span class="line">        loadingLi.scrollIntoView();</span><br><span class="line">        <span class="comment">//加载数据,数据加载完成后需要移除加载提示</span></span><br><span class="line">        <span class="keyword">var</span> hasData = <span class="literal">false</span>, msg = <span class="string">""</span>;</span><br><span class="line">        $.ajax(<span class="string">"http://localhost:8800/loadData?sessionId="</span> + (+ <span class="keyword">new</span> <span class="built_in">Date</span>)).done(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">             <span class="keyword">if</span>(result.status)&#123;</span><br><span class="line">                <span class="keyword">if</span>(result.data.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    hasData = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">var</span> html = <span class="string">""</span>;</span><br><span class="line">                    result.data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">goods</span>)</span>&#123;</span><br><span class="line">                        html += getGoodsTemplate(goods);</span><br><span class="line">                    &#125;);</span><br><span class="line">                    $(<span class="string">"#list"</span>).append(html);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    msg = <span class="string">"数据已加载到底了"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">             $(<span class="string">"#list"</span>).append(loadingLi);</span><br><span class="line">        &#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            msg = <span class="string">"数据加载失败!"</span>;</span><br><span class="line">         &#125;).always(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            !hasData &amp;&amp; setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                $(<span class="built_in">document</span>.body).scrollTop(<span class="built_in">document</span>.body.scrollTop <span class="number">-40</span>);</span><br><span class="line">            &#125;, <span class="number">500</span>);</span><br><span class="line">                msg &amp;&amp; $(<span class="string">"#loadingLi"</span>).text(msg);</span><br><span class="line">            <span class="comment">//重新监听滚动</span></span><br><span class="line">            setTimeout(watchScroll, <span class="number">900</span>);</span><br><span class="line">         &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果滚动条滚动到页面底部，需要加载新的数据,并且显示加载提示</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">watchScroll</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!isScrollToPageBottom())&#123;</span><br><span class="line">            setTimeout( <span class="built_in">arguments</span>.callee, <span class="number">900</span>);</span><br><span class="line">            <span class="keyword">return</span>;            &#125;</span><br><span class="line">        loadDataDynamic();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//开始检测滚动条</span></span><br><span class="line">    watchScroll();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//参考：http://www.cnblogs.com/xing901022/p/5052780.html</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Ionic app打包ios全流程</title>
      <link href="/2017/05/03/Ionic-app%E6%89%93%E5%8C%85ios%E5%85%A8%E6%B5%81%E7%A8%8B/"/>
      <url>/2017/05/03/Ionic-app%E6%89%93%E5%8C%85ios%E5%85%A8%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h2 id="Ionic-app打包ios全流程"><a href="#Ionic-app打包ios全流程" class="headerlink" title="Ionic app打包ios全流程"></a>Ionic app打包ios全流程</h2><h3 id="一-软硬件需求"><a href="#一-软硬件需求" class="headerlink" title="一.软硬件需求"></a>一.软硬件需求</h3><ul><li>硬件：Mac或者黑苹果（在windows上安装苹果系统）</li><li>软件：Xcode，Webstorm</li></ul><h3 id="二-配置环境"><a href="#二-配置环境" class="headerlink" title="二.配置环境"></a>二.配置环境</h3><h4 id="1-安装node-js"><a href="#1-安装node-js" class="headerlink" title="1.安装node.js"></a>1.安装node.js</h4><p>进入<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">官网</a></p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-b45bf103c84a8c51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="nodejs官网"></p><p>下载安装即可，之后在终端查看是否安装成功。</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-86c35c2beb7c7c42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查看安装是否成功"></p><h4 id="2-安装ionic，cordova"><a href="#2-安装ionic，cordova" class="headerlink" title="2.安装ionic，cordova"></a>2.安装ionic，cordova</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g cordova ionic</span><br></pre></td></tr></table></figure><p>安装结束后在终端查看版本信息以便知道是否安装成功</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-e33ef74b7ba46747.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查看安装是否成功"></p><h3 id="三．Ionic添加ios平台，编译"><a href="#三．Ionic添加ios平台，编译" class="headerlink" title="三．Ionic添加ios平台，编译"></a>三．Ionic添加ios平台，编译</h3><h4 id="1-添加平台"><a href="#1-添加平台" class="headerlink" title="1.添加平台"></a>1.添加平台</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ionic platform add ios</span><br></pre></td></tr></table></figure><h4 id="2-编译"><a href="#2-编译" class="headerlink" title="2.编译"></a>2.编译</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ionic build ios</span><br></pre></td></tr></table></figure><h3 id="四-打包"><a href="#四-打包" class="headerlink" title="四.打包"></a>四.打包</h3><h4 id="1-打开文件"><a href="#1-打开文件" class="headerlink" title="1.打开文件"></a>1.打开文件</h4><p>进入目标文件夹下platforms文件夹下，继续进入ios文件夹下，双击打开qsf.xcodeproj文件。则用xcode打开了文件。</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-f66d7a74aa6666cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><h4 id="2-下载证书"><a href="#2-下载证书" class="headerlink" title="2.下载证书"></a>2.下载证书</h4><p>进入苹果<a href="https://idmsa.apple.com/IDMSWebAuth/login?appIdKey=891bd3417a7776362562d2197f89480a8547b108fd934911bcbea0110d07f757&amp;path=%2Faccount%2F&amp;rv=1" target="_blank" rel="noopener">开发者网站</a>，输入公司官方账号，进入网站。</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-f571edebfeb8f56f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-c4ece7aa7d108718.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p>点击证书，进行下载。</p><h4 id="3-添加新设备，生成证书"><a href="#3-添加新设备，生成证书" class="headerlink" title="3.添加新设备，生成证书"></a>3.添加新设备，生成证书</h4><ul><li>获取设备UDID</li></ul><p>进入<a href="https://www.pgyer.com/" target="_blank" rel="noopener">蒲公英官网</a>，注册账号，实名认证。之后首页点击UDID。</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-0597a2420f9351b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-1cd55d923e9b5855.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p>iOS设备扫码，用safari打开，安装插件，输入邮箱可以获取到自己设备的UDID。</p><ul><li>证书中添加设备</li></ul><p>开发者官网，点击设备下的iphone，可以看到当前证书中的设备，点击右上角进行添加注册新设备，输入name和udid，注册完成之后就存在于当前设备列表中。</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-8978a09ebd953d6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><ul><li>生成证书</li></ul><p>打开mac自带钥匙串软件。点击钥匙串访问</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-f695c0c9cd23dd8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-433450efb9208b3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-f0fb30165bfdedcb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-d483d191d5819f48.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-5c6a4ee83bc52501.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p>在完成上述操作之后，在桌面上生成了一个文件。之后进入官网，开始生成证书，在证书页面右上角点击添加</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-1c06249932c7eb76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p>点击最下方的continue，进入下一页面继续点击continue</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-7ee0e575a7990eb3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p>进入页面之后把之前用电脑生成的文件上传</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-121a81394124df52.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-2304ad0fc0ac1e65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p>点击done完成证书的生成，首页已经生成最新的证书了，下载双击安装即可。</p><ul><li>打包流程</li></ul><p>安装证书之后进入xcode，设备中选择Generic iOS Devide</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-9a1494626fd80d39.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p>点击菜单栏中的product中的打包选项，然后等待打包</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-3cfd0ce4f3e552d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p>导出包</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-c4b480b1e0f0d28a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p>点击导出之后，选择打包测试包</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-554efc05bb5cd989.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p>点击next选择开发者账号，选择公司账号，之后按照流程点击next即可</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-f5957d78f247cac6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-6fc311befc925012.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p>导出到指定位置</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-a184057322979b18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p>在导出的位置会生成一个文件夹，其中带有一个ipa的安装包。</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-313ec9b2af780619.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-7f9636a37f7fcbfa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><ul><li>发布</li></ul><p>进入蒲公英官网，点击发布</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-7a1c07efcf6c6bbe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-325daad029fb57a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p>上传ipa包</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-0bce78ef73c987ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-349899baaeefafd8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p>点击发布应用即可。</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-aa201bbe51fa2c9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-373ee5b520367a15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p>到这，证书中已添加的设备就可以通过扫描二维码在safari中打开页面，安装app了。</p><p>PS:在蒲公英上发布应用的过程，安卓打包结束也可以直接用蒲公英进行发布。</p><p>此外需要住的一点是，在本地环境和打包发布的环境中，需要调整部分代码</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Token，Cookie，Session区别(转)</title>
      <link href="/2017/04/26/Token%EF%BC%8CCookie%EF%BC%8CSession%E5%8C%BA%E5%88%AB-%E8%BD%AC/"/>
      <url>/2017/04/26/Token%EF%BC%8CCookie%EF%BC%8CSession%E5%8C%BA%E5%88%AB-%E8%BD%AC/</url>
      <content type="html"><![CDATA[<p>转自csdn上以为作者，链接（<a href="http://blog.csdn.net/tobetheender/article/details/52485948）" target="_blank" rel="noopener">http://blog.csdn.net/tobetheender/article/details/52485948）</a></p><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>session 从字面上讲，就是会话。这个就类似于你和一个人交谈，你怎么知道当前和你交谈的是张三而不是李四呢？对方肯定有某种特征（长相等）表明他就是张三。</p><p>session 也是类似的道理，服务器要知道当前发请求给自己的是谁。为了做这种区分，服务器就要给每个客户端分配不同的“身份标识”，然后客户端每次向服务器发请求的时候，都带上这个“身份标识”，服务器就知道这个请求来自于谁了。至于客户端怎么保存这个“身份标识”，可以有很多种方式，对于浏览器客户端，大家都默认采用 cookie 的方式。</p><p>服务器使用session把用户的信息临时保存在了服务器上，用户离开网站后session会被销毁。这种用户信息存储方式相对cookie来说更安全，可是session有一个缺陷：如果web服务器做了负载均衡，那么下一个操作请求到了另一台服务器的时候session会丢失。</p><h3 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h3><p>Token的意思是“令牌”，是用户身份的验证方式，最简单的token组成:uid(用户唯一的身份标识)、time(当前时间的时间戳)、sign(签名，由token的前几位+盐以哈希<a href="http://lib.csdn.net/base/datastructure" target="_blank" rel="noopener">算法</a>压缩成一定长的十六进制字符串，可以防止恶意第三方拼接token请求服务器)。还可以把不变的参数也放进token，避免多次查库</p><h4 id="传统身份验证"><a href="#传统身份验证" class="headerlink" title="传统身份验证"></a>传统身份验证</h4><p>HTTP 是一种没有状态的协议，也就是它并不知道是谁是访问应用。这里我们把用户看成是客户端，客户端使用用户名还有密码通过了身份验证，不过下回这个客户端再发送请求时候，还得再验证一下。</p><p>解决的方法就是，当用户请求登录的时候，如果没有问题，我们在服务端生成一条记录，这个记录里可以说明一下登录的用户是谁，然后把这条记录的 ID 号发送给客户端，客户端收到以后把这个 ID 号存储在 Cookie 里，下次这个用户再向服务端发送请求的时候，可以带着这个 Cookie ，这样服务端会验证一个这个 Cookie 里的信息，看看能不能在服务端这里找到对应的记录，如果可以，说明用户已经通过了身份验证，就把用户请求的数据返回给客户端。</p><p>上面说的就是 Session，我们需要在服务端存储为登录的用户生成的 Session ，这些 Session 可能会存储在内存，磁盘，或者<a href="http://lib.csdn.net/base/mysql" target="_blank" rel="noopener">数据库</a>里。我们可能需要在服务端定期的去清理过期的 Session 。</p><h4 id="基于-Token-的身份验证"><a href="#基于-Token-的身份验证" class="headerlink" title="基于 Token 的身份验证"></a>基于 Token 的身份验证</h4><p>使用基于 Token 的身份验证方法，在服务端不需要存储用户的登录记录。大概的流程是这样的：</p><ul><li>客户端使用用户名跟密码请求登录</li><li>服务端收到请求，去验证用户名与密码</li><li>验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端</li><li>客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里或者 Local Storage 里</li><li>客户端每次向服务端请求资源的时候需要带着服务端签发的 Token</li><li>服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据</li></ul><p>APP登录的时候发送加密的用户名和密码到服务器，服务器验证用户名和密码，如果成功，以某种方式比如随机生成32位的字符串作为token，存储到服务器中，并返回token到APP，以后APP请求时，凡是需要验证的地方都要带上该token，然后服务器端验证token，成功返回所需要的结果，失败返回错误信息，让他重新登录。其中服务器上token设置一个有效期，每次APP请求的时候都验证token和有效期。</p><p>那么我的问题来了：</p><ul><li>1.服务器上的token存储到数据库中，每次查询会不会很费时。如果不存储到数据库，应该存储到哪里呢。</li><li>2.客户端得到的token肯定要加密存储的，发送token的时候再解密。存储到数据库还是配置文件呢？</li></ul><p>token是个易失数据，丢了无非让用户重新登录一下，新浪微博动不动就让我重新登录，反正这事儿我是无所谓啦。 </p><p>所以如果你觉得普通的数据库表撑不住了，可以放到 MSSQL/<a href="http://lib.csdn.net/base/mysql" target="_blank" rel="noopener">MySQL</a> 的内存表里（不过据说mysql的内存表性能提升有限），可以放到 Memcache里（讲真，这个是挺常见的策略），可以放到<a href="http://lib.csdn.net/base/redis" target="_blank" rel="noopener">Redis</a>里（我做过这样的实现），甚至可以放到 OpenResty 的变量字典里（只要你有信心不爆内存）。</p><p>token是个凭条，不过它比门票温柔多了，门票丢了重新花钱买，token丢了重新操作下认证一个就可以了，因此token丢失的代价是可以忍受的——前提是你别丢太频繁，要是让用户隔三差五就认证一次那就损失用户体验了。</p><p>基于这个出发点，如果你认为用数据库来保持token查询时间太长，会成为你系统的瓶颈或者隐患，可以放在内存当中。 </p><p>比如memcached、redis，KV方式很适合你对token查询的需求。 </p><p>这个不会太占内存，比如你的token是32位字符串，要是你的用户量在百万级或者千万级，那才多少内存。 </p><p>要是数据量真的大到单机内存扛不住，或者觉得一宕机全丢风险大，只要这个token生成是足够均匀的，高低位切一下分到不同机器上就行，内存绝对不会是问题。</p><p>客户端方面这个除非你有一个非常安全的办法，比如<a href="http://lib.csdn.net/base/operatingsystem" target="_blank" rel="noopener">操作系统</a>提供的隐私数据存储，那token肯定会存在泄露的问题。比如我拿到你的手机，把你的token拷出来，在过期之前就都可以以你的身份在别的地方登录。 </p><p>解决这个问题的一个简单办法<br>1、在存储的时候把token进行对称加密存储，用时解开。<br>2、将请求URL、时间戳、token三者进行合并加盐签名，服务端校验有效性。</p><p>这两种办法的出发点都是：窃取你存储的数据较为容易，而反汇编你的程序hack你的加密解密和签名算法是比较难的。然而其实说难也不难，所以终究是防君子不防小人的做法。话说加密存储一个你要是被人扒开客户端看也不会被喷明文存储……<br>方法1它拿到存储的密文解不开、方法2它不知道你的签名算法和盐，两者可以结合食用。 </p><p>但是如果token被人拷走，他自然也能植入到自己的手机里面，那到时候他的手机也可以以你的身份来用着，这你就瞎了。 于是可以提供一个让用户可以主动expire一个过去的token类似的机制，在被盗的时候能远程止损。</p><p>在网络层面上token明文传输的话会非常的危险，所以建议一定要使用HTTPS，并且把token放在post body里。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>修真院-练习答案集锦</title>
      <link href="/2017/04/08/%E4%BF%AE%E7%9C%9F%E9%99%A2-%E7%BB%83%E4%B9%A0%E7%AD%94%E6%A1%88%E9%9B%86%E9%94%A6/"/>
      <url>/2017/04/08/%E4%BF%AE%E7%9C%9F%E9%99%A2-%E7%BB%83%E4%B9%A0%E7%AD%94%E6%A1%88%E9%9B%86%E9%94%A6/</url>
      <content type="html"><![CDATA[<p>one:九宫格</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-bfaecb02efdebca0.gif?imageMogr2/auto-orient/strip" alt="4月-08-2017 00-54-47.gif"></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>web学习笔记11-angularjs指令基础学习</title>
      <link href="/2017/03/20/web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B011-angularjs%E6%8C%87%E4%BB%A4%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/2017/03/20/web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B011-angularjs%E6%8C%87%E4%BB%A4%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>&#160;&#160;&#160;&#160;从移动端刚入门直接转到前端angularJs快一年了，感觉还是在入门阶段，只会使用一些简单的东西，所以平常有时间会按照入门的思路去补习一下angularjs的基础部分，然后整理出来。这一篇的指令基础，也整理了好两天，借鉴了很多网上的文章，自己慢慢地写了一些小demo，基础部分的东西理解是理解了，不过在实际工作中使用的话还是需要再多研究研究。整理出来分享给大家，让像我一样入门的新手也可以有个全面的了解。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>&#160;&#160;&#160;&#160;angularJS中呢，有很多印象深刻的且方便的内容，其中呢，数据双向绑定和指令算是比较有特色的两个内容了，我们这呢就讲讲指令的学习。</p><p>&#160;&#160;&#160;&#160;指令，就是用新属性，来扩展HTML，让DOM元素有用特定的行为。就我个人对指令的理解，就是把一些复杂，复用性多的代码或者代码量大的插件之类的封装成一个指令，在前端html页面上使用，这样既简化了页面，优化了代码，也增加了工作效率。</p><p>&#160;&#160;&#160;&#160;angularJS自己有很多内置指令，一般前缀都是ng-，比如说ng-model,ng-app,ng-show,ng-repeat等等。但这些也没什么好说的，因为这些基本上都是angular已经封装好的，直接使用就可以了。AngularJS内置的指令外，我们还可以创建自定义指令。</p><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><h3 id="指令的属性"><a href="#指令的属性" class="headerlink" title="指令的属性"></a>指令的属性</h3><p>&#160;&#160;&#160;&#160;首先先简略的看下自定义的一些基本上属性和作用</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>restrict</td><td>申明标识符在模版中作为元素，属性，类，注释或组合，如何使用</td></tr><tr><td>priority</td><td>设置模版中相对于其他标识符的执行顺序</td></tr><tr><td>Template</td><td>指定一个字符串式的内嵌模版，如果你指定了模版是一个URL，那么是不会使用的</td></tr><tr><td>tempateUrl</td><td>指定URL加载的模版，如果你已经指定了内嵌的模版字符串，那么它不会使用的</td></tr><tr><td>Replace</td><td>如果为真，替换当前元素，如果是假或未指定，拼接到当前元素</td></tr><tr><td>Transclude</td><td>移动一个标识符的原始字节带你到一个新模版的位置</td></tr><tr><td>Scope</td><td>为这个标识符创建一个新的作用域，而不是继承父作用域</td></tr><tr><td>Controller</td><td>创建一个控制器通过标识符公开通信API</td></tr><tr><td>Require</td><td>当前标识符需要另外一个标识符提供正确的函数功能 </td></tr><tr><td>Link</td><td>通过代码修改目标DOM元素的实例，添加事件监听，建立数据绑定</td></tr><tr><td>Compile</td><td>通过标识符拷贝编程修改DOM模版</td></tr></tbody></table><h3 id="指令基础属性"><a href="#指令基础属性" class="headerlink" title="指令基础属性"></a>指令基础属性</h3><p>&#160;&#160;&#160;&#160;接下来我们简单的说明下各个属性的具体情况。</p><h4 id="1-restrict-string"><a href="#1-restrict-string" class="headerlink" title="1.restrict(string)"></a>1.restrict(string)</h4><p>&#160;&#160;&#160;&#160;简单的一句话来解释这个属性是什么意思，就是决定你所写的自定义指令可以以哪几种方式出现在你的代码中。</p><p>&#160;&#160;&#160;&#160;这个属性的值有四个，也就是代表可以以四种不同的方式来使用。</p><table><thead><tr><th>值</th><th>样式</th><th>概述</th><th>示例</th></tr></thead><tbody><tr><td>E</td><td>Element</td><td>作为一个新的HTML元素来使用。</td><td><code>&lt;hello&gt;&lt;/hello&gt;</code></td></tr><tr><td>A</td><td>Attribute</td><td>作为一个元素的属性来使用</td><td><code>&lt;div hello&gt;&lt;/div&gt;</code></td></tr><tr><td>C</td><td>Class</td><td>作为一个元素的类来使用</td><td><code>&lt;div class=&quot;hello&quot;&gt;&lt;/div&gt;</code></td></tr><tr><td>M</td><td>Comment</td><td>作为注释来使用</td><td><code>&lt;!--directive: hello --&gt;</code></td></tr></tbody></table><p>&#160;&#160;&#160;&#160;一般情况，我们常用的是EA，在第四个注释中使用的时候，冒号后面得加一个空格，不然没法用，不过这种注释形式我们用的也比较少。一般情况下，我们在写指令的时候可以不写restrict属性，那样就会默认是A。</p><h4 id="2-priority-number"><a href="#2-priority-number" class="headerlink" title="2.priority(number)"></a>2.priority(number)</h4><p>&#160;&#160;&#160;&#160;这个属性是来规定自定义的指令的优先级的，意思就是一个DOM元素上有多个指令的时候，有限处理哪个就看这个值的设置。优先级高的就先执行。默认是0.一般情况都不需要去设置。</p><h4 id="3-templates-string-or-function-tempateUrl"><a href="#3-templates-string-or-function-tempateUrl" class="headerlink" title="3.templates(string or function)/tempateUrl"></a>3.templates(string or function)/tempateUrl</h4><p>&#160;&#160;&#160;&#160;规定了指令被Angular编译和链接（link）后生成的HTML标记,可以很简单，也可以很复杂，当值是一个方法的时候，方法返回的就是代表模板的字符串，同事也可以在里面使用&#123;&#123;&#125;&#125;表达式。</p><pre><code>template: function () {     return &apos;&lt;div&gt;你好&lt;/div&gt;&apos;; }</code></pre><p>&#160;&#160;&#160;&#160;不过，通常情况下呢，template这个属性都会被templateUrl取代掉，用它来指向一个外部的文件地址，所以我们通常把模板放在外部的一个HTML文件中，然后使用templateUrl来指向他。因为我们想要封装成指令的那一块html有时候代码量会很大，或者是比较复杂，那么直接写在这个属性下面需要拆分，会很麻烦，其实可以单独写一个文件，然后在这个属性下面写上地址指向这个文件。</p><p>&#160;&#160;&#160;&#160;同时templateUrl用于指定将被加载的服务器文件，我们可以预缓存这些模版，减少get请求数，提高性能</p><h4 id="4-Replace-boolean"><a href="#4-Replace-boolean" class="headerlink" title="4.Replace(boolean)"></a>4.Replace(boolean)</h4><p>&#160;&#160;&#160;&#160;这个属性用来规定生成的HTML内容是否会替换掉定义此指令的HTML元素。我们简单的写一个指令</p><pre><code>var app = angular.module(&apos;testapp&apos;, []);app.directive(&apos;hello&apos;,function(){    return {        restrict : &apos;E&apos;,        replace : true,        template : &apos;&lt;div&gt;hello angular&lt;/div&gt;&apos;    };});</code></pre><p>&#160;&#160;&#160;&#160;使用</p><pre><code> &lt;body ng-app=&quot;testapp&quot;&gt;    &lt;hello&gt;&lt;/hello&gt;&lt;/body&gt;</code></pre><p>&#160;&#160;&#160;&#160;这个时候，我们的replace设置的是true，</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-c8fb6463c5a52b3a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2017-03-17 下午3.16.09.png"></p><p>&#160;&#160;&#160;&#160;当我们值设置为false时</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-9b02d03265f4651b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2017-03-17 下午3.16.26.png"></p><p>两者的差别在于，指令部分会不会被模板中的内容所替换。</p><h4 id="5-Transclude-boolean"><a href="#5-Transclude-boolean" class="headerlink" title="5.Transclude(boolean)"></a>5.Transclude(boolean)</h4><p>&#160;&#160;&#160;&#160;这个属性用来让我们规定指令是否可以包含任意内容,默认为false，表示不开启，如果设置为true，则开启该属性，当开启后，则可以在模板中通过ng-transclude方式替换指令元素中的内容。</p><p>&#160;&#160;&#160;&#160;举个例子来看</p><pre><code>&lt;body ng-app=&quot;testapp&quot;&gt;    &lt;hello&gt;        哎呦我去    &lt;/hello&gt;&lt;/body&gt;&lt;script&gt;    var app = angular.module(&apos;testapp&apos;, []);    app.directive(&apos;hello&apos;,function(){        return {            restrict : &apos;E&apos;,            replace : true,            transclude: true,            template : &apos;&lt;div ng-transclude&gt;hello angular&lt;/div&gt;&apos;        };    });&lt;/script&gt;</code></pre><p>&#160;&#160;&#160;&#160;页面是这么显示的：</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-88f1f584266ccb24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2017-03-17 下午3.28.38.png"></p><p>&#160;&#160;&#160;&#160;源码里面则变成这样：</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-c38c3e17826a51bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2017-03-17 下午3.29.41.png"></p><p>&#160;&#160;&#160;&#160;如果值为false，那么页面会变成空白的。在我个人看来，这个属性的设置，就是要把指令里面的内容替换掉，移动原始的内容到新模版中，当设置成为true时，标识符会删除原来的内容,并通过ng-transclude标识符使它重新插入到模版中，也可以这么用</p><pre><code>&lt;body ng-app=&quot;testapp&quot;&gt;&lt;hello&gt;    哎呦我去&lt;/hello&gt;&lt;/body&gt;&lt;script&gt;    var app = angular.module(&apos;testapp&apos;, []);    app.directive(&apos;hello&apos;,function(){        return {            restrict : &apos;E&apos;,            replace : true,            transclude: true,            template : &apos;&lt;div&gt;hello &lt;span ng-transclude&gt;&lt;/span&gt;&lt;/div&gt;&apos;        };    });&lt;/script&gt;</code></pre><p>&#160;&#160;&#160;&#160;那么页面会显示 hello 哎呦我去。不过这个属性我们平常写简单的指令的时候也不怎么用得着。</p><h3 id="指令的编译和链接函数"><a href="#指令的编译和链接函数" class="headerlink" title="指令的编译和链接函数"></a>指令的编译和链接函数</h3><p>&#160;&#160;&#160;&#160;上面说了一些基本的属性，基本属性在理解上面相对比较简单，设置值也不复杂，但编译和链接函数涉及到的东西就比较多了。我们在基础属性中也只是把一些模板或者html替换成指令，但是实际上的操作都是在编译或者链接功能里面。这两个功能是angular引用和创建实时视图的后面步骤。</p><p>&#160;&#160;&#160;&#160;angular初始化过程是这样的。</p><table><thead><tr><th>流程</th><th>内容</th></tr></thead><tbody><tr><td>脚本加载</td><td>加载angular，查找ng-app标识符找到应用绑定</td></tr><tr><td>编译阶段</td><td>在这一阶段，angular遍历DOM标志模版中所有注册的标志，对于每个标识符，基于标识符规则(template,replace,transclude等等）改造DOM，然后如果编译函数存在就调用它，结果一个编译的template函数，它会调用所有的标识符搜集的link韩素</td></tr><tr><td>链接阶段</td><td>为了让视图动起来，angular为每个标识符运行link函数，link函数通常在DOM或模型上创建监听器，这些监听器让视图和模型始终保持一致</td></tr></tbody></table><p>&#160;&#160;&#160;&#160;因此到了编译阶段，它处理转换了模版，链接阶段，它处理了修改视图中的数据，沿着这些思路，标识符中表一功能和链接功能主要区别就是链接功能转换了模版自身，而连接功能在模型和视图上创建了动态链接，就是在第二阶段，作用域scpoes被附加到了编译过程的link功能上，通过数据绑定，标识符变活了</p><h4 id="1-Scope-boolean-or-object"><a href="#1-Scope-boolean-or-object" class="headerlink" title="1.Scope(boolean or object)"></a>1.Scope(boolean or object)</h4><p>&#160;&#160;&#160;&#160;该属性是用来定义指令的scope的范围，默认情况下是false，也就是说继承了父控制器的scope，可以随意使用父控制器中的scope里的属性，但是有时候会污染到父scope的属性，所以得另外设置。</p><p>&#160;&#160;&#160;&#160;获取作用域scope的三种选择</p><ul><li>标识符DOM元素中已经存在的作用域</li><li>创建一个继承封闭的控制器作用域的新作用域，以便读取结构树作用域的所有值。</li><li>独立作用域，从父类中不继承任何属性，当你需要隔离这个标识符的操作和父类作用域时，创建可从用的组建来使用这个选项</li></ul><table><thead><tr><th>三种方式</th><th>设置</th></tr></thead><tbody><tr><td>已有作用域</td><td>scope:false(如果没有指定，这就是默认值）</td><td></td></tr><tr><td>新作用域</td><td>scope:true</td><td></td></tr><tr><td>独立作用域</td><td>scope:{属性名次和绑定风格｝</td><td></td></tr></tbody></table><p>&#160;&#160;&#160;&#160;举个例子吧:首先是scope的值不设置的时候，默认是false，和设置成true的时候，是都可以获取到父作用域的属性的。</p><pre><code>&lt;body ng-app=&quot;testapp&quot; ng-controller=&quot;myCtrl&quot;&gt;    &lt;hello&gt;&lt;/hello&gt;&lt;/body&gt;&lt;script&gt;    var app = angular.module(&apos;testapp&apos;, []);    app.controller(&apos;myCtrl&apos;,[&apos;$scope&apos;, function ($scope) {        $scope.abc = &apos;+abc是父作用域的属性&apos;;    }]);    app.directive(&apos;hello&apos;,function(){        return {            restrict : &apos;E&apos;,            replace : true,            template : &apos;&lt;div&gt;hello {{abc}}&lt;/div&gt;&apos;,            scope:false,            link: function (scope) {                console.log(scope.abc)            }        };    });&lt;/script&gt;</code></pre><p>&#160;&#160;&#160;&#160;显示结果都是</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-edff61fb39a5da04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2017-03-17 下午4.32.39.png"></p><p>&#160;&#160;&#160;&#160;但是如果把scope的值设置成&#123; &#125;，表示创建一个隔离的scope，不会继承父scope的属性。那么显示的结果只有hello。但是在有的时候我们也要需要访问父scope里的属性或者方法，我们可以通过标识符属性的键值对父类传递指定的属性给独立作用域</p><table><thead><tr><th>符号</th><th>意义</th></tr></thead><tbody><tr><td>@</td><td>传递字符串属性，你可以通过使用改写&#123;&#123;&#125;&#125;属性值从作用域中进行数据绑定(单向绑定)</td></tr><tr><td>=</td><td>数据绑定属性在标识符父作用域的属性中</td></tr><tr><td>&amp;</td><td>传递一个来自父作用域的函数，稍后调用</td></tr></tbody></table><ul><li>@:如果父作用域的属性内容修改了，子作用域对应的属性内容也会随之修改，而如果子作用域属性内容修改了，是不会影响父作用域对应的属性内容的。</li></ul><p>&#160;&#160;&#160;&#160;举个例子</p><pre><code>&lt;body ng-app=&quot;testapp&quot; ng-controller=&quot;myCtrl&quot;&gt;    &lt;input ng-model=&quot;name&quot;&gt;    &lt;hello name=&quot;{{name}}&quot;&gt;&lt;/hello&gt;&lt;/body&gt;&lt;script&gt;    var app = angular.module(&apos;testapp&apos;, []);    app.controller(&apos;myCtrl&apos;,[&apos;$scope&apos;, function ($scope) {    }]);    app.directive(&apos;hello&apos;,function(){        return {            restrict : &apos;E&apos;,            replace : true,            template : &apos;&lt;div&gt;hello {{name}}&lt;/div&gt;&apos;,            scope:{                name:&apos;@&apos;            }                };    });&lt;/script&gt;</code></pre><p>&#160;&#160;&#160;&#160;那么结果显示是</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-2afeffcbe811f4ed.gif?imageMogr2/auto-orient/strip" alt="3月-17-2017 16-44-56.gif"></p><ul><li>=:创建一个父作用域与子作用域可以同时共享的属性，即父作用域修改了该属性，子作用域也随之改变，反之亦然。</li></ul><p>&#160;&#160;&#160;&#160;举个例子</p><pre><code> &lt;body ng-app=&quot;testapp&quot; ng-controller=&quot;myCtrl&quot;&gt;    &lt;input type=&quot;text&quot; ng-model=&quot;name&quot; placeholder=&quot;Enter a name&quot;&gt;&lt;br&gt;    {{name}}&lt;br&gt;    &lt;hello name=&quot;name&quot;&gt;&lt;/hello&gt;&lt;/body&gt;&lt;script&gt;    var app = angular.module(&apos;testapp&apos;, []);    app.controller(&apos;myCtrl&apos;,[&apos;$scope&apos;, function ($scope) {}]);    app.directive(&apos;hello&apos;,function(){        return {            restrict : &apos;E&apos;,            replace : true,            template : &apos;&lt;input type=&quot;text&quot; ng-model=&quot;name&quot;&gt;&apos;,            scope:{                name:&apos;=&apos;            }        };    });&lt;/script&gt;</code></pre><p>&#160;&#160;&#160;&#160;那么结果显示是</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-d8ea800c43a14903.gif?imageMogr2/auto-orient/strip" alt="3月-17-2017 16-49-53.gif"></p><ul><li>&amp;:可以在独立的子作用域中直接调用父作用域的方法，在调用时可以向函数传递参数。</li></ul><p>&#160;&#160;&#160;&#160;举个例子</p><pre><code>&lt;body ng-app=&quot;testapp&quot; ng-controller=&quot;myCtrl&quot;&gt;    &lt;input type=&quot;text&quot; ng-model=&quot;name&quot; placeholder=&quot;Eneter a color&quot;&gt;    {{name}}    &lt;hello saysomething999=&quot;say();&quot; name=&quot;hahahahhahah&quot;&gt;&lt;/hello&gt;&lt;/body&gt;&lt;script&gt;    var app = angular.module(&apos;testapp&apos;, []);    app.controller(&apos;myCtrl&apos;,[&apos;$scope&apos;, function ($scope) {        $scope.say = function () {            alert(&apos;hello&apos;);        };        $scope.name = &apos;leifeng&apos;;    }]);    app.directive(&apos;hello&apos;,function(){        return {            restrict : &apos;E&apos;,            replace : true,            scope:{                name:&apos;@&apos;            },            template : &apos;&lt;button type=&quot;button&quot; ng-bind=&quot;name&quot; ng-init=&quot;saysomething();&quot;&gt;&lt;/button&gt;&apos;        };    });/script&gt;</code></pre><p>&#160;&#160;&#160;&#160;那么结果显示是</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-7b884fd7deaf0846.gif?imageMogr2/auto-orient/strip" alt="3月-17-2017 17-03-32.gif"></p><h4 id="2-link-string-or-function-和compile-String-or-Array"><a href="#2-link-string-or-function-和compile-String-or-Array" class="headerlink" title="2.link(string or function)和compile(String or Array)"></a>2.link(string or function)和compile(String or Array)</h4><p>&#160;&#160;&#160;&#160;在angularJs应用启动之前，它们是以HTML文本形式存在文本编辑器当中。应用启动会进行编译和链接，作用域会同HTML进行绑定。这个过程包含了两个阶段！</p><p>&#160;&#160;&#160;&#160;在编译的阶段，angularJs会遍历整个的文档并根据JavaScript中指令定义来处理页面上什么的指令。在遍历的过程中，有可能一层套着一层，一直延深处遍历。一但遍历和编译完毕就会返回一个叫做模板函数的函数。在这个函数没被返回（return）之前我们可以对编译后的DOM树进行修改。通常情况下，如果设置了compile函数，说明我们希望在指令和实时数据被放到DOM中之前进行DOM操作，在这个函数中进行诸如添加和删除节点等DOM操作是安全的。本质上，当我们设置了link选项，实际上是创建了一个postLink() 链接函数，以便compile() 函数可以定义链接函数。编译函数(compile)负责对模板DOM进行转换。链接函数(link)负责将作用域和DOM进行链接。</p><p>&#160;&#160;&#160;&#160;compile和link区别在于</p><ul><li>compile函数的作用是对指令的模板进行转换；</li><li>link作用是在模型和视图之间建立关联，包括在元素上注册事件监听；</li><li>scope在链接阶段才会被绑定到元素上，因此compile阶段操作scope会报错；</li><li>对于同一个指令的多个实例，compile只会执行一次；而link对于指令的每个实例都执行一次；</li><li>一般情况下只需要写link函数就够了；</li><li>如果编写自定义的compile函数，自定的link函数无效，因为compile函数应该返回一个link函数供后续处理</li></ul><p>&#160;&#160;&#160;&#160;简单的总结上面的话，就是一般情况我们不咋用compile，要注意 compile 函数不能访问 scope，并且必须返回一个 link 函数。但是如果没有设置 compile 函数，你可以正常地配置 link 函数，（有了compile，就不能用link，link函数由compile返回）。</p><p>&#160;&#160;&#160;&#160;compile函数可以写成如下的形式：</p><pre><code>app.directive(&apos;test&apos;, function() {      return {        compile: function(tElem,attrs) {          //do optional DOM transformation here              return function(scope,elem,attrs) {            //linking function here              };        }      };});</code></pre><p>&#160;&#160;&#160;&#160;指令生成的模板，在没有逻辑支持下，只是显示出来你想要的静态效果而已，没有实际作用，默认情况下，指令并不会创建新的作用域，更多情况是使用父scope。意思就是在指令存在于一个控制器下，就会使用这个控制器的scope，但是在哪使用呢，这就需要link函数了。</p><p>&#160;&#160;&#160;&#160;link函数中，有三个参数：</p><ul><li>scope：指令的scope，默认是父控制器的scope。</li><li>elem：指令元素</li><li>attrs：一个包含了指令所在元素的标准化的参数对象。</li></ul><p>&#160;&#160;&#160;&#160;link函数主要用来为DOM元素添加事件监听、监视模型属性变化、以及更新DOM。举个简单的例子来看吧。</p><pre><code>&lt;body ng-app=&quot;testapp&quot; ng-controller=&quot;myCtrl&quot;&gt;    &lt;hello&gt;&lt;/hello&gt;&lt;/body&gt;&lt;script&gt;    var app = angular.module(&apos;testapp&apos;, []);    app.controller(&apos;myCtrl&apos;,[&apos;$scope&apos;, function ($scope) {}]);    app.directive(&apos;hello&apos;,function(){        return {            restrict : &apos;E&apos;,            replace : true,            template : &apos;&lt;div id=&quot;hello&quot; ng-mousemove=&quot;move()&quot; ng-mouseleave=&quot;leave()&quot;&gt;hello world&lt;/div&gt;&apos;,            link : function(scope,element,attrs) {                scope.move = function () {                    document.getElementById(&apos;hello&apos;).style.color = &quot;red&quot;;                    console.log(&quot;mousemove&quot;);                };                scope.leave = function () {                    document.getElementById(&apos;hello&apos;).style.color = &quot;black&quot;;                    console.log(&apos;mouseleave&apos;)                }            }        }    });&lt;/script&gt;</code></pre><p>&#160;&#160;&#160;&#160;鼠标移入变红色，移除变黑色，页面显示是这样的(动态图上看不到鼠标)：</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-a3e975228f6c968e.gif?imageMogr2/auto-orient/strip" alt="3月-20-2017 15-09-58.gif"></p><h4 id="3-controller-string-or-function-和require-String-or-Array"><a href="#3-controller-string-or-function-和require-String-or-Array" class="headerlink" title="3.controller(string or function)和require(String or Array)"></a>3.controller(string or function)和require(String or Array)</h4><p>&#160;&#160;&#160;&#160;scope是指令与外界作用域通讯的桥梁，而require是指令与指令之间通讯的桥梁。这个参数最大的作用在于，当要开发单指令无法完成，需要一些组合型指令的控件或功能，例如日期控件，通过require参数，指令可以获得外部其他指令的控制器，从而达到交换数据、事件分发的目的。require的作用是为了让父子指令或者兄弟指令的controller之间搭建一个桥梁。也就是说父指令里的controller里面的数据能分享给子指令的controller，其中子指令的link第四个参数的值是父指令的controller对象的作用域上下文。</p><p>&#160;&#160;&#160;&#160;require有两个修饰符号:”?”、”^”</p><ul><li>? : 如果require没有找到相应的指令避免报错,还能确保程序的正常执行</li><li>^ : 表示往父级查找</li></ul><p>&#160;&#160;&#160;&#160;controller属性值是一个构造函数，在创建父元素指令时添加，并可以在函数中创建多个属性或方法。</p><p>&#160;&#160;&#160;&#160;直接拿网上的一个小例子来说明下。</p><pre><code>&lt;body  ng-app=&quot;requireapp&quot; ng-controller=&quot;myCtrl1&quot;&gt;    &lt;hello&gt;        &lt;div&gt;hello&lt;/div&gt;        &lt;beautiful good&gt;            beautiful        &lt;/beautiful&gt;    &lt;/hello&gt;&lt;/body&gt;&lt;script&gt;    var app = angular.module(&apos;requireapp&apos;, []);    app.controller(&apos;myCtrl1&apos;,[&apos;$scope&apos;, function ($scope) {}]);    app.directive(&quot;hello&quot;,function(){        return {            restrict : &quot;E&quot;,            controller : function($scope){                $scope.name = &quot;张三&quot;;                this.information = {                    name : $scope.name,                    age : 25,                    job : &quot;程序员&quot;                }            },            link : function(scope){}        }    });    app.directive(&quot;beautiful&quot;,function(){        return {            restrict : &quot;E&quot;,            require : &quot;?good&quot;,            controller : function(){            this.name = &quot;beautiful&quot;;            },            link : function (scope,element,attrs,good) {                console.log(good.name)                }        }    });    app.directive(&quot;good&quot;,function(){        return {            restrict : &quot;A&quot;,            require : &quot;?^hello&quot;,            controller : function(){                this.name = &quot;good&quot;;            },            link : function (scope,element,attrs,hello) {                console.log(hello.information)            }        }    });&lt;/script&gt;</code></pre><p>&#160;&#160;&#160;&#160;页面显示：</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-b68c952c68ca3938.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2017-03-20 下午2.35.20.png"></p><p>&#160;&#160;&#160;&#160;控制台显示：</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-b498287e637a0c6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2017-03-20 下午2.35.24.png"></p><p>&#160;&#160;&#160;&#160;我们简单的看下，html中首先写的是hello指令，这个指令只写了一个对象，里面有三个数据，name,age,job，值分别是张三，25，和程序员。很简单的指令。然后在hello指令内部，有一个是div，就是页面显示hello的div，可以不看，再看下面的调用的beautiful指令，里面又使用了good指令，good的指令也是很简单的，声明了在他的作用域内，name属性的值是good。同时往父级查找hello指令，没找到也没事。第三个指令是beautiful，内部也是找good指令，link第四个参数的值是父指令的controller对象的作用域上下文。link方法内部打印good的那么值，由上面我们看到的good指令，可以知道这个值就是good。good指令中打印的是hello指令的对象，打印出来的也就是hello指令里的对象。最后使用的时候就得到图上的结果。</p><p>&#160;&#160;&#160;&#160;感觉上面这一堆废话说了也没啥用，总结出来一句话就是good的控制器跟hello的控制器进行通信,beautiful又可以跟同级的good通信。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>&#160;&#160;&#160;&#160;以上呢就是整理出来的全部内容，在我看到，比较重要的地方是在作用域那块，因为我们平常如果只是使用一些简单的指令的时候，传参调用数据这些是比较常用的，之前写一些简单的指令的时候总是在纠结模板中数据到底怎么去写，怎么传入等等。别的像link，compie，controller的使用区别的话，细看看网上的一些文章也是比较好理解的。触发的顺序直接的差别，相互之间的关系我都有提到等等，</p><p>&#160;&#160;&#160;&#160;在看完这些东西之后，可以自己试着写一个简单的指令，可以参照我之前一篇文章里写的时间选择器来自己练习练习，顺路还可以优化下我写的那个粗糙的指令。另外废话一句，大家要是看到有什么问题的可以评论我们一起讨论讨论，因为我也是刚整理出来，对他的了解也并不是很全面，大家可以一起来聊聊。借鉴的一些文章就不贴了，百度下一堆，大家自便。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>web学习笔记10-自定义时间选择器指令编写</title>
      <link href="/2017/01/12/web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B010-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%97%B6%E9%97%B4%E9%80%89%E6%8B%A9%E5%99%A8%E6%8C%87%E4%BB%A4%E7%BC%96%E5%86%99/"/>
      <url>/2017/01/12/web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B010-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%97%B6%E9%97%B4%E9%80%89%E6%8B%A9%E5%99%A8%E6%8C%87%E4%BB%A4%E7%BC%96%E5%86%99/</url>
      <content type="html"><![CDATA[<p>&#160;&#160;&#160;&#160;好久没有更新了，最近在做一个前端angularJs项目，内容比较复杂，幸好都不算太难。前两天自己写了个简单的时间选择器，但是水平有限，写的代码量稍微有点大，就想着封装成一个指令，暴露出小时和分钟，以便在控制器中获取到，并且发送到后台。不过，之前虽然一直在写angular，指令也接触到不少，但是一直是在使用别人写好的，自己写还是第一次，就想着，正好利用下这个机会，自己尝试些一个简单点的指令也挺好的。</p><p>&#160;&#160;&#160;&#160;这里我还是按照往常习惯一样，先贴github地址，毕竟看那么长的东西也是太累了。<a href="https://github.com/Yulingsong/angular-timepicker" target="_blank" rel="noopener">angular-timepicker</a></p><p>&#160;&#160;&#160;&#160;<strong>效果图如图：</strong><br><img src="http://upload-images.jianshu.io/upload_images/1062695-ad53cdaed977c920.gif?imageMogr2/auto-orient/strip" alt="时间选择器效果.gif"></p><p>&#160;&#160;&#160;&#160;点击上下小三角可以变换时间，点击获取时间的按钮可以弹出提示框显示选择的时间，并且在控制台中打印出来。其实这些写起来并不是很难，在写指令的时候可能对大多数前端的小伙伴来说都不算难事，不过说实话，一年前左右刚接触angular的时候，其实已经在慕课网上看过大漠清秋讲的angular课程，当时初接触前端，看了他讲的指令，其实也没看懂。昨晚回去又看了一遍他讲的课，发现理解了一点了，正好昨天在写指令的时候遇到一些小问题，今天早上也是迎刃而解了。</p><p>&#160;&#160;&#160;&#160;下面我就不废话了，直接写代码了，我把这个指令单独写成一个demo了。所以大家要是想使用的话，只需要下载之后复制粘贴就ok了。</p><h3 id="第一步：编写html"><a href="#第一步：编写html" class="headerlink" title="第一步：编写html"></a>第一步：编写html</h3><p>&#160;&#160;&#160;&#160;先编写出html来，把基本的页面编写出来：</p><h5 id="html"><a href="#html" class="headerlink" title="html"></a>html</h5><pre><code>&lt;div class=&quot;co-timepicker-box&quot; style=&quot;margin-left: 15px&quot;&gt;    &lt;input type=&quot;text&quot; class=&quot;fl wi-timepicker-timeinput&quot; ng-model=&quot;hour&quot; maxlength=&quot;2&quot;&gt;       &lt;div class=&quot;fl wi-timepicker-change-box&quot;&gt;        &lt;div class=&quot;wi-timepicker-change-time arrow-up&quot; ng-click=&quot;timeUp(1)&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;wi-timepicker-change-time arrow-down&quot; ng-click=&quot;timeDown(1)&quot;&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;fl wi-timepicker-maohao&quot;&gt;          :    &lt;/div&gt;    &lt;input type=&quot;text&quot; class=&quot;fl wi-timepicker-timeinput&quot; ng-model=&quot;minute&quot; maxlength=&quot;2&quot;&gt;    &lt;div class=&quot;fl wi-timepicker-change-box&quot;&gt;        &lt;div class=&quot;wi-timepicker-change-time arrow-up&quot; ng-click=&quot;timeUp(2)&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;wi-timepicker-change-time arrow-down&quot; ng-click=&quot;timeDown(2)&quot;&gt;&lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;</code></pre><h3 id="第二步：编写css"><a href="#第二步：编写css" class="headerlink" title="第二步：编写css"></a>第二步：编写css</h3><h5 id="css"><a href="#css" class="headerlink" title="css"></a>css</h5><pre><code>/* timepicker start */.co-timepicker-box {    float: left;    width: 110px;    height: 32px;    border: 1px solid #cccccc;}.fl{    float: left;}.wi-timepicker-timeinput{    width: 35px;    height: 30px;    padding: 0;    font-size: 20px;    text-align: center;    line-height: 30px;    border:0;    outline: none;}.wi-timepicker-change-box{       width: 15px;    height: 30px;    border:0;}.wi-timepicker-change-time{    width: 15px;    height: 15px;    border: 0;}.wi-timepicker-maohao{    width: 7px;    height: 30px;    font-size: 16px;    text-align: center;    line-height: 30px;}.arrow-up{    background: url(&quot;../img/time-up.png&quot;)no-repeat center center;    background-size: 14px 6px;}.arrow-down{    background: url(&quot;../img/time-down.png&quot;)no-repeat center center;    background-size: 14px 6px;}/* timepicker end */</code></pre><h3 id="第三步：编写js"><a href="#第三步：编写js" class="headerlink" title="第三步：编写js"></a>第三步：编写js</h3><p>&#160;&#160;&#160;&#160;页面基本完成。之后就是js编写，js中主要需要注意的是，小时和分钟在个位数的时候前面需要加上0，在小时0往下是23，分钟往下是59，这个需要单独的一个方法。然后就是给小时分钟赋初始值。然后就是点击方法。</p><h5 id="js"><a href="#js" class="headerlink" title="js"></a>js</h5><pre><code>//转换格式的方法$scope.PrefixInteger = function (num, n) {    return (Array(n).join(0) + num).slice(-n);};//时间选择器的处理if(!$scope.hour){    $scope.hour = 12;}if(!$scope.minute){    $scope.minute = &apos;00&apos;;}var reg=/^\d+$/;$scope.timeUp = function (type) {    if(type == 1){        if(reg.test($scope.hour)){            if(parseInt($scope.hour) &gt;=0 &amp;&amp; parseInt($scope.hour) &lt;= 23){                if($scope.hour == 23){                    $scope.hour = -1;                }                $scope.hour = parseInt($scope.hour) + 1;            }else {                $scope.hour = 12;            }        }else {            $scope.hour = 12;        }         $scope.hour = $scope.PrefixInteger($scope.hour,2);    }else if(type == 2){        if(angular.isNumber($scope.minute) || reg.test($scope.minute)){            if(parseInt($scope.minute) &gt;=0 &amp;&amp; parseInt($scope.minute) &lt;=59){                if($scope.minute == 59){                    $scope.minute = -1;                }                $scope.minute = parseInt($scope.minute) + 1;             }else {                 $scope.minute = 0;             }         }else {             $scope.minute = 0;         }         $scope.minute = $scope.PrefixInteger($scope.minute,2);         }    };    $scope.timeDown = function (type) {        if(type == 1){            if(angular.isNumber($scope.hour) || reg.test($scope.hour)){                if(parseInt($scope.hour) &gt;=0 &amp;&amp; parseInt($scope.hour) &lt;=24){                    if($scope.hour == 0){                           $scope.hour = 24;                    }                    $scope.hour = parseInt($scope.hour) - 1;            }else {                 $scope.hour = 12;            }        }else {            $scope.hour = 12;        }         $scope.hour = $scope.PrefixInteger($scope.hour,2)        }else  if(type == 2){              if(angular.isNumber($scope.minute) || reg.test($scope.minute)){                if(parseInt($scope.minute) &gt;=0 &amp;&amp; parseInt($scope.minute) &lt;=60){                    if($scope.minute == 0){                           $scope.minute = 60;                    }                      $scope.minute = parseInt($scope.minute) - 1;                   }else {                       $scope.minute = 0;                   }               }else {                   $scope.minute = 0;               }                $scope.minute = $scope.PrefixInteger($scope.minute,2);           }        };</code></pre><p>&#160;&#160;&#160;&#160;以上就是完成了基本的编写，下面就是要写指令了，需要把上面的东西都添加到指令中。</p><h3 id="第四步：编写指令"><a href="#第四步：编写指令" class="headerlink" title="第四步：编写指令"></a>第四步：编写指令</h3><h5 id="directive"><a href="#directive" class="headerlink" title="directive"></a>directive</h5><pre><code>  var app = angular.module(&apos;myApp&apos;, []);  app.directive(&quot;coTimepicker&quot;, function() {return {    restrict:&apos;AE&apos;,    scope:{        hour:&apos;=&apos;,        minute:&apos;=&apos;    },    template:&apos;&lt;div class=&quot;co-timepicker-box&quot; style=&quot;margin-left: 15px&quot;&gt;&apos;+    &apos;&lt;input type=&quot;text&quot; class=&quot;fl wi-timepicker-timeinput&quot; ng-model=&quot;hour&quot; maxlength=&quot;2&quot;&gt;&apos; +    &apos;&lt;div class=&quot;fl wi-timepicker-change-box&quot;&gt;&apos; +    &apos;&lt;div class=&quot;wi-timepicker-change-time arrow-up&quot; ng-click=&quot;timeUp(1)&quot;&gt;&lt;/div&gt;&apos; +    &apos;&lt;div class=&quot;wi-timepicker-change-time arrow-down&quot; ng-click=&quot;timeDown(1)&quot;&gt;&lt;/div&gt;&apos; +    &apos;&lt;/div&gt;&apos; +    &apos;&lt;div class=&quot;fl wi-timepicker-maohao&quot;&gt;&apos; +    &apos;:&apos; +    &apos;&lt;/div&gt;&apos; +    &apos;&lt;input type=&quot;text&quot; class=&quot;fl wi-timepicker-timeinput&quot; ng-model=&quot;minute&quot; maxlength=&quot;2&quot;&gt;&apos; +    &apos;&lt;div class=&quot;fl wi-timepicker-change-box&quot;&gt;&apos; +    &apos;&lt;div class=&quot;wi-timepicker-change-time arrow-up&quot; ng-click=&quot;timeUp(2)&quot;&gt;&lt;/div&gt;&apos; +    &apos;&lt;div class=&quot;wi-timepicker-change-time arrow-down&quot; ng-click=&quot;timeDown(2)&quot;&gt;&lt;/div&gt;&apos; +    &apos;&lt;/div&gt;&apos;+    &apos;&lt;/div&gt;&apos;,    link: function ($scope,element,attrs) {        $scope.PrefixInteger = function (num, n) {            return (Array(n).join(0) + num).slice(-n);        };        //--------------------------------------        if(!$scope.hour){            $scope.hour = 12;        }        if(!$scope.minute){            $scope.minute = &apos;00&apos;;        }        var reg=/^\d+$/;        $scope.timeUp = function (type) {            if(type == 1){                if(reg.test($scope.hour)){                    if(parseInt($scope.hour) &gt;=0 &amp;&amp; parseInt($scope.hour) &lt;= 23){                        if($scope.hour == 23){                            $scope.hour = -1;                        }                        $scope.hour = parseInt($scope.hour) + 1;                    }else {                        $scope.hour = 12;                    }                }else {                    $scope.hour = 12;                }                $scope.hour = $scope.PrefixInteger($scope.hour,2);            }else if(type == 2){                if(angular.isNumber($scope.minute) || reg.test($scope.minute)){                    if(parseInt($scope.minute) &gt;=0 &amp;&amp; parseInt($scope.minute) &lt;=59){                        if($scope.minute == 59){                            $scope.minute = -1;                        }                        $scope.minute = parseInt($scope.minute) + 1;                    }else {                        $scope.minute = 0;                    }                }else {                    $scope.minute = 0;                }                $scope.minute = $scope.PrefixInteger($scope.minute,2);            }        };        $scope.timeDown = function (type) {            if(type == 1){                if(angular.isNumber($scope.hour) || reg.test($scope.hour)){                    if(parseInt($scope.hour) &gt;=0 &amp;&amp; parseInt($scope.hour) &lt;=24){                        if($scope.hour == 0){                            $scope.hour = 24;                        }                        $scope.hour = parseInt($scope.hour) - 1;                    }else {                        $scope.hour = 12;                    }                }else {                    $scope.hour = 12;                }                $scope.hour = $scope.PrefixInteger($scope.hour,2)            }else  if(type == 2){                if(angular.isNumber($scope.minute) || reg.test($scope.minute)){                    if(parseInt($scope.minute) &gt;=0 &amp;&amp; parseInt($scope.minute) &lt;=60){                        if($scope.minute == 0){                            $scope.minute = 60;                        }                        $scope.minute = parseInt($scope.minute) - 1;                    }else {                        $scope.minute = 0;                    }                }else {                    $scope.minute = 0;                }                $scope.minute = $scope.PrefixInteger($scope.minute,2);            }        };    }}});</code></pre><h3 id="第五步：使用指令"><a href="#第五步：使用指令" class="headerlink" title="第五步：使用指令"></a>第五步：使用指令</h3><p>&#160;&#160;&#160;&#160;指令写完之后，需要使用的，所以在html上写上指令</p><pre><code>&lt;co-timepicker hour=&quot;hour&quot; minute=&quot;minute&quot;&gt;&lt;/co-timepicker&gt;</code></pre><p>在控制器中可以获取到小时和分钟。同时也是可以在html上写死。在控制器中可以只用使用<code>$scope.hour</code>和<code>$scope.minute</code>来获取小时和分钟。</p><p>&#160;&#160;&#160;&#160;其实这样就算是已经编写完成，可以直接使用了，昨天我没有搞清楚指令内作用域scope里面的一些用法，导致没法提取出小时和分钟，晚上研究了之后发现其实不算难，这里我也就不讲一些指令的基础了，毕竟我自己也没有搞太明白。很多时候，基础稍微看下之后，应该直接跟着实例去实践，实践之后才能知道一些光看基础不知道的东西。</p><p>&#160;&#160;&#160;&#160;感觉自己写东西还是有点乱，没有说的很清楚。不过大家在github上下载下来一看就能明白了，其实这个指令我个人觉得还有待改进，而且难度也不算高，算是比较简单的额指令了。当初也是没找到合适的第三方才自己写了一个。之后还是会继续学习封装控件做成指令。分享出来给大家看看，指导指导。希望大家看到有问题的直接评论或者私信我给我指正。谢谢</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>web学习笔记09-ESLint规则整理与实际应用</title>
      <link href="/2016/12/01/web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B009-ESLint%E8%A7%84%E5%88%99%E6%95%B4%E7%90%86%E4%B8%8E%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/"/>
      <url>/2016/12/01/web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B009-ESLint%E8%A7%84%E5%88%99%E6%95%B4%E7%90%86%E4%B8%8E%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><strong>这篇是基于之前整理的一篇关于ESLint入门之后，在深入了解了相关内容的基础上又整理出来的一篇，百分之四十与之前差不多，只是多了部分常用的规则。</strong></p><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><h4 id="1-1本地安装-运用到此项目"><a href="#1-1本地安装-运用到此项目" class="headerlink" title="1.1本地安装(运用到此项目)"></a>1.1本地安装(运用到此项目)</h4><pre><code>$ npm install eslint --save-dev</code></pre><h4 id="1-2全局安装（运用到所有项目）"><a href="#1-2全局安装（运用到所有项目）" class="headerlink" title="1.2全局安装（运用到所有项目）"></a>1.2全局安装（运用到所有项目）</h4><pre><code>$ npm install -g eslint</code></pre><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><h4 id="2-1使用-eslintrc-文件"><a href="#2-1使用-eslintrc-文件" class="headerlink" title="2.1使用 .eslintrc 文件"></a>2.1使用 .eslintrc 文件</h4><pre><code>$ eslint --init</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/1062695-85fe7179277c34a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="屏幕快照 2016-12-01 上午9.47.53.png"></p><h4 id="2-2在-package-json-中添加-eslintConfig配置块"><a href="#2-2在-package-json-中添加-eslintConfig配置块" class="headerlink" title="2.2在 package.json 中添加 eslintConfig配置块"></a>2.2在 package.json 中添加 eslintConfig配置块</h4><p><img src="http://upload-images.jianshu.io/upload_images/1062695-97044746bf1b309a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="图片.png"></p><h4 id="2-3直接在代码文件中定义"><a href="#2-3直接在代码文件中定义" class="headerlink" title="2.3直接在代码文件中定义"></a>2.3直接在代码文件中定义</h4><h5 id="2-3-1-禁用-ESLint："><a href="#2-3-1-禁用-ESLint：" class="headerlink" title="2.3.1 禁用 ESLint："></a>2.3.1 禁用 ESLint：</h5><pre><code>/* eslint-disable */var a = 100;console.log(a);  /* eslint-enable */</code></pre><h5 id="2-3-2-禁用一条规则："><a href="#2-3-2-禁用一条规则：" class="headerlink" title="2.3.2 禁用一条规则："></a>2.3.2 禁用一条规则：</h5><pre><code>/*eslint-disable no-console */var a = 100;console.log(a);/*eslint-enable no-console */</code></pre><h5 id="2-3-3-调整规则："><a href="#2-3-3-调整规则：" class="headerlink" title="2.3.3 调整规则："></a>2.3.3 调整规则：</h5><pre><code>/* eslint no-console:0 */var a = 100;console.log(a);</code></pre><h3 id="3-错误级别"><a href="#3-错误级别" class="headerlink" title="3.错误级别"></a>3.错误级别</h3><ul><li>“off” or 0 - 关闭(禁用)规则</li><li>“warn” or 1 - 将规则视为一个警告（并不会导致检查不通过）</li><li>“error” or 2 - 将规则视为一个错误 (退出码为1，检查不通过)</li><li>有些规则还带有可选的参数。</li></ul><h3 id="4-常用规则"><a href="#4-常用规则" class="headerlink" title="4.常用规则"></a>4.常用规则</h3><table><thead><tr><th>类别</th><th>描述</th></tr></thead><tbody><tr><td><font color="lightblue" size="4">Possible Errors</font></td><td><font color="lightblue" size="4">可能的错误或逻辑错误</font></td></tr><tr><td>no-cond-assign</td><td>禁止条件表达式中出现模棱两可的赋值操作符</td></tr><tr><td>no-console</td><td>禁用console</td></tr><tr><td>no-constant-condition</td><td>禁止在条件中使用常量表达式</td></tr><tr><td>no-debugger</td><td>禁用 debugger</td></tr><tr><td>no-dupe-args</td><td>禁止 function 定义中出现重名参数</td></tr><tr><td>no-dupe-keys</td><td>禁止对象字面量中出现重复的 key</td></tr><tr><td>no-duplicate-case</td><td>禁止出现重复的 case 标签</td></tr><tr><td>no-empty</td><td>禁止出现空语句块</td></tr><tr><td>no-ex-assign</td><td>禁止对 catch 子句的参数重新赋值</td></tr><tr><td>no-extra-boolean-cast</td><td>禁止不必要的布尔转换</td></tr><tr><td>no-extra-parens</td><td>禁止不必要的括号</td></tr><tr><td>no-extra-semi</td><td>禁止不必要的分号</td></tr><tr><td>no-func-assign</td><td>禁止对 function 声明重新赋值</td></tr><tr><td>no-inner-declarations</td><td>禁止在嵌套的块中出现变量声明或 function 声明</td></tr><tr><td>no-irregular-whitespace</td><td>禁止在字符串和注释之外不规则的空白</td></tr><tr><td>no-obj-calls</td><td>禁止把全局对象作为函数调用</td></tr><tr><td>no-sparse-arrays</td><td>禁用稀疏数组</td></tr><tr><td>no-prototype-builtins</td><td>禁止直接使用Object.prototypes 的内置属性</td></tr><tr><td>no-unexpected-multiline</td><td>禁止出现令人困惑的多行表达式</td></tr><tr><td>no-unreachable</td><td>禁止在return、throw、continue 和 break语句之后出现不可达代码</td></tr><tr><td>use-isnan</td><td>要求使用 isNaN() 检查 NaN</td></tr><tr><td>valid-typeof</td><td>强制 typeof 表达式与有效的字符串进行比较</td></tr><tr><td>—–</td><td>—–</td></tr><tr><td><font color="lightblue" size="4">Best Practices</font></td><td><font color="lightblue" size="4">最佳实践</font></td></tr><tr><td>array-callback-return</td><td>强制数组方法的回调函数中有 return 语句</td></tr><tr><td>block-scoped-var</td><td>强制把变量的使用限制在其定义的作用域范围内</td></tr><tr><td>complexity</td><td>指定程序中允许的最大环路复杂度</td></tr><tr><td>consistent-return</td><td>要求 return 语句要么总是指定返回的值，要么不指定</td></tr><tr><td>curly</td><td>强制所有控制语句使用一致的括号风格</td></tr><tr><td>default-case</td><td>要求 switch 语句中有 default 分支</td></tr><tr><td>dot-location</td><td>强制在点号之前和之后一致的换行</td></tr><tr><td>dot-notation</td><td>强制在任何允许的时候使用点号</td></tr><tr><td>eqeqeq</td><td>要求使用 === 和 !==</td></tr><tr><td>guard-for-in</td><td>要求 for-in 循环中有一个 if 语句</td></tr><tr><td>no-alert</td><td>禁用 alert、confirm 和 prompt</td></tr><tr><td>no-case-declarations</td><td>不允许在 case 子句中使用词法声明</td></tr><tr><td>no-else-return</td><td>禁止 if 语句中有 return 之后有 else</td></tr><tr><td>no-empty-function</td><td>禁止出现空函数</td><td></td></tr><tr><td>no-eq-null</td><td>禁止在没有类型检查操作符的情况下与 null 进行比较</td></tr><tr><td>no-eval</td><td>禁用 eval()</td></tr><tr><td>no-extra-bind</td><td>禁止不必要的 .bind() 调用</td></tr><tr><td>no-fallthrough</td><td>禁止 case 语句落空</td></tr><tr><td>no-floating-decimal</td><td>禁止数字字面量中使用前导和末尾小数点</td></tr><tr><td>no-implicit-coercion</td><td>禁止使用短符号进行类型转换</td></tr><tr><td>no-implicit-globals</td><td>禁止在全局范围内使用 var 和命名的 function 声明</td></tr><tr><td>no-invalid-this:</td><td>禁止 this 关键字出现在类和类对象之外</td></tr><tr><td>no-lone-blocks</td><td>禁用不必要的嵌套块</td></tr><tr><td>no-loop-func</td><td>禁止在循环中出现 function 声明和表达式</td></tr><tr><td>no-magic-numbers</td><td>禁用魔术数字</td></tr><tr><td>no-multi-spaces</td><td>禁止使用多个空格</td></tr><tr><td>no-multi-str</td><td>禁止使用多行字符串</td></tr><tr><td>no-new</td><td>禁止在非赋值或条件语句中使用 new 操作符</td></tr><tr><td>no-new-func</td><td>禁止对 Function 对象使用 new 操作符</td></tr><tr><td>no-new-wrappers</td><td>禁止对 String，Number 和 Boolean 使用 new 操作符</td></tr><tr><td>no-param-reassign</td><td>不允许对 function 的参数进行重新赋值</td></tr><tr><td>no-redeclare</td><td>禁止使用 var 多次声明同一变量</td></tr><tr><td>no-return-assign</td><td>禁止在 return 语句中使用赋值语句</td></tr><tr><td>no-script-url</td><td>禁止使用 javascript: url</td></tr><tr><td>no-self-assign</td><td>禁止自我赋值</td></tr><tr><td>no-self-compare</td><td>禁止自身比较</td></tr><tr><td>no-sequences</td><td>禁用逗号操作符</td></tr><tr><td>no-unmodified-loop-condition</td><td>禁用一成不变的循环条件</td></tr><tr><td>no-unused-expressions</td><td>禁止出现未使用过的表达式</td></tr><tr><td>no-useless-call</td><td>禁止不必要的 .call() 和 .apply()</td></tr><tr><td>no-useless-concat</td><td>禁止不必要的字符串字面量或模板字面量的连接</td></tr><tr><td>vars-on-top</td><td>要求所有的 var 声明出现在它们所在的作用域顶部</td></tr><tr><td>—–</td><td>—–</td></tr><tr><td><font color="lightblue" size="4">Strict Mode</font></td><td><font color="lightblue" size="4">使用严格模式和严格模式指</font></td></tr><tr><td>strict</td><td>要求或禁止使用严格模式指令</td></tr><tr><td>—–</td><td>—–</td></tr><tr><td><font color="lightblue" size="4">Variables</font></td><td><font color="lightblue" size="4">变量声明</font></td></tr><tr><td>init-declarations</td><td>要求或禁止 var 声明中的初始化</td></tr><tr><td>no-catch-shadow</td><td>不允许 catch 子句的参数与外层作用域中的变量同名</td></tr><tr><td>no-restricted-globals</td><td>禁用特定的全局变量</td></tr><tr><td>no-shadow</td><td>禁止 var 声明 与外层作用域的变量同名</td></tr><tr><td>no-undef</td><td>禁用未声明的变量，除非它们在 /global / 注释中被提到</td></tr><tr><td>no-undef-init</td><td>禁止将变量初始化为 undefined</td></tr><tr><td>no-unused-vars</td><td>禁止出现未使用过的变量</td></tr><tr><td>no-use-before-define</td><td>不允许在变量定义之前使用它们</td></tr><tr><td>—–</td><td>—–</td></tr><tr><td><font color="lightblue" size="4">Nodejs and CommonJS</font></td><td><font color="lightblue" size="4">Node.js,CommonJS</font></td></tr><tr><td>global-require</td><td>要求 require() 出现在顶层模块作用域中</td></tr><tr><td>handle-callback-err</td><td>要求回调函数中有容错处理</td></tr><tr><td>no-mixed-requires</td><td>禁止混合常规 var 声明和 require 调用</td></tr><tr><td>no-new-require</td><td>禁止调用 require 时使用 new 操作符</td></tr><tr><td>no-path-concat</td><td>禁止对 dirname 和 filename进行字符串连接</td></tr><tr><td>no-restricted-modules</td><td>禁用指定的通过 require 加载的模块</td></tr><tr><td>—–</td><td>—–</td></tr><tr><td><font color="lightblue" size="4">Stylistic Issues</font></td><td><font color="lightblue" size="4">风格指南</font></td></tr><tr><td>array-bracket-spacing</td><td>强制数组方括号中使用一致的空格</td></tr><tr><td>block-spacing</td><td>强制在单行代码块中使用一致的空格</td></tr><tr><td>brace-style</td><td>强制在代码块中使用一致的大括号风格</td></tr><tr><td>camelcase</td><td>强制使用骆驼拼写法命名约定</td></tr><tr><td>comma-spacing</td><td>强制在逗号前后使用一致的空格</td></tr><tr><td>comma-style</td><td>强制使用一致的逗号风格</td></tr><tr><td>computed-property-spacing</td><td>强制在计算的属性的方括号中使用一致的空格</td></tr><tr><td>eol-last</td><td>强制文件末尾至少保留一行空行</td></tr><tr><td>func-names</td><td>强制使用命名的 function 表达式</td></tr><tr><td>func-style</td><td>强制一致地使用函数声明或函数表达式</td></tr><tr><td>indent</td><td>强制使用一致的缩进</td></tr><tr><td>jsx-quotes</td><td>强制在 JSX 属性中一致地使用双引号或单引号</td></tr><tr><td>key-spacing</td><td>强制在对象字面量的属性中键和值之间使用一致的间距</td></tr><tr><td>keyword-spacing</td><td>强制在关键字前后使用一致的空格</td></tr><tr><td>linebreak-style</td><td>强制使用一致的换行风格</td></tr><tr><td>lines-around-comment</td><td>要求在注释周围有空行</td></tr><tr><td>max-depth</td><td>强制可嵌套的块的最大深度</td></tr><tr><td>max-len</td><td>强制一行的最大长度</td></tr><tr><td>max-lines</td><td>强制最大行数</td></tr><tr><td>max-nested-callbacks</td><td>强制回调函数最大嵌套深度</td></tr><tr><td>max-params</td><td>强制 function 定义中最多允许的参数数量</td></tr><tr><td>max-statements</td><td>强制 function 块最多允许的的语句数量</td></tr><tr><td>max-statements-per-line</td><td>强制每一行中所允许的最大语句数量</td></tr><tr><td>new-cap</td><td>要求构造函数首字母大写</td></tr><tr><td>new-parens</td><td>要求调用无参构造函数时有圆括号</td></tr><tr><td>newline-after-var</td><td>要求或禁止 var 声明语句后有一行空行</td></tr><tr><td>newline-before-return</td><td>要求 return 语句之前有一空行</td></tr><tr><td>newline-per-chained-call</td><td>要求方法链中每个调用都有一个换行符</td></tr><tr><td>no-array-constructor</td><td>禁止使用 Array 构造函数</td></tr><tr><td>no-continue</td><td>禁用 continue 语句</td></tr><tr><td>no-inline-comments</td><td>禁止在代码行后使用内联注释</td></tr><tr><td>no-lonely-if</td><td>禁止 if 作为唯一的语句出现在 else 语句中</td></tr><tr><td>no-mixed-spaces-and-tabs</td><td>不允许空格和 tab 混合缩进</td></tr><tr><td>no-multiple-empty-lines</td><td>不允许多个空行</td></tr><tr><td>no-negated-condition</td><td>不允许否定的表达式</td></tr><tr><td>no-plusplus</td><td>禁止使用一元操作符 ++ 和 –</td></tr><tr><td>no-spaced-func</td><td>禁止 function 标识符和括号之间出现空格</td></tr><tr><td>no-ternary</td><td>不允许使用三元操作符</td></tr><tr><td>no-trailing-spaces</td><td>禁用行尾空格</td></tr><tr><td>no-whitespace-before-property</td><td>禁止属性前有空白</td></tr><tr><td>object-curly-newline</td><td>强制花括号内换行符的一致性</td></tr><tr><td>object-curly-spacing</td><td>强制在花括号中使用一致的空格</td></tr><tr><td>object-property-newline</td><td>强制将对象的属性放在不同的行上</td></tr><tr><td>one-var</td><td>强制函数中的变量要么一起声明要么分开声明</td></tr><tr><td>one-var-declaration-per-line</td><td>要求或禁止在 var 声明周围换行</td></tr><tr><td>operator-assignment</td><td>要求或禁止在可能的情况下要求使用简化的赋值操作符</td></tr><tr><td>operator-linebreak</td><td>强制操作符使用一致的换行符</td></tr><tr><td>quote-props</td><td>要求对象字面量属性名称用引号括起来</td></tr><tr><td>quotes</td><td>强制使用一致的反勾号、双引号或单引号</td></tr><tr><td>require-jsdoc</td><td>要求使用 JSDoc 注释</td></tr><tr><td>semi</td><td>要求或禁止使用分号而不是 ASI</td></tr><tr><td>semi-spacing</td><td>强制分号之前和之后使用一致的空格</td></tr><tr><td>sort-vars</td><td>要求同一个声明块中的变量按顺序排列</td></tr><tr><td>space-before-blocks</td><td>强制在块之前使用一致的空格</td></tr><tr><td>space-before-function-paren</td><td>强制在 function的左括号之前使用一致的空格</td></tr><tr><td>space-in-parens</td><td>强制在圆括号内使用一致的空格</td></tr><tr><td>space-infix-ops</td><td>要求操作符周围有空格</td></tr><tr><td>space-unary-ops</td><td>强制在一元操作符前后使用一致的空格</td></tr><tr><td>spaced-comment</td><td>强制在注释中 // 或 /* 使用一致的空格</td></tr></tbody></table><h3 id="5-实际项目中使用（Gulp中使用）"><a href="#5-实际项目中使用（Gulp中使用）" class="headerlink" title="5.实际项目中使用（Gulp中使用）"></a>5.实际项目中使用（Gulp中使用）</h3><h4 id="5-1-安装插件"><a href="#5-1-安装插件" class="headerlink" title="5.1 安装插件"></a>5.1 安装插件</h4><pre><code>$ npm install gulp-eslint</code></pre><h4 id="5-2-应用"><a href="#5-2-应用" class="headerlink" title="5.2 应用"></a>5.2 应用</h4><pre><code>var gulp = require(&apos;gulp&apos;);var eslint = require(&apos;gulp-eslint&apos;);gulp.task(&apos;lint&apos;,function(){    return gulp.src([&apos;app/**/*.js&apos;]) //指定的校验路径        .pipe(eslint({configFle:&quot;./.eslintrc&quot;})) //使用你的eslint校验文件        .pipe(eslint.format())});</code></pre><p>输入命令行</p><pre><code>$ gulp lint</code></pre><p>就可以直接运行了相应的配置文件来校验文件了。</p><h4 id="5-3-忽视"><a href="#5-3-忽视" class="headerlink" title="5.3 忽视"></a>5.3 忽视</h4><p>&#160;&#160;&#160;&#160;你可以通过在项目根目录创建一个 .eslintignore 文件告诉 ESLint 去忽略特定的文件和目录。.eslintignore 文件是一个纯文本文件，其中的每一行都是一个 glob 模式表明哪些路径应该忽略检测。例如，以下将忽略所有的 JavaScript 文件：</p><pre><code>**/*.js</code></pre><p>&#160;&#160;&#160;&#160;当 ESLint 运行时，在确定哪些文件要检测之前，它会在当前工作目录中查找一个 .eslintignore 文件。如果发现了这个文件，当遍历目录时，将会应用这些偏好设置。一次只有一个 .eslintignore 文件会被使用，所以，不是当前工作目录下的 .eslintignore 文件将不会被用到。</p><p>&#160;&#160;&#160;&#160;Globs 匹配使用 node-ignore，所以大量可用的特性有：</p><ul><li>以 # 开头的行被当作注释，不影响忽略模式。</li><li>路径是相对于 .eslintignore 的位置或当前工作目录。这也会影响通过 –ignore-pattern传递的路径。</li><li>忽略模式同 .gitignore 规范</li><li>以 ! 开头的行是否定模式，它将会重新包含一个之前被忽略的模式。</li></ul><p>&#160;&#160;&#160;&#160;除了 .eslintignore 文件中的模式，ESLint总是忽略 /node_modules/<em> 和 /bower_components/</em> 中的文件。</p><p>&#160;&#160;&#160;&#160;例如：把下面 .eslintignore 文件放到当前工作目录里，将忽略 node_modules，bower_components 和所有以 .ts.js 或者 .coffee.js 为扩展名的文件以及 build/ 目录下除了 build/index.js 的所有文件。</p><pre><code># /node_modules/* and /bower_components/* ignored by default# Ignore built files except build/index.jsbuild/*!build/index.js</code></pre><p>&#160;&#160;&#160;&#160;如果相比于当前工作目录下 .eslintignore 文件，你更想使用一个不同的文件，你可以在命令行使用 –ignore-path 选项指定它。例如，你可以使用 .jshintignore 文件，因为它有相同的格式：</p><pre><code>eslint --ignore-path .jshintignore file.js</code></pre><p>&#160;&#160;&#160;&#160;你也可以使用你的 .gitignore 文件：</p><pre><code>eslint --ignore-path .gitignore file.js</code></pre><p>&#160;&#160;&#160;&#160;任何文件只要满足标准忽略文件格式都可以用。记住，指定 –ignore-path 意味着任何现有的 .eslintignore 文件将不被使用。请注意，.eslintignore 中的匹配规则比 .gitignore 中的更严格。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>码农的厨子之路</title>
      <link href="/2016/11/21/%E7%A0%81%E5%86%9C%E7%9A%84%E5%8E%A8%E5%AD%90%E4%B9%8B%E8%B7%AF/"/>
      <url>/2016/11/21/%E7%A0%81%E5%86%9C%E7%9A%84%E5%8E%A8%E5%AD%90%E4%B9%8B%E8%B7%AF/</url>
      <content type="html"><![CDATA[<h3 id="前言：没有哦"><a href="#前言：没有哦" class="headerlink" title="前言：没有哦"></a>前言：没有哦</h3><p>&#160;&#160;&#160;&#160;毕业已经有一年半，五百多天，来南京也一年多了，懵懵懂懂的进入了IT行业，从此娱乐是路人啊。兜兜转转换了三个地方住，找房子的时候就特地让中介找个有厨房的屋子，毕竟想着每天带饭来着，不过，我还是太年轻啊。程序员还想着自己做午饭晚饭？？</p><p>&#160;&#160;&#160;&#160;更新这篇文章呢，主要是因为最近技术方面没有什么突破，写一个h5的游戏写了三周了，对于js都用不利索的我，实在是有点困难，没什么突破，也没什么技术分享，明天是deadline了，已经有点死猪不怕开水烫的感觉了，那就偷偷懒，那就分享分享我这小半年的厨子生活吧。</p><p>&#160;&#160;&#160;&#160;做程序员也一年了，编代码的能力是一点长进都没有，整天都在搞些乱七八糟的东西，每天都在思考，到底做啥才是我擅长的嘞。</p><p>&#160;&#160;&#160;&#160;为了在这枯燥无味的生活寻找一点乐趣，不爱出门的我。。。依旧不爱出门，思前想后，觉得还是周末自己做做菜能打发掉周末时间，于是我从一条不归路走上了另外一条不归路。</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-19689eabda540628.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="炫酷电饭煲"></p><p>&#160;&#160;&#160;&#160;劳动节那会，女朋友给买了个电饭煲，让我算是正式开始了我的出厨子之路。然后，缺乏创意的我第二天立马出了我第一顿饭，注意：是饭，配菜是。。。你们还是自己看吧<strong>PS：大家要是不喜欢我的做的，可以先撤离这块地区，毕竟新手，做出来的东西多少有些粗糙呢。当然要是有大神，可以对我指导指导！</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-731f11af8b6ad7c5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="孤独的白米饭"></p><p>&#160;&#160;&#160;&#160;当然，这心酸是心酸了点，不过毕竟只是个开头嘛，自从学会做菜之后啊，我每天都会意淫着，要不直接不敲代码了，直接去弄个小摊，在学校边上做菜吧，凭我的技艺，不用多久，我就会在我的小摊上升职加薪，当上总经理，出任CEO，迎娶白富美，走上人生巅峰。想想还有点小激动呢，嘿嘿。</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-8bbc74745e5903f5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="B36CF13B1E7A064C32072288A255A66C.jpg"></p><p>&#160;&#160;&#160;&#160;下面就是要多图预警咯。我来南京正式做的第一顿，糙是糙了点，丑了丑了点，不过这些都是为我的厨子之路进行奠基的重要基石哦！</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-7645318a8c5fd816.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="青椒土豆丝"></p><p>&#160;&#160;&#160;&#160;可别小看这盘青椒土豆丝啊，这可不是一般的青椒土豆丝，低调的外表下藏着一颗金色的心，入口香软苏滑，入口即化，光想想都是十分的可口呢，当然，可能是我烧太久水放多了。。。。有那么一捏捏的小尴尬，不过不要紧，之后的路还是十分敞亮的。</p><p>&#160;&#160;&#160;&#160;接下来的菜是我在材料短缺的情况下做的赛螃蟹，好像是叫这个名字，用鸡蛋烧出蟹肉的味道，我还是第一次做，真真的被震撼到了，感觉到了咱中国人的饮食文化博大精深啊！！</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-99880d16abd2cc96.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="赛螃蟹"></p><p>&#160;&#160;&#160;&#160;按照网上的教程一步步做的可乐鸡翅，牛奶麦片，拼拼凑凑的出来一顿晚饭。。<br><img src="http://upload-images.jianshu.io/upload_images/1062695-e087a564707fd5d9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="鸡翅"></p><p>&#160;&#160;&#160;&#160;然后我又做了宫保鸡丁，配上西瓜，炎热的夏天，空调下吃这道菜，那感觉还是可以的。</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-d6b1298d40b8ec17.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="宫保鸡丁"></p><p>&#160;&#160;&#160;&#160;女朋友来我这玩，去超市买了两块牛排，做给她吃，结果她不咋吃肉，全被我干掉，她就光吃菜跟意面了。<br><img src="http://upload-images.jianshu.io/upload_images/1062695-d9224eb711b1b962.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="牛排"></p><p>&#160;&#160;&#160;&#160;麻婆豆腐加上虾。味道也还不错，饭后来两瓣哈密瓜，这一天都是心情舒畅。</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-63831fdb35c05359.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="麻婆豆腐加上虾"></p><p>&#160;&#160;&#160;&#160;蜜汁炸鸡排配上酱，来个西兰花炒鸡蛋，来一块黄油拌饭，一杯七喜打底。完美！</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-963330615f1bc97f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="炸鸡排"></p><p>&#160;&#160;&#160;&#160;没菜的时候，自己做做蛋皮，裹上京酱肉丝，勉强凑合凑合。<br><img src="http://upload-images.jianshu.io/upload_images/1062695-4ec1a695e06dd6a5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="京酱肉丝"></p><p>&#160;&#160;&#160;&#160;之后的一段时间，就懒了，做的菜也就没之前多了。周五来个健康餐。做个鸡胸肉配上蔬菜沙拉，煎上两个鸡蛋，撒上黑胡椒，加上芒果酸奶，也算是一顿饭了。</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-05d5ee126a3b42e0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="健康餐"></p><p>&#160;&#160;&#160;&#160;感觉发了不少图了，你们心里肯定在想：</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-0a41bde0fa20c68f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="---"></p><p>&#160;&#160;&#160;&#160;不过，不好意思，我还有！</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-b179a2bf59b9c427.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="=_="></p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-6f97129bf3dbed67.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="----"></p><p>&#160;&#160;&#160;&#160;纯手工的香菇肉丸奉上：</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-6afac194cdfa20e2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="香菇肉丸"></p><p>&#160;&#160;&#160;&#160;接下来是咖喱鸡，换了块亮堂的桌布，吃饭都香了呢。</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-2863d4003ad6c4cd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="咖喱鸡"></p><p>&#160;&#160;&#160;&#160;煮玉米南光饼，一顿晚饭也就这么过去了。</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-33d0629d0c7b6863.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="煮玉米南瓜饼"></p><p>&#160;&#160;&#160;&#160;秘制黄焖鸡米饭，跟外面吃的一样一样的。<br><img src="http://upload-images.jianshu.io/upload_images/1062695-76baf2330f92c141.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="黄焖鸡米饭"></p><p>&#160;&#160;&#160;&#160;完了得配上一杯热热的抹茶牛奶。一下子就可以睡着哦。</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-cda4dfcba2c53ebc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="抹茶牛奶"></p><p>&#160;&#160;&#160;&#160;蒜苗肉丝，韭菜鸡蛋，这样的生活神仙都可以不当了。当然，要是有神仙跟我换，我还是要换的。</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-49becdbfa37a3c73.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="蒜苗肉丝，韭菜鸡蛋"></p><p>&#160;&#160;&#160;&#160;这个是我上上周做的藕饼，做出来，有点丑，也不好吃，因为我自己活的面，活的面太多，肉太少，做了一盘子饼，皮比馅厚，皮倒是挺有滋味的，里面的肉淡了些。幸好有一盘凉拌莴苣和烤鸭能吃。不然这顿饭我肯定吃不下去。</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-4a366b21835fc4ab.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="藕饼"></p><p>&#160;&#160;&#160;&#160;上周因为太懒了，生无可恋，无意中发现肯德基麦当劳啥的满一百减五十，于是难得点了个桶。。。。。本来这张图我觉得可以参加那个程序员在简书的活动来着，但是吃的东西在面前，哪里管的上别的。我先吃，你们随意。。。</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-26d09d994fba9922.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="额，，，，"></p><p>&#160;&#160;&#160;&#160;以上就是我今年的厨子之路，感觉当厨子比当程序员天赋，做菜倒是学的还挺快的，代码能力就gg了。上面的这些图大部分菜都是第一次做，看着菜谱做出来的，有些菜谱app还是挺靠谱的。跟着做就能做出来东西。比写代码简单多了。</p><p>&#160;&#160;&#160;&#160;我做的菜呢，一般情况都是我负责拍，女朋友来修饰下，鉴于不会拍照的我，女朋友每次帮我p的时候都是一边吐槽一边p。每次都立志下次一定要好好拍，结果下次昨晚随手拍了两张之后，就直接开始吃了，女朋友让重拍的时候，我已经吃了一半了，是的，我的饭量和吃饭的速度有那么一捏捏的快。。。。。。</p><p>&#160;&#160;&#160;&#160;大家要是最做菜感兴趣，可以自己试着做做，其实不是很难得。大家要是有啥简单的菜式想吃的，我也正好可以学习下，每到周末想烧什么菜都是一件十分麻烦的事情。大家给建议我可以以后更新出来，给你们看看，毕竟你们也吃不到。哈哈哈。</p><p>&#160;&#160;&#160;&#160;希望下一篇文章还是赶紧有点干货吧，要不这样浑水摸鱼，感觉有点不符合简书的整天风格了。。。在简书一年不到，倒是还没看到有多少人像我这样分享做的菜呢。。。最后给大家奉上一副我的画作，让大家欣赏下吧。下回见哦！</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-b2e62206783793c6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="下回见"></p><h3 id="后话：也没有哦"><a href="#后话：也没有哦" class="headerlink" title="后话：也没有哦"></a>后话：也没有哦</h3>]]></content>
      
      
    </entry>
    
    <entry>
      <title>web学习笔记09-ionic开发app的几个小坑</title>
      <link href="/2016/11/02/web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B009-ionic%E5%BC%80%E5%8F%91app%E7%9A%84%E5%87%A0%E4%B8%AA%E5%B0%8F%E5%9D%91/"/>
      <url>/2016/11/02/web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B009-ionic%E5%BC%80%E5%8F%91app%E7%9A%84%E5%87%A0%E4%B8%AA%E5%B0%8F%E5%9D%91/</url>
      <content type="html"><![CDATA[<h2 id="1-ios设置https访问权限"><a href="#1-ios设置https访问权限" class="headerlink" title="1.ios设置https访问权限"></a>1.ios设置https访问权限</h2><h3 id="1-1-问题1"><a href="#1-1-问题1" class="headerlink" title="1.1 问题1"></a>1.1 问题1</h3><h4 id="1-1-1问题描述："><a href="#1-1-1问题描述：" class="headerlink" title="1.1.1问题描述："></a>1.1.1问题描述：</h4><p>&#160;&#160;&#160;&#160;ionic开发的app中打包iOS，运行之后窗口报错，网络错误。</p><pre><code>Application Transport Security has blocked a cleartext HTTP (http://) resource load since it is insecure. Temporary exceptions can be configured via your app&apos;s Info.plist file. </code></pre><h4 id="1-1-2-原因"><a href="#1-1-2-原因" class="headerlink" title="1.1.2 原因"></a>1.1.2 原因</h4><p>&#160;&#160;&#160;&#160;出错的原因在于iOS9之后在iOS中引入了新特性：<strong>App Transport Security (ATS)</strong>， 新特性要求App内访问的网络必须使用HTTPS协议。但是现在公司的项目使用的是HTTP协议，使用私有加密方式保证数据安全。现在也不能马上改成HTTPS协议传输。</p><h4 id="1-1-3解决办法"><a href="#1-1-3解决办法" class="headerlink" title="1.1.3解决办法"></a>1.1.3解决办法</h4><p>&#160;&#160;&#160;&#160;在iOS工程中的myApp-Info.plist文件中加入两个字段，第一个是字典Dictionary格式的字段<strong>NSAppTransportSecurity</strong>。<br>在<strong>NSAppTransportSecurity</strong>下添加布尔Boolean类型的<strong>NSAllowsArbitraryLoads</strong>，值设置为YES。</p><pre><code>    &lt;key&gt;NSAppTransportSecurity&lt;/key&gt;&lt;dict&gt;    &lt;key&gt;NSAllowsArbitraryLoads&lt;/key&gt;    &lt;value&gt;YES&lt;/value&gt;&lt;dict&gt;</code></pre><h3 id="1-2-问题2"><a href="#1-2-问题2" class="headerlink" title="1.2 问题2"></a>1.2 问题2</h3><h4 id="1-2-1问题描述："><a href="#1-2-1问题描述：" class="headerlink" title="1.2.1问题描述："></a>1.2.1问题描述：</h4><p>&#160;&#160;&#160;&#160;上述网络问题解决之后，还出现了一个问题</p><pre><code>ERROR Internal navigation rejected - &lt;allow-navigation&gt; not set for url=&apos;http://192.168.14.127:8080/TLF_PAY_SDK/app/gatewayTrans&apos;</code></pre><h4 id="1-2-2-问题原因"><a href="#1-2-2-问题原因" class="headerlink" title="1.2.2 问题原因"></a>1.2.2 问题原因</h4><p>&#160;&#160;&#160;&#160;这是因为没有设置白名单，iOS9+ 拒绝发送请求。</p><h4 id="1-2-3-解决办法"><a href="#1-2-3-解决办法" class="headerlink" title="1.2.3 解决办法"></a>1.2.3 解决办法</h4><p>&#160;&#160;&#160;&#160;只需要在myApp -&gt; config.xml中配置</p><pre><code>&lt;allow-navigation href=&quot;*&quot; /&gt; //即允许跳转到任意http协议的页面</code></pre><h2 id="2-标题把状态栏遮挡"><a href="#2-标题把状态栏遮挡" class="headerlink" title="2. 标题把状态栏遮挡"></a>2. 标题把状态栏遮挡</h2><h4 id="2-1-问题描述："><a href="#2-1-问题描述：" class="headerlink" title="2.1 问题描述："></a>2.1 问题描述：</h4><p>&#160;&#160;&#160;&#160;在iOS真机运行的时候，点击提交，页面跳转进入响应的页面，此时顶层状态栏的背景色为透明，与页面部分想重叠。</p><h4 id="2-2-问题原因"><a href="#2-2-问题原因" class="headerlink" title="2.2 问题原因"></a>2.2 问题原因</h4><p>&#160;&#160;&#160;&#160;缺少相应的配置项</p><h4 id="2-3-解决办法"><a href="#2-3-解决办法" class="headerlink" title="2.3 解决办法"></a>2.3 解决办法</h4><p>&#160;&#160;&#160;&#160;方法一：在每个页面顶层加入一个高为20px的div，样式设置top:0;left:0;position:fixed;这样在iOS上就可以留出20px的高度来放状态栏，而且在页面滚动的时候不会导致状态栏与页面重叠。但是存在一个问题，就是在安卓的部分机器上，页面会多出一块，导致无法完美解决。</p><p>&#160;&#160;&#160;&#160;方法二：在myApp-&gt;config.xml中添加配置项</p><pre><code>&lt;preference name=&quot;StatusBarOverlaysWebView&quot; value=&quot;false&quot;/&gt;</code></pre><p>这个方法能够完美解决此问题。</p><h2 id="3-按钮无法点击"><a href="#3-按钮无法点击" class="headerlink" title="3. 按钮无法点击"></a>3. 按钮无法点击</h2><h4 id="3-1-问题描述："><a href="#3-1-问题描述：" class="headerlink" title="3.1 问题描述："></a>3.1 问题描述：</h4><p>&#160;&#160;&#160;&#160;在主页面的提交按钮，点击之后没有反应。</p><h4 id="3-2-问题原因"><a href="#3-2-问题原因" class="headerlink" title="3.2 问题原因"></a>3.2 问题原因</h4><p>&#160;&#160;&#160;&#160;原因有两个：一个是按钮做的时候太小，不容易点击，第二个原因是在点击提交按钮触发的方法中，进行了一些基本的文本框内容的判断，最后没有返回值，所以出现了问题。</p><h4 id="3-3-解决办法"><a href="#3-3-解决办法" class="headerlink" title="3.3 解决办法"></a>3.3 解决办法</h4><p>&#160;&#160;&#160;&#160;一：将按钮的长宽加到原先的两倍；</p><p>&#160;&#160;&#160;&#160;二：在判断方法的最后加上<strong><code>return true</code></strong>；</p><h2 id="4-呼出键盘无法关闭。"><a href="#4-呼出键盘无法关闭。" class="headerlink" title="4. 呼出键盘无法关闭。"></a>4. 呼出键盘无法关闭。</h2><h4 id="4-1-问题描述："><a href="#4-1-问题描述：" class="headerlink" title="4.1 问题描述："></a>4.1 问题描述：</h4><p>&#160;&#160;&#160;&#160;在点击提交按钮之后进入付款页面，页面无法滑动，点击文本框，键盘弹出来，但是没有完成按钮，键盘无法关闭。</p><h4 id="4-2-问题原因"><a href="#4-2-问题原因" class="headerlink" title="4.2 问题原因"></a>4.2 问题原因</h4><p>&#160;&#160;&#160;&#160;原因主要是因为配置中将ionic的键盘设置给设置死了，所以会出现问题。</p><h4 id="4-3-解决办法"><a href="#4-3-解决办法" class="headerlink" title="4.3 解决办法"></a>4.3 解决办法</h4><p>&#160;&#160;&#160;&#160;一：<strong>页面不能滚动</strong>，在myApp-&gt;www-&gt;js-&gt;app.js 中修改配置项</p><pre><code>cordova.plugins.Keyboard.disableScroll(false);</code></pre><p>&#160;&#160;&#160;&#160;二：<strong>键盘不能收起</strong>，在myApp-&gt;www-&gt;js-&gt;app.js 中修改配置项</p><pre><code>cordova.plugins.Keyboard.hideKeyboardAccessoryBar(false);</code></pre>]]></content>
      
      
    </entry>
    
    <entry>
      <title>web学习笔记08-Ionic的前后端简单交互与打包</title>
      <link href="/2016/10/19/web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B008-Ionic%E7%9A%84%E5%89%8D%E5%90%8E%E7%AB%AF%E7%AE%80%E5%8D%95%E4%BA%A4%E4%BA%92%E4%B8%8E%E6%89%93%E5%8C%85/"/>
      <url>/2016/10/19/web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B008-Ionic%E7%9A%84%E5%89%8D%E5%90%8E%E7%AB%AF%E7%AE%80%E5%8D%95%E4%BA%A4%E4%BA%92%E4%B8%8E%E6%89%93%E5%8C%85/</url>
      <content type="html"><![CDATA[<p>&#160;&#160;&#160;&#160;<strong>前言：这篇文章同样是新手专用，对于一个像我一样的前端渣新来说，看看还可以，大神的话就算啦。里面涉及的点都不算太难，虽然我也有一堆东西没懂，但是跟着先敲起来，慢慢地就会理解了。这个之后还做了一个angular的前后端简单交互，道理都一样，只是pc端会出现跨域问题，需要配置一下nginx的反向代理之类的。本篇就不说这些了，因为做这个的时候没遇到这些问题，遇到的是一些网络权限的问题，在下面也都提了。</strong></p><h3 id="1-实现目标"><a href="#1-实现目标" class="headerlink" title="1.实现目标"></a>1.实现目标</h3><p>&#160;&#160;&#160;&#160;目标是搭建一个简单的前后端交互，应用ionic实现一个简单的表单，点击提交按钮，会发送一个请求，并且能在搭建的后端处查看到提交表单上的值。如图：<br><img src="http://upload-images.jianshu.io/upload_images/1062695-45789336c4fa5850.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/320" alt="示例图"></p><h3 id="2-页面搭建"><a href="#2-页面搭建" class="headerlink" title="2.页面搭建"></a>2.页面搭建</h3><h4 id="前提：已安装node-js，ionic，cordova。"><a href="#前提：已安装node-js，ionic，cordova。" class="headerlink" title="前提：已安装node.js，ionic，cordova。"></a>前提：已安装node.js，ionic，cordova。</h4><p>&#160;&#160;&#160;&#160;安装node.js可以去官网下载，下载完node.js之后可以使用集成包管理工具npm安装剩下的两样（全局安装）。</p><pre><code>$ npm install -g cordova ionic</code></pre><h4 id="2-1-创建ionic空模板项目"><a href="#2-1-创建ionic空模板项目" class="headerlink" title="2.1 创建ionic空模板项目"></a>2.1 创建ionic空模板项目</h4><p>&#160;&#160;&#160;&#160;在终端，进入搭建工程的目录</p><pre><code>$ cd /Users/apple/Desktop/</code></pre><p>&#160;&#160;&#160;&#160;下载ionic空模板</p><pre><code>$ ionic start ionicTest blank</code></pre><p>&#160;&#160;&#160;&#160;下载成功之后，进入工程。</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-7d5465c4daf93bc8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/320" alt="工程目录"></p><p>&#160;&#160;&#160;&#160;其中www是我们主要编写代码的文件夹。这时候我们在终端运行</p><pre><code>$ cd /Users/apple/Desktop/ionicTest/$ ionic serve</code></pre><p>&#160;&#160;&#160;&#160;会编译生成页面，在浏览器中显示如下图：</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-65a16e056de9897b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/320" alt="2.png"></p><p>这就是ionic的空模板，所以展示出来的是空页面。</p><h4 id="2-2-编写代码"><a href="#2-2-编写代码" class="headerlink" title="2.2 编写代码"></a>2.2 编写代码</h4><h5 id="1-编写页面html代码"><a href="#1-编写页面html代码" class="headerlink" title="1 编写页面html代码"></a>1 编写页面html代码</h5><p>&#160;&#160;&#160;&#160;进入/www/index.html。在body中的标签 <ion-content></ion-content>之间，写下如下页面代码。</p><pre><code>&lt;div&gt;    &lt;div class=&quot;row1&quot;&gt;    &lt;div class=&quot;inner_box&quot;&gt;        &lt;div class=&quot;title_msg&quot;&gt;版本号 :&lt;/div&gt;        &lt;input class=&quot;input_text&quot; type=&quot;text&quot; name=&quot;name&quot; id=&quot;name&quot; placeholder=&quot;请输入姓名&quot;&gt;    &lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;row1&quot;&gt;    &lt;div class=&quot;inner_box&quot;&gt;      &lt;div class=&quot;title_msg&quot;&gt;编码方式 :&lt;/div&gt;      &lt;input class=&quot;input_text&quot; type=&quot;text&quot; name=&quot;age&quot; id=&quot;age&quot; placeholder=&quot;请输入年龄&quot;&gt;    &lt;/div&gt;  &lt;/div&gt;    &lt;div class=&quot;row1&quot;&gt;    &lt;div class=&quot;button_box&quot;&gt;      &lt;input type=&quot;submit&quot; value=&quot;提交&quot; class=&quot;submit_btn&quot;&gt;    &lt;/div&gt; &lt;/div&gt; </code></pre><p>  </p><p>结果如图：</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-4404f91686327ac2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3.png"></p><h5 id="2-编写css样式"><a href="#2-编写css样式" class="headerlink" title="2 编写css样式"></a>2 编写css样式</h5><pre><code>&lt;style type=&quot;text/css&quot;&gt;    .inner_box{    width: 310px;    height: 40px;    margin: 0 auto;    background-color: lightblue;    border-radius: 5px;}.row1{    width: 98%;    height: 40px;    margin:0 auto;    margin-top: 5px;    padding: 0;  }  .title_msg{    float: left;    width: 100px;    margin-left: 5px;    height: 40px;    text-align: left;    font-size: 14px;    line-height: 40px;    color: #333;  }  .input_text{    padding: 0px !important;    float: left;    width: 200px;    height: 26px!important;    margin-top: 7px;    border: 1px solid #dddddd !important;    border-radius: 5px;    font-size: 14px;    line-height: 26px;  }  .button_box{    width: 200px;    height: 40px;    margin: 0 auto;  }  .submit_btn{    padding: 0px !important;    width: 150px;    height: 30px;    margin-top: 5px;    margin-left: 25px;    border: 1px solid lightblue !important;    border-radius: 5px;    background-color: lightblue;    color: #333333;  }&lt;/style&gt;</code></pre><p>&#160;&#160;&#160;&#160;<strong>这里提一嘴：</strong>css中用了不少<code>!important</code>的原因是因为ionic里面很多东西的样式都有初始设定，所以很多时候需要强制设定下。我写css也没几天，不知道这种方式算不算对，要是大家有好的解决办法，一定要告诉我。</p><p>结果如图：</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-c83b1061b1a7f183.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="4.png"></p><h5 id="3-添加form标签"><a href="#3-添加form标签" class="headerlink" title="3 添加form标签"></a>3 添加form标签</h5><pre><code>&lt;form action=&quot;http://192.168.1.100:3000/Info&quot; method=&quot;post&quot; onsubmit=&quot;return submitForm();&quot;&gt;&lt;/form&gt;</code></pre><p>&#160;&#160;&#160;&#160;其中submitForm()方法是点击提交按钮的时候先触发的方法。在这个方法中进行一些验证或者判断是否为空值。action之后接的是需要将表单上的内容发送到的地址。这里就用本机ip地址来吧。</p><h5 id="4-添加逻辑代码，如果输入框为空，就弹出提示框。"><a href="#4-添加逻辑代码，如果输入框为空，就弹出提示框。" class="headerlink" title="4 添加逻辑代码，如果输入框为空，就弹出提示框。"></a>4 添加逻辑代码，如果输入框为空，就弹出提示框。</h5><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;    function submitForm(){        var name = document.getElementById(&quot;name&quot;);        var age = document.getElementById(&quot;age&quot;);        if(name.value == null || name.value == &quot;&quot;){              alert(&quot;请输入姓名&quot;);              return false;        }        if(age.value == null || age.value == &quot;&quot;){              alert(&quot;请输入年龄&quot;);              return false;        }      }&lt;/script&gt;</code></pre><p>&#160;&#160;&#160;&#160;以上基本上就搭建好了界面，现在需要的是搭建一个后台服务，来接受发送的请求。</p><h3 id="3-服务搭建"><a href="#3-服务搭建" class="headerlink" title="3.服务搭建"></a>3.服务搭建</h3><p>&#160;&#160;&#160;&#160;在这里为了简便，我们所使用的是express来搭建，express是基于node.js平台，快速，开放，极简的web开发框架。</p><h5 id="1-创建server文件"><a href="#1-创建server文件" class="headerlink" title="1 创建server文件"></a>1 创建server文件</h5><p>&#160;&#160;&#160;&#160;进入工程目录的www文件夹下，创建server.js文件</p><h5 id="2-安装express组件"><a href="#2-安装express组件" class="headerlink" title="2 安装express组件"></a>2 安装express组件</h5><pre><code>$ npm install express --save</code></pre><p>&#160;&#160;&#160;&#160;此外还需要安装express的中间件bodyParser。因为不知名的原因，express里没有包括bodyParser。bodyParser用来解析表单提交的数据。</p><pre><code>$ npm install body-parser --save</code></pre><h5 id="3-编写代码（按照官网的教程写）"><a href="#3-编写代码（按照官网的教程写）" class="headerlink" title="3 编写代码（按照官网的教程写）"></a>3 编写代码（按照官网的教程写）</h5><pre><code>var express = require(&apos;express&apos;);var bodyParser = require(&apos;body-parser&apos;);//引入var app = express();//创建实例var router = express.Router();app.use(bodyParser.json());app.use(require(&apos;body-parser&apos;).urlencoded({extended: true}));//请求时开始使用的方法router.use(function(req, res, next) {      next();});//请求返回的方法router.post(&apos;/Info&apos;, function (req, res) {      res.send(&apos;Got a POST request&apos;);      console.log(req.body);});app.use(router);app.listen(3000); //指定端口并启动express web服务</code></pre><h3 id="4-运行"><a href="#4-运行" class="headerlink" title="4.运行"></a>4.运行</h3><p>&#160;&#160;&#160;&#160;编译前端：</p><pre><code>$ ionic serve</code></pre><p>&#160;&#160;&#160;&#160;启动后台服务：</p><pre><code>$ node server.js</code></pre><p>&#160;&#160;&#160;&#160;在页面输入姓名，年龄。</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-4e2106f6e0b4fb74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="5.png"></p><p>&#160;&#160;&#160;&#160;点击提交</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-cb9146782617957e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="6.png"></p><p>&#160;&#160;&#160;&#160;成功的话会出现后台我写的返回报文。这个时候在终端上看，后台打印的内容，会发现如下图：</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-761d1a86c456a197.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="7.png"></p><p>&#160;&#160;&#160;&#160;表单提交的内容都已经在后台显示出来。这样就完成了自建前后端简单的交互。</p><h3 id="5-打包"><a href="#5-打包" class="headerlink" title="5.打包"></a>5.打包</h3><h5 id="1-添加设备"><a href="#1-添加设备" class="headerlink" title="1. 添加设备"></a>1. 添加设备</h5><pre><code>$ ionic platform add ios$ ionic platform add android</code></pre><p>&#160;&#160;&#160;&#160;一般项目都需要两个平台同时部署，所以我们就添加两个，执行完毕之后执行命令查看你已经添加的平台列表：</p><pre><code>$ ionic platform list</code></pre><p>结果：</p><pre><code>Installed platforms:ios 4.1.1，android ~5.2.0Available platforms: amazon-fireos ~3.6.3 (deprecated)，blackberry10 ~3.8.0，browser ~4.1.0，firefoxos ~3.6.3，osx ~4.0.1，webos ~3.7.0</code></pre><h5 id="2-iOS"><a href="#2-iOS" class="headerlink" title="2 iOS"></a>2 iOS</h5><p><strong>2.1 编译</strong></p><p>&#160;&#160;&#160;&#160;在终端进入工程目录下，进行编译</p><pre><code>$ ionic build ios</code></pre><p>&#160;&#160;&#160;&#160;开始编译项目，编译完成之后代开Xcode，打开platform-&gt;ios-&gt;myIonic.xcodeproj的项目文件，Xcode中选择要运行的模拟器版本并执行快捷键cmd+R运行模拟器，模拟器打开后会自动运行你应用。</p><p>&#160;&#160;&#160;&#160;输入姓名年龄，点击提交，这个时候会报错：</p><pre><code>ERROR Internal navigation rejected - &lt;allow-navigation&gt; not set for url=&apos;http://192.168.14.102:3000/Info&apos;</code></pre><p>&#160;&#160;&#160;&#160;出现这个错误的原因是因为没有设置白名单，iOS9+会拒绝请求。<br>&#160;&#160;&#160;&#160;所以解决方案也很简单。只需要在ios -&gt; ionicTest -&gt; config.xml中配置</p><pre><code>&lt;allow-navigation href=&quot;*&quot; /&gt; //即允许跳转到任意http协议的页面  </code></pre><p>这样就成功解决这个问题，接下来重新运行，就通畅了。</p><p><strong>2.2 打包ipa包</strong></p><p>&#160;&#160;&#160;&#160;在Xcode中，模拟器选择Generic iOS Device</p><p>&#160;&#160;&#160;&#160;在顶部导航栏上的product中选择Archive进行打包，接下来的选择根据不同的需要选择不同的选项，我这里选择的是测试包。 </p><pre><code>Export -&gt; Save for Ad Hoc Deployment -&gt; select a Development Team -&gt; Export one app for all compatible devices -&gt; next -&gt; Export到指定文件夹下。</code></pre><p>&#160;&#160;&#160;&#160;以上就是打包iOS包的方法和遇到的一些小问题。</p><h5 id="3-Android"><a href="#3-Android" class="headerlink" title="3 Android"></a>3 Android</h5><p><strong>安卓模块不是我负责的，我也就没有花太多精力去详细研究，一些配置什么的也就大概说下，具体的配置项需要自己根据自己所处的环境进行配置。我就不赘述了。</strong><br><strong>3.1 配置环境</strong></p><p>&#160;&#160;&#160;&#160;1.安装Java的JDK，并配置好环境变量。</p><p>&#160;&#160;&#160;&#160;2.安装工程需要版本的AndroidSDK，并配置好环境变量；这里JDK和andriodSDK的安装和配置都很重要，必须安装好JDK和AndroidSDK，才可以进行下面的打包，否则是打不了包的。</p><p><strong>3.2 打包</strong><br>&#160;&#160;&#160;&#160;在终端进入工程目录下，进行编译</p><pre><code>$ ionic build android</code></pre><p>&#160;&#160;&#160;&#160;<strong>注意：这里会提示你安装部分版本的Android SDK，按照上面的步骤跟着安装就可以，之后重新编译一下。</strong></p><p>&#160;&#160;&#160;&#160;编译之后可以选择在模拟器上运行或者是在真机上运行。（需要先新建虚拟机/连接手机，新建方法：打开Android SDK安装目录下的AVD Manager.exe选择新建）</p><pre><code>$ ionic run android</code></pre><p>&#160;&#160;&#160;&#160;同样，iOS中出现的问题，Android也出现了。</p><p>&#160;&#160;&#160;&#160;只需要在platform -&gt; Android-&gt; AndroidManifest.xml中，添加上以下一些权限设置的代码即可：</p><pre><code>&lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.READ_LOGS&quot; /&gt;</code></pre><p>&#160;&#160;&#160;&#160;<strong>以上就是整个Ionic的前后端简单交互与打包了。项目要是有需求的话可以评论留言跟我要。不过这个项目比较简单，跟着一步一步走很快就可以搞定的。要是大家在这里发现什么问题，请私信或者评论告诉我，让我也学习学习。</strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>web学习笔记07-stylelint构造及规则了解</title>
      <link href="/2016/09/28/web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B007-stylelint%E6%9E%84%E9%80%A0%E5%8F%8A%E8%A7%84%E5%88%99%E4%BA%86%E8%A7%A3/"/>
      <url>/2016/09/28/web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B007-stylelint%E6%9E%84%E9%80%A0%E5%8F%8A%E8%A7%84%E5%88%99%E4%BA%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>&#160;&#160;&#160;&#160;<strong>这篇文章主要是对stylelint的构造和规则，根据官网的英文文档， 我花了点时间进行了简单的翻译工作，把主要的意思大概写了一下，算是一篇笔记吧。具体的规则方面有些我就直接用有道翻译的，因为量太大了，我自己主要翻译的就是前半段，加上规则的部分内容，有道翻译的没翻译好的，我顺道给改了改。自己写的demo还没有完善好，等找时间，我完善之后上传下。</strong></p><p>&#160;&#160;&#160;&#160;<strong>其实吧，这个stylelint用起来基本上跟eslint差不多，也可以跟gulp一块用，这个方面我还没有开始研究，可能明天或者后天会进行研究。然后后续也可能再补上一篇文。感觉时间好不够用，这一天研究研究，就过去了。好希望一天是240小时。大家看这篇文章要是有啥不懂的可以去官网查看查看，其实里面有不少内容我自己也没有弄清楚呢，还有待研究，大家要是有兴趣的可以跟我一起讨论讨论。</strong></p><h2 id="stylelint-configuration-构造"><a href="#stylelint-configuration-构造" class="headerlink" title="stylelint configuration(构造)"></a>stylelint configuration(构造)</h2><h3 id="加载配置对象"><a href="#加载配置对象" class="headerlink" title="加载配置对象"></a>加载配置对象</h3><p>&#160;&#160;&#160;&#160;从工程中查找和加载配置项，一般会从当前的工作目录中，以下面的顺序查找可能的来源：</p><ul><li><code>package.json</code>里面的<code>stylelint</code>属性</li><li>一个单独的<code>.stylelintrc</code>文件</li><li>一个<code>stylelint.config.js</code>到处JS对象的文件     </li></ul><p>&#160;&#160;&#160;&#160;<code>.stylelintrc</code>文件格式可以是JSON，可以是YAML格式的，你也可以添加文件扩展名来指定文件内容格式是JSON，YAML，或者是JS格式。<code>.stylelintrc.json</code>, <code>.stylelintrc.yaml</code>, <code>.stylelintrc.js</code>。</p><p>&#160;&#160;&#160;&#160;你可能需要使用扩展，使你的文本编辑器，可以更好地解释文件，并帮助语法检查和高亮。</p><p>&#160;&#160;&#160;&#160;一旦其中之一被发现和解析，搜索将停止，该对象将被使用。</p><h3 id="配置对象"><a href="#配置对象" class="headerlink" title="配置对象"></a>配置对象</h3><p>&#160;&#160;&#160;&#160;配置对象可以有下面这些属性</p><h4 id="rules"><a href="#rules" class="headerlink" title="rules"></a>rules</h4><h5 id="1-基本格式"><a href="#1-基本格式" class="headerlink" title="1.基本格式"></a>1.基本格式</h5><p>&#160;&#160;&#160;&#160;个人认为规则算是检查器里极其重要的配置项了，stylelint有超过一百五十条的规则，这些规则没有是默认打开的，都需要自己根据自己的需要进行设置开启。</p><p>&#160;&#160;&#160;&#160;规则属性是一个对象，它的键是规则的名称，值是规则配置。每个规则配置符合下列格式之一：</p><ul><li>单个值（primary option）</li><li>一个有两个值的数组（[primary option,secondary option]）</li><li>null (关闭规则)</li></ul><p>示例：</p><pre><code>{      &quot;rules&quot;: {        &quot;block-no-empty&quot;: null,        &quot;color-no-invalid-hex&quot;: true,        &quot;comment-empty-line-before&quot;: [ &quot;always&quot;, {              &quot;ignore&quot;: [&quot;stylelint-commands&quot;, &quot;between-comments&quot;],        } ],        &quot;declaration-colon-space-after&quot;: &quot;always&quot;,        &quot;indentation&quot;: [&quot;tab&quot;, {              &quot;except&quot;: [&quot;value&quot;]        }],        &quot;max-empty-lines&quot;: 2,        &quot;rule-nested-empty-line-before&quot;: [ &quot;always&quot;, {              &quot;except&quot;: [&quot;first-nested&quot;],              &quot;ignore&quot;: [&quot;after-comment&quot;],        } ],        &quot;unit-whitelist&quot;: [&quot;em&quot;, &quot;rem&quot;, &quot;%&quot;, &quot;s&quot;]      }    }</code></pre><p>指定了一个primary option就是打开了一个规则。</p><h5 id="2-在css文件中关闭规则"><a href="#2-在css文件中关闭规则" class="headerlink" title="2.在css文件中关闭规则"></a>2.在css文件中关闭规则</h5><p>&#160;&#160;&#160;&#160;在css文件中，你可以暂时关闭某条规则，也可以关闭所有规则：</p><pre><code>/* stylelint-disable */a {}/* stylelint-enable */</code></pre><p>&#160;&#160;&#160;&#160;你也可以关闭个别规则：</p><pre><code>/* stylelint-disable selector-no-id, declaration-no-important      */#id {      color: pink !important;}/* stylelint-enable */</code></pre><p>&#160;&#160;&#160;&#160;在你不需要明确地重新启用的规则处，你也可以通过<code>/* stylelint-disable-line */</code>关闭个别行：</p><pre><code>#id { /* stylelint-disable-line */      color: pink !important; /* stylelint-disable-line declaration-no-important */}</code></pre><p>&#160;&#160;&#160;&#160;当然你也可以通过<code>/* stylelint-disable-next-line */</code>来关闭那些你不需要明确重新启用的下一行规则：</p><pre><code>#id {      /* stylelint-disable-next-line declaration-no-important */      color: pink !important;}</code></pre><p>&#160;&#160;&#160;&#160;有些复杂的，重叠的禁用和启用模式同样支持：</p><pre><code>/* stylelint-disable *//* stylelint-enable foo *//* stylelint-disable foo *//* stylelint-enable *//* stylelint-disable foo, bar *//* stylelint-disable baz *//* stylelint-enable baz, bar *//* stylelint-enable foo */</code></pre><h5 id="3-严重程度：error-amp-warning"><a href="#3-严重程度：error-amp-warning" class="headerlink" title="3.严重程度：error &amp; warning"></a>3.严重程度：error &amp; warning</h5><p>&#160;&#160;&#160;&#160;跟eslint差不多，stylelint也有严重程度的分别，默认情况下，所有的规则都有一个<code>error</code>级别的严重程度，你可以在配置中通过添加<code>defaultSeverity</code>属性来改变默认值 </p><p>&#160;&#160;&#160;&#160;要调整任何具体规则的严重程度，使用辅助选项<code>severity</code>，可获得的值有</p><ul><li>warning</li><li>error</li></ul><p>示例：</p><pre><code>// error-level severity examples{ &quot;indentation&quot;: 2 }{ &quot;indentation&quot;: [2] }// warning-level severity examples{ &quot;indentation&quot;: [2, { &quot;severity&quot;: &quot;warning&quot; } ] }{ &quot;indentation&quot;: [2, {        &quot;except&quot;: [&quot;value&quot;],        &quot;severity&quot;: &quot;warning&quot;      }]}</code></pre><p>不同的情况会使用不同的严重级别。例如不同的显示，或者不同的退出过程等等。</p><h5 id="4-自定义消息"><a href="#4-自定义消息" class="headerlink" title="4.自定义消息"></a>4.自定义消息</h5><p>&#160;&#160;&#160;&#160;如果您想在一个规则被违反，提供自定义消息，你可以用两种方式做到这一点：提供一个<code>message</code>选项，或者写一个自定义格式。</p><p>&#160;&#160;&#160;&#160;所有的规则都接受一个次要选项<code>message</code>,如果提供了该选项，意味着将会取代任何默认提供的标准信息。举个例子，以下规则配置将替代几个自定义消息：</p><pre><code>{      &quot;color-hex-case&quot;: [ &quot;lower&quot;, {        &quot;message&quot;: &quot;Lowercase letters are easier to distinguish from numbers&quot;      } ],      &quot;indentation&quot;: [ 2, {         &quot;ignore&quot;: [&quot;block&quot;],            &quot;message&quot;: &quot;Please use 2 spaces for indentation. Tabs make The Architect grumpy.&quot;,        &quot;severity&quot;: &quot;warning&quot;      } ]}</code></pre><p>如果你想最大程度的进行控制，你应该写自定义格式的规则。(自定义消息部分的思想我大概理解，但是不怎么会翻译。。尴尬。。。)</p><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p>&#160;&#160;&#160;&#160;你的配置可以扩展一个现有的配置，无论这个配置是你自己的还是第三方的。当一个配置扩展了另一个配置，它在被扩展的配置项开始的时候开始，并且添加在其之后或者直接覆盖当前配置。</p><p>&#160;&#160;&#160;&#160;你也可以扩展现有配置的阵列，优先于阵列中的各项（因此第一项压倒一切，第二个项目压倒一切除了第一项，以此类推。个人理解就是你一个草民扩展了，你当皇帝了，那你就是老大，比谁都牛，你要是宰相呢，那你就是除了皇帝以外，比谁都厉害，你要是什么七品芝麻官，除了比你级别高的，你比下面的人都厉害等等。）。</p><p>&#160;&#160;&#160;&#160;举个例子，扩展下<code>stylelint-config-standard</code>改变缩进的标签，并且关闭<code>number-leading-zero</code>规则:</p><pre><code>{      &quot;extends&quot;: &quot;stylelint-config-standard&quot;,      &quot;rules&quot;: {        &quot;indentation&quot;: &quot;tab&quot;,        &quot;number-leading-zero&quot;: null      }}</code></pre><p>或者用<code>stylelint-config-standard</code>开始，然后在这顶部把<code>myExtendableConfig</code>分层，然后覆盖缩进规则</p><pre><code>{      &quot;extends&quot;: [        &quot;stylelint-config-standard&quot;,        &quot;./myExtendableConfig&quot;      ],      &quot;rules&quot;: {        &quot;indentation&quot;: &quot;tab&quot;      }}</code></pre><p><code>extends</code>的值是<code>locater</code>,最终是<code>require()</code>，所以它可以适合用<code>node</code>的<code>require.resolve（）</code>算法的任何格式。这就意味着<code>locater</code>可以是：</p><ul><li>在<code>node_modules</code>模块的名称。</li><li>绝对文件路径。</li><li>名为.js或者以.json扩展名的文件的相对路径，相对于参考配置。</li></ul><h4 id="plugins（插件）"><a href="#plugins（插件）" class="headerlink" title="plugins（插件）"></a>plugins（插件）</h4><p>&#160;&#160;&#160;&#160;插件是支持方法，工具集，非标准CSS功能，或者非常具体的用例规则或套由社区建立规则。</p><p>&#160;&#160;&#160;&#160;想要使用插件，就添加<code>plugins</code>阵列配置项到你的配置文件中，值可以是一个npm模块的名字，可以使一个绝对路径，也可以是一个调用配置文件的相对路径。</p><pre><code>{      &quot;plugins&quot;: [        &quot;../special-rule.js&quot;      ],      &quot;rules&quot;: {        &quot;plugin/special-rule&quot;: &quot;everything&quot;      },}</code></pre><p>&#160;&#160;&#160;&#160;一个插件可以提供一个规则或者一组规则，如果你用的插件提供了一组规则，只需调用模块中的插件配置值，并且使用它在<code>rules</code>中提供的规则。</p><pre><code>{      &quot;plugins&quot;: [        &quot;../some-rule-set.js&quot;      ],      &quot;rules&quot;: {        &quot;some-rule-set/first-rule&quot;: &quot;everything&quot;,        &quot;some-rule-set/second-rule&quot;: &quot;nothing&quot;,        &quot;some-rule-set/third-rule&quot;: &quot;everything&quot;      },}</code></pre><h4 id="Processors（处理器）"><a href="#Processors（处理器）" class="headerlink" title="Processors（处理器）"></a>Processors（处理器）</h4><p>&#160;&#160;&#160;&#160;处理器是挂钩到stylelint的管道，修改的道路上的代码到stylelint并就其出路改变结果的功能。</p><p>&#160;&#160;&#160;&#160;处理器只能与CLI和节点的API，而不是与PostCSS插件使用。 （该PostCSS插件会忽略它们。）</p><p>&#160;&#160;&#160;&#160;使用的话，添加<code>processors</code>阵列配置项到配置文件中，用起来跟扩展差不都多。</p><pre><code>{      &quot;processors&quot;: [&quot;stylelint-html-processor&quot;],      &quot;rules&quot;: {..},}</code></pre><p>如果你的处理器有选项，其第一个项目是“定位”和第二项是选择对象。</p><pre><code>{      &quot;processors&quot;: [        &quot;stylelint-html-processor&quot;,        [ &quot;some-other-processor&quot;, { &quot;optionOne&quot;: true, &quot;optionTwo&quot;: false } ]      ],      &quot;rules&quot;: {..}}</code></pre><h4 id="ignoreFiles"><a href="#ignoreFiles" class="headerlink" title="ignoreFiles"></a>ignoreFiles</h4><p>&#160;&#160;&#160;&#160;提供一个glob或globs数组忽略特定文件。</p><p>&#160;&#160;&#160;&#160;另一种方法是使用一个<code>.stylelintignore</code>文件，描述如下。</p><p>&#160;&#160;&#160;&#160;如果glob是绝对路径，它们就这样用。如果他们是相对的，它们是相对于分析</p><ul><li>configBasedir</li><li>配置文件的路径，如果配置是stylelint发现的一个加载的文件</li><li><code>process.cwd()</code></li></ul><p>这个属性呢，从扩展配置剥离：只有root级别的配置可以忽略文件。</p><h4 id="defaultSeverity"><a href="#defaultSeverity" class="headerlink" title="defaultSeverity"></a>defaultSeverity</h4><p>&#160;&#160;&#160;&#160;默认严重级别</p><ul><li>error</li><li>warning</li></ul><h4 id="stylelintignore"><a href="#stylelintignore" class="headerlink" title=".stylelintignore"></a>.stylelintignore</h4><p>&#160;&#160;&#160;&#160;你可以使用<code>.stylelintignore</code>文件（或者指定另一个忽略模式的文件）来忽略特定文件。（另一种方法是使用一个config.ignoreFiles，如上所述）</p><p>&#160;&#160;&#160;&#160;在你<code>.stylelintignore</code>文件中的模式必须匹配<code>.gitignore</code>语法。（之后，<code>node-ignore</code>会解析你的模式），这其中的一个含义是，在你文件中的模式总是相对于<code>process.cwd（）</code>进行分析</p><p>&#160;&#160;&#160;&#160;stylelint会在<code>process.cwd（）</code>中寻找一个<code>.stylelintignore</code>文件，你还可以指定你的忽略模式的文件路径（绝对或相对于process.cwd（））使用–ignore路径（在CLI）和ignorePath（在JS）选项。</p><h2 id="stylelint-rules"><a href="#stylelint-rules" class="headerlink" title="stylelint rules"></a>stylelint rules</h2><p>&#160;&#160;&#160;&#160;<a href="https://github.com/stylelint/stylelint/blob/master/docs/user-guide/rules.md" target="_blank" rel="noopener">stylelint rules官方地址</a></p><p>&#160;&#160;&#160;&#160;规则专注于规范化css，旨在作用于广大用户。除了规则呢，还有插件，插件是由社区建立，可以支持方法，工具集，非标准CSS功能，或者非常具体的用例规则。</p><p>&#160;&#160;&#160;&#160;每一条规则是独立的，默认情况下关闭。规则也没有默认值。</p><h3 id="规则列表"><a href="#规则列表" class="headerlink" title="规则列表"></a>规则列表</h3><h4 id="Color"><a href="#Color" class="headerlink" title="Color"></a>Color</h4><ul><li><code>color-hex-case</code>: 指定大写或小写十六进制的颜色。</li><li><code>color-hex-length</code>: 指定十六进制颜色长或短的符号。</li><li><code>color-named</code>: 需要（如果可能）或不允许命名的颜色。</li><li><code>color-no-hex</code>: 不允许十六进制的颜色。</li><li><code>color-no-invalid-hex</code>: 禁止无效的十六进制颜色。</li></ul><h4 id="font-family"><a href="#font-family" class="headerlink" title="font-family"></a>font-family</h4><ul><li><code>font-family-name-quotes</code>:指定是否引号应该围绕字体系列名称中使用。</li></ul><h4 id="function"><a href="#function" class="headerlink" title="function"></a>function</h4><ul><li><code>function-blacklist</code>:指定不允许的功能黑名单</li><li><code>function-calc-no-unspaced-operator</code>:计算的函数中禁止的unspaced执行</li><li><code>function-comma-newline-after</code>:要求一个新行或函数的逗号后禁止空白。</li><li><code>function-comma-newline-before</code>: 要求一个新行或函数的逗号之前不允许空白。</li><li><code>function-comma-space-after</code>: 要求一个空格或函数的逗号后禁止空白。</li><li><code>function-comma-space-before</code>:要求一个空格或函数的逗号前禁止空白。</li><li><code>function-linear-gradient-no-nonstandard-direction</code>:禁止在线性梯度方向值（），根据标准语法是无效的呼叫。</li><li><code>function-max-empty-lines</code>: 限制方法中相邻的空行数</li><li><code>function-name-case</code>: 指定大写或小写的函数名。</li><li><code>function-parentheses-newline-inside</code>:要求一个新行或函数的括号内不允许空白。 </li><li><code>function-parentheses-space-inside</code>: 要求一个空格或函数的括号内不允许空白。</li><li><code>function-url-data-uris</code>: 要求或禁止数据的URI的URL</li><li><code>function-url-no-scheme-relative</code>:不允许文档相对的URL。 </li><li><code>function-url-quotes</code>: 要求或禁止对于网址报价</li><li><code>function-url-scheme-whitelist</code>: 指定允许URL方案的白名单。</li><li><code>function-whitelist</code>: 指定允许的功能的白名单。</li><li><code>function-whitespace-after</code>: 要求方法后不允许空白。</li></ul><h4 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h4><ul><li><code>number-leading-zero</code>:要求或分数低于1的数字禁止前导零。</li><li><code>number-max-precision</code>:限制允许的小数位数的数目。</li><li><code>number-no-trailing-zeros</code>: 禁止在数量尾随零。</li></ul><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><ul><li><code>string-no-newline</code>: 禁止在字符串（转义）换行。</li><li><code>string-quotes</code>: 指定字串，单或双引号。</li></ul><h4 id="Length"><a href="#Length" class="headerlink" title="Length"></a>Length</h4><ul><li><code>length-zero-no-unit</code>: 禁止单位零长度。</li></ul><h4 id="Time"><a href="#Time" class="headerlink" title="Time"></a>Time</h4><ul><li><code>time-no-imperceptible</code>: 禁止动画和过渡小于或等于100毫秒。</li></ul><h4 id="Unit"><a href="#Unit" class="headerlink" title="Unit"></a>Unit</h4><ul><li><code>unit-blacklist</code>: 指定不允许使用单位的黑名单。</li><li><code>unit-case</code>: 指定大写或小写的单位。</li><li><code>unit-no-unknown</code>: 禁止未知的单位。</li><li><code>unit-whitelist</code>: 指定允许单位的白名单&gt;</li></ul><h4 id="Value"><a href="#Value" class="headerlink" title="Value"></a>Value</h4><ul><li><code>value-keyword-case</code>: 指定大写或小写关键字的值。</li><li><code>value-no-vendor-prefix</code>: 不允许供应商前缀值。</li></ul><h4 id="Value-list"><a href="#Value-list" class="headerlink" title="Value list"></a>Value list</h4><ul><li><code>value-list-comma-newline-after</code>: 逗号后需要一个换行符或不允许空白值列表。</li><li><code>value-list-comma-newline-before</code>: 逗号前需要一个换行符或不允许空白值列表。</li><li><code>value-list-comma-space-after</code>: 需要一个空格或者逗号后不允许空白值列表。</li><li><code>value-list-comma-space-before</code>:需要一个空格或者逗号前不允许空白值列表。</li><li><code>value-list-max-empty-lines</code>: 限制相邻的数量值列表内空行。</li></ul><h4 id="Custom-property"><a href="#Custom-property" class="headerlink" title="Custom property"></a>Custom property</h4><ul><li><code>custom-property-empty-line-before</code>: 自定义属性之前equire或不允许空行。</li><li><code>custom-property-no-outside-root</code>: 不允许自定义属性以外的:根规则。</li><li><code>custom-property-pattern</code>: 为自定义属性指定一个模式。</li></ul><h4 id="Shorthand-property"><a href="#Shorthand-property" class="headerlink" title="Shorthand property"></a>Shorthand property</h4><ul><li><code>shorthand-property-no-redundant-values</code>:不允许在简写属性冗余值。</li></ul><h4 id="Property"><a href="#Property" class="headerlink" title="Property"></a>Property</h4><ul><li><code>property-blacklist</code>: 指定一个不允许属性的黑名单。</li><li><code>property-case</code>: 为属性指定小写或大写。</li><li><code>property-no-unknown</code>: 不允许未知属性。</li><li><code>property-no-vendor-prefix</code>: 不允许前缀的属性。</li><li><code>property-whitelist</code>: 指定一个白名单允许属性。</li></ul><h4 id="Keyframe-declaration"><a href="#Keyframe-declaration" class="headerlink" title="Keyframe declaration"></a>Keyframe declaration</h4><ul><li><code>keyframe-declaration-no-important</code>: 不允许!important在关键帧声明。</li></ul><h4 id="Declaration"><a href="#Declaration" class="headerlink" title="Declaration"></a>Declaration</h4><ul><li><code>declaration-bang-space-after</code>: bang声明之后需要一个空格或者不允许空白</li><li><code>declaration-bang-space-before</code>: bang声明之前需要一个空格或者不允许空白</li><li><code>declaration-colon-newline-after</code>: 冒号后的声明需要一个换行符或不允许空白。</li><li><code>declaration-colon-space-after</code>: 冒号后的声明需要一个空格或不允许空白。</li><li><code>declaration-colon-space-before</code>: 冒号之前的声明需要一个空格或不允许空白。</li><li><code>declaration-empty-line-before</code>: 要求声明前不允许空一行。</li><li><code>declaration-no-important</code>: 不允许!important声明。</li><li><code>declaration-property-unit-blacklist</code>: 指定一个黑名单内不允许声明属性。</li><li><code>declaration-property-unit-whitelist</code>: 指定一个白名单内允许声明属性。</li><li><code>declaration-property-value-blacklist</code>: 指定一个黑名单,不允许在声明属性和值对。</li><li><code>declaration-property-value-whitelist</code>: 指定一个允许属性和值对声明的白名单。</li></ul><h4 id="Declaration-block"><a href="#Declaration-block" class="headerlink" title="Declaration block"></a>Declaration block</h4><ul><li><code>declaration-block-no-duplicate-properties</code>: 不允许复制属性块中声明</li><li><code>declaration-block-no-ignored-properties</code>:不允许被忽略是因为另一个属性值的属性值相同的规则。</li><li><code>declaration-block-no-redundant-longhand-properties</code>: 不允许手写属性,可以组合成一个简写属性。</li><li><code>declaration-block-no-shorthand-property-overrides</code>: 不允许简写属性覆盖相关手写属性声明块。</li><li><code>declaration-block-properties-order</code>: 声明块中指定的顺序属性。</li><li><code>declaration-block-semicolon-newline-after</code>: 要求一个换行符或不允许空白块分号后。</li><li><code>declaration-block-semicolon-newline-before</code>: 要求一个换行符或不允许空白块分号之前的声明。</li><li><code>declaration-block-semicolon-space-after</code>: 要求一个空间或不允许空白块分号后的声明。</li><li><code>declaration-block-semicolon-space-before</code>: 要求一个空间或不允许空白块分号之前的声明</li><li><code>declaration-block-single-line-max-declarations</code>: 限制声明在一行声明块的数量</li><li><code>declaration-block-trailing-semicolon</code>: 要求或不允许在声明块后面的分号。</li></ul><h4 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h4><ul><li><code>block-closing-brace-empty-line-before</code>: 要求或不允许关闭括号前空一行。</li><li><code>block-closing-brace-newline-after</code>: 需要一个换行符或不允许关闭括号后的空白。</li><li><code>block-closing-brace-newline-before</code>: 需要一个换行符或不允许空白关闭括号前的块。</li><li><code>block-closing-brace-space-after</code>: 需要一个空间或不允许关闭括号后的空白块。</li><li><code>block-closing-brace-space-before</code>: 在关闭括号前的块需要一个空格或者不允许空白。</li><li><code>block-no-empty</code>: 不允许空块</li><li><code>block-no-single-line</code>: 不允许单行块</li><li><code>block-opening-brace-newline-after</code>: 开括号的块之后需要新的一行。</li><li><code>block-opening-brace-newline-before</code>: 开括号的块之后需要一个换行符或不允许空白</li><li><code>block-opening-brace-space-after</code>: 开括号的块之后需要一个空格或不允许空白。</li><li><code>block-opening-brace-space-before</code>: 开括号的块之前需要一个空格或不允许空白。</li></ul><h4 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h4><ul><li><code>selector-attribute-brackets-space-inside</code>: 在括号里的属性选择器需要一个空格或者不允许空白。</li><li><code>selector-attribute-operator-blacklist</code>: 指定一个黑名单不允许属性的操作符。</li><li><code>selector-attribute-operator-space-after</code>: 需要一个空间或不允许空格后运营商在属性选择器。</li><li><code>selector-attribute-operator-space-before</code>: 需要一个空间或不允许空格内运营商之前属性选择器。</li><li><code>selector-attribute-operator-whitelist</code>: 指定一个属性允许运营商的白名单。</li><li><code>selector-attribute-quotes</code>: 需要或不允许引用属性值。</li><li><code>selector-class-pattern</code>: 指定一个模式类选择符。</li><li><code>selector-combinator-space-after</code>: 需要一个空间或不允许空格后的组合子选择器。</li><li><code>selector-combinator-space-before</code>: 需要一个空间或不允许空格前的组合子选择器。</li><li><code>selector-descendant-combinator-no-non-space</code>: 不允许的字符的后代组合子选择器进行技术改造。</li><li><code>selector-id-pattern</code>: 指定一个模式,id选择器。</li><li><code>selector-max-compound-selectors</code>: 在一个选择器里面限制复合选择器的数量。</li><li><code>selector-max-specificity</code>: 限制的特异性选择器。</li><li><code>selector-nested-pattern</code>: 指定一个模式选择器的规则嵌套规则。</li><li><code>selector-no-attribute</code>: 不允许属性选择器。</li><li><code>selector-no-combinator</code>: 不允许在选择器组合。</li><li><code>selector-no-id</code>: 不允许id选择器。</li><li><code>selector-no-qualifying-type</code>: 不允许符合条件的选择器的类型。</li><li><code>selector-no-type</code>: 不允许类型选择器。</li><li><code>selector-no-universal</code>: Disallow the universal selector.</li><li><code>selector-no-vendor-prefix</code>: 不允许选择器的前缀。</li><li><code>selector-pseudo-class-blacklist</code>: 指定一个黑名单禁止伪类选择器。</li><li><code>selector-pseudo-class-case</code>: 为伪类选择器指定小写或大写。</li><li><code>selector-pseudo-class-no-unknown</code>: 不允许未知的伪类选择器。</li><li><code>selector-pseudo-class-parentheses-space-inside</code>: 需要一个空格或不允许空格在括号里面的伪类选择器。</li><li><code>selector-pseudo-class-whitelist</code>: 伪类选择器允许指定一个白名单。</li><li><code>selector-pseudo-element-case</code>: 为伪元素选择器指定小写或大写。</li><li><code>selector-pseudo-element-colon-notation</code>: 为适用的伪元素指定单引号或双冒号符号。</li><li><code>selector-pseudo-element-no-unknown</code>: 不允许未知的伪元素选择器。</li><li><code>selector-root-no-composition</code>: 在选择器不允许根的构成。</li><li><code>selector-type-case</code>: 指定小写或大写类型选择器。</li><li><code>selector-type-no-unknown</code>: 不允许未知类型选择器。</li><li><code>selector-max-empty-lines</code>: 限制内相邻的空行选择器的数量。</li></ul><h4 id="Selector-list"><a href="#Selector-list" class="headerlink" title="Selector list"></a>Selector list</h4><ul><li><code>selector-list-comma-newline-after</code>: 需要一个换行符或不允许空白选择逗号后的列表。</li><li><code>selector-list-comma-newline-before</code>: 逗号前需要一个换行符或不允许空白选择器列表。</li><li><code>selector-list-comma-space-after</code>: 需要一个空格或者逗号后不允许空格选择器列表。</li><li><code>selector-list-comma-space-before</code>: 需要一个空格或者逗号前不允许空格选择器列表。</li></ul><h4 id="Root-rule"><a href="#Root-rule" class="headerlink" title="Root rule"></a>Root rule</h4><ul><li><code>root-no-standard-properties</code>: 根规则内不允许标准属性。</li></ul><h4 id="Rule"><a href="#Rule" class="headerlink" title="Rule"></a>Rule</h4><ul><li><code>rule-nested-empty-line-before</code>: 需要或不允许嵌套规则前空一行。</li><li><code>rule-non-nested-empty-line-before</code>: 需要或不允许non-nested规则前空一行。</li></ul><h4 id="Media-feature"><a href="#Media-feature" class="headerlink" title="Media feature"></a>Media feature</h4><ul><li><code>media-feature-colon-space-after</code>: 需要一个空间或不允许空格在冒号之后媒体的特性。</li><li><code>media-feature-colon-space-before</code>: 需要一个空间或不允许空格在冒号之前媒体的特性。</li><li><code>media-feature-name-case</code>: 为媒体特性名称指定小写或大写。</li><li><code>media-feature-name-no-unknown</code>: 不允许未知的媒体功能的名字。</li><li><code>media-feature-name-no-vendor-prefix</code>: 不允许媒体特性名称的前缀。</li><li><code>media-feature-no-missing-punctuation</code>: 不允许标点non-boolean媒体功能</li><li><code>media-feature-parentheses-space-inside</code>: 需要一个空间或不允许空格在括号里面的媒体功能。</li><li><code>media-feature-range-operator-space-after</code>: 需要一个空间或不允许空白范围运算符后媒体的特性。</li><li><code>media-feature-range-operator-space-before</code>: 之前需要一个空间或不允许空格符范围在媒体功能。</li></ul><h4 id="Custom-media"><a href="#Custom-media" class="headerlink" title="Custom media"></a>Custom media</h4><ul><li><code>custom-media-pattern</code>: 为定制媒体查询名称指定一个模式。</li></ul><h4 id="Media-query-list"><a href="#Media-query-list" class="headerlink" title="Media query list"></a>Media query list</h4><ul><li><code>media-query-list-comma-newline-after</code>: 需要一个换行符或不允许空格后媒体查询的逗号分隔列表。</li><li><code>media-query-list-comma-newline-before</code>: 需要一个换行符或不允许空格之前媒体查询的逗号分隔列表</li><li><code>media-query-list-comma-space-after</code>: 需要一个空间或不允许空格后媒体查询的逗号分隔列表。</li><li><code>media-query-list-comma-space-before</code>:需要一个空间或不允许空格之前媒体查询的逗号分隔列表。</li></ul><h4 id="At-rule"><a href="#At-rule" class="headerlink" title="At-rule"></a>At-rule</h4><ul><li><code>at-rule-blacklist</code>: 不允许at-rules指定一个黑名单。</li><li><code>at-rule-empty-line-before</code>: 需要或不允许at-rules前空一行。</li><li><code>at-rule-name-case</code>: 指定at-rules小写或大写的名字。</li><li><code>at-rule-name-newline-after</code>: at-rule名称后需要一个换行符。</li><li><code>at-rule-name-space-after</code>: 需要一个空格后at-rule名称。</li><li><code>at-rule-no-unknown</code>: 不允许at-rules不明。</li><li><code>at-rule-no-vendor-prefix</code>: 不允许at-rules前缀。</li><li><code>at-rule-semicolon-newline-after</code>: 需要一个换行符之后at-rules的分号。</li><li><code>at-rule-whitelist</code>: 指定允许at-rules的白名单。</li></ul><h4 id="stylelint-disable-comment"><a href="#stylelint-disable-comment" class="headerlink" title="stylelint-disable comment"></a>stylelint-disable comment</h4><ul><li><code>stylelint-disable-reason</code>: 需要一个理由stylelint-disable之前或之后的评论发表评论。</li></ul><h4 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h4><ul><li><code>comment-empty-line-before</code>: 需要或不允许评论之前一个空行。</li><li><code>comment-no-empty</code>: 不允许空的评论。</li><li><code>comment-whitespace-inside</code>:需要或不允许空格里面的注释标记。</li><li><code>comment-word-blacklist</code>: 指定一个黑名单内不允许的话评论。</li></ul><h4 id="General-Sheet"><a href="#General-Sheet" class="headerlink" title="General / Sheet"></a>General / Sheet</h4><ul><li><code>indentation</code>: 指定缩进。</li><li><code>max-empty-lines</code>: 限制数量的相邻的空行。</li><li><code>max-line-length</code>: 限制线的长度。</li><li><code>max-nesting-depth</code>: 限制的深度嵌套。</li><li><code>no-browser-hacks</code>: 不允许浏览器黑客,无关你目标的浏览器。</li><li><code>no-descending-specificity</code>: 不允许选择器之后覆盖选择器的低特异性更高的特异性。</li><li><code>no-duplicate-selectors</code>: 不允许重复的选择器。</li><li><code>no-empty-source</code>: 不允许空的来源。</li><li><code>no-eol-whitespace</code>: 不允许行尾空白。</li><li><code>no-extra-semicolons</code>: 不允许额外的分号。</li><li><code>no-indistinguishable-colors</code>: 不允许产品极其接近的颜色相同。</li><li><code>no-invalid-double-slash-comments</code>: 不允许双斜杠注释(/ /…)不支持CSS。</li><li><code>no-missing-end-of-source-newline</code>: 不允许丢失end-of-source换行。</li><li><code>no-unknown-animations</code>: 不允许动画名称不对应@keyframes声明。</li><li><code>no-unsupported-browser-features</code>: 不允许功能的浏览器不支持的目标。</li></ul><h2 id="官方配置标准文件"><a href="#官方配置标准文件" class="headerlink" title="官方配置标准文件"></a>官方配置标准文件</h2><h3 id="stylelint-config-standard"><a href="#stylelint-config-standard" class="headerlink" title="stylelint-config-standard"></a>stylelint-config-standard</h3><pre><code>module.exports = {      &quot;rules&quot;: {        &quot;at-rule-empty-line-before&quot;: [ &quot;always&quot;, {          except: [            &quot;blockless-after-same-name-blockless&quot;,            &quot;first-nested&quot;,              ],              ignore: [&quot;after-comment&quot;],        } ],        &quot;at-rule-name-case&quot;: &quot;lower&quot;,        &quot;at-rule-name-space-after&quot;: &quot;always-single-line&quot;,        &quot;at-rule-semicolon-newline-after&quot;: &quot;always&quot;,        &quot;block-closing-brace-empty-line-before&quot;: &quot;never&quot;,        &quot;block-closing-brace-newline-after&quot;: &quot;always&quot;,        &quot;block-closing-brace-newline-before&quot;: &quot;always-multi-line&quot;,        &quot;block-closing-brace-space-before&quot;: &quot;always-single-line&quot;,           &quot;block-no-empty&quot;: true,        &quot;block-opening-brace-newline-after&quot;: &quot;always-multi-line&quot;,        &quot;block-opening-brace-space-after&quot;: &quot;always-single-line&quot;,        &quot;block-opening-brace-space-before&quot;: &quot;always&quot;,        &quot;color-hex-case&quot;: &quot;lower&quot;,        &quot;color-hex-length&quot;: &quot;short&quot;,        &quot;color-no-invalid-hex&quot;: true,        &quot;comment-empty-line-before&quot;: [ &quot;always&quot;, {              except: [&quot;first-nested&quot;],              ignore: [&quot;stylelint-commands&quot;],        } ],        &quot;comment-no-empty&quot;: true,        &quot;comment-whitespace-inside&quot;: &quot;always&quot;,        &quot;custom-property-empty-line-before&quot;: [ &quot;always&quot;, {              except: [                &quot;after-custom-property&quot;,                &quot;first-nested&quot;,              ],              ignore: [                &quot;after-comment&quot;,                &quot;inside-single-line-block&quot;,              ],        } ],        &quot;declaration-bang-space-after&quot;: &quot;never&quot;,        &quot;declaration-bang-space-before&quot;: &quot;always&quot;,        &quot;declaration-block-no-duplicate-properties&quot;: [ true, {              ignore: [&quot;consecutive-duplicates-with-different-values&quot;],        } ],        &quot;declaration-block-no-ignored-properties&quot;: true,        &quot;declaration-block-no-redundant-longhand-properties&quot;: true,        &quot;declaration-block-no-shorthand-property-overrides&quot;: true,        &quot;declaration-block-semicolon-newline-after&quot;: &quot;always-multi-line&quot;,        &quot;declaration-block-semicolon-space-after&quot;: &quot;always-single-line&quot;,        &quot;declaration-block-semicolon-space-before&quot;: &quot;never&quot;,        &quot;declaration-block-single-line-max-declarations&quot;: 1,        &quot;declaration-block-trailing-semicolon&quot;: &quot;always&quot;,        &quot;declaration-colon-newline-after&quot;: &quot;always-multi-line&quot;,        &quot;declaration-colon-space-after&quot;: &quot;always-single-line&quot;,        &quot;declaration-colon-space-before&quot;: &quot;never&quot;,        &quot;declaration-empty-line-before&quot;: [ &quot;always&quot;, {              except: [                &quot;after-declaration&quot;,                &quot;first-nested&quot;,              ],              ignore: [                &quot;after-comment&quot;,                &quot;inside-single-line-block&quot;,              ],        } ],        &quot;function-calc-no-unspaced-operator&quot;: true,        &quot;function-comma-newline-after&quot;: &quot;always-multi-line&quot;,        &quot;function-comma-space-after&quot;: &quot;always-single-line&quot;,        &quot;function-comma-space-before&quot;: &quot;never&quot;,        &quot;function-linear-gradient-no-nonstandard-direction&quot;: true,        &quot;function-max-empty-lines&quot;: 0,        &quot;function-name-case&quot;: &quot;lower&quot;,        &quot;function-parentheses-newline-inside&quot;: &quot;always-multi-line&quot;,        &quot;function-parentheses-space-inside&quot;: &quot;never-single-line&quot;,        &quot;function-whitespace-after&quot;: &quot;always&quot;,        &quot;indentation&quot;: 2,        &quot;keyframe-declaration-no-important&quot;: true,        &quot;length-zero-no-unit&quot;: true,        &quot;max-empty-lines&quot;: 1,        &quot;media-feature-colon-space-after&quot;: &quot;always&quot;,        &quot;media-feature-colon-space-before&quot;: &quot;never&quot;,        &quot;media-feature-name-case&quot;: &quot;lower&quot;,        &quot;media-feature-name-no-unknown&quot;: true,        &quot;media-feature-no-missing-punctuation&quot;: true,        &quot;media-feature-parentheses-space-inside&quot;: &quot;never&quot;,        &quot;media-feature-range-operator-space-after&quot;: &quot;always&quot;,        &quot;media-feature-range-operator-space-before&quot;: &quot;always&quot;,        &quot;media-query-list-comma-newline-after&quot;: &quot;always-multi-line&quot;,        &quot;media-query-list-comma-space-after&quot;: &quot;always-single-line&quot;,        &quot;media-query-list-comma-space-before&quot;: &quot;never&quot;,        &quot;no-empty-source&quot;: true,        &quot;no-eol-whitespace&quot;: true,        &quot;no-extra-semicolons&quot;: true,        &quot;no-invalid-double-slash-comments&quot;: true,        &quot;no-missing-end-of-source-newline&quot;: true,        &quot;number-leading-zero&quot;: &quot;always&quot;,        &quot;number-no-trailing-zeros&quot;: true,        &quot;property-case&quot;: &quot;lower&quot;,        &quot;property-no-unknown&quot;: true,        &quot;rule-nested-empty-line-before&quot;: [ &quot;always-multi-line&quot;, {              except: [&quot;first-nested&quot;],              ignore: [&quot;after-comment&quot;],        } ],        &quot;rule-non-nested-empty-line-before&quot;: [ &quot;always-multi-line&quot;, {              ignore: [&quot;after-comment&quot;],        } ],        &quot;selector-attribute-brackets-space-inside&quot;: &quot;never&quot;,        &quot;selector-attribute-operator-space-after&quot;: &quot;never&quot;,        &quot;selector-attribute-operator-space-before&quot;: &quot;never&quot;,        &quot;selector-combinator-space-after&quot;: &quot;always&quot;,        &quot;selector-combinator-space-before&quot;: &quot;always&quot;,        &quot;selector-descendant-combinator-no-non-space&quot;: true,        &quot;selector-list-comma-newline-after&quot;: &quot;always&quot;,        &quot;selector-list-comma-space-before&quot;: &quot;never&quot;,        &quot;selector-max-empty-lines&quot;: 0,        &quot;selector-pseudo-class-case&quot;: &quot;lower&quot;,        &quot;selector-pseudo-class-no-unknown&quot;: true,           &quot;selector-pseudo-class-parentheses-space-inside&quot;: &quot;never&quot;,        &quot;selector-pseudo-element-case&quot;: &quot;lower&quot;,        &quot;selector-pseudo-element-colon-notation&quot;: &quot;double&quot;,        &quot;selector-pseudo-element-no-unknown&quot;: true,        &quot;selector-type-case&quot;: &quot;lower&quot;,        &quot;selector-type-no-unknown&quot;: true,        &quot;shorthand-property-no-redundant-values&quot;: true,        &quot;string-no-newline&quot;: true,        &quot;unit-case&quot;: &quot;lower&quot;,        &quot;unit-no-unknown&quot;: true,        &quot;value-list-comma-newline-after&quot;: &quot;always-multi-line&quot;,        &quot;value-list-comma-space-after&quot;: &quot;always-single-line&quot;,        &quot;value-list-comma-space-before&quot;: &quot;never&quot;,        &quot;value-list-max-empty-lines&quot;: 0,      },}</code></pre>]]></content>
      
      
    </entry>
    
    <entry>
      <title>web学习笔记06-stylelint初探</title>
      <link href="/2016/09/27/web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006-stylelint%E5%88%9D%E6%8E%A2/"/>
      <url>/2016/09/27/web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006-stylelint%E5%88%9D%E6%8E%A2/</url>
      <content type="html"><![CDATA[<p><strong>&#160;&#160;&#160;&#160;最近呢，公司在准备新项目的开发，前期开始准备很多将来用到的东西，前两天刚在研究vue.js,有空补上一篇文章讲讲我在vue.js里面的小感想，今天开始研究新的stylelint，一个用来标准化css和scss代码的工具吧算是。这篇文章也基本上算是一个引导式的，没有研究的很深，在将来的应用过程中，遇到些什么有意思的事情，以后也会补上来，这篇呢就暂且只是对stylelint进行一个简单的介绍，和简单的应用，具体的配合一些别的技术的应用我还是要摸索，我这就跟读书笔记一样，记一下大体的内容，具体的东西还是需要大家去官网看英文文档。stylelint其实还是挺有意思的一个东西。</strong></p><h2 id="stylelint-初步了解"><a href="#stylelint-初步了解" class="headerlink" title="stylelint 初步了解"></a>stylelint 初步了解</h2><p>&#160;&#160;&#160;&#160;团队合作的时候，编写代码总会出现各种各样的问题，尤其是在样式的编写中，大量的css和scss代码书写中，或多或少会出现问题，这个时候在查找问题的来源的时候，总会浪费很多时间。</p><p>&#160;&#160;&#160;&#160;或者有时候呢，会编写出一些带有自己个人风格的样式代码，偶尔夹杂着一些自己写的一些小错误在其中，当时并未发现，之后随着时间的推移，代码库里的代码量的增多，在团队合作中，同事使用你的代码的时候或多或少的出现了问题，又或者是使用了错误的代码风格，导致给后期优化修改时带来了诸多不便。</p><p>&#160;&#160;&#160;&#160;这个时候呢，就需要一个可以检查出自己代码或者格式出现问题的工具了。跟js等代码一样，css也需要检查。当然，css检查代码的工具已经有很多出现了，不过我们这次呢，研究的是可以检查css和scss的stylelint。</p><p>&#160;&#160;&#160;&#160;审查有什么作用呢？审查是一个检查代码是否符合编程规范以及查找代码错误的过程，如果要做个比喻，那么它就是编程语言的拼写检查工具。代码审查可以帮助独立开发者更好的维护代码，但它更大的能力是帮助团队维护代码。</p><h2 id="stylelint-简介"><a href="#stylelint-简介" class="headerlink" title="stylelint 简介"></a>stylelint 简介</h2><p>&#160;&#160;&#160;&#160;<strong>stylelint</strong> 是一个基于 <strong>Javascript</strong> 的代码审查工具，它易于扩展，支持最新的 CSS 语法，也理解类似 CSS 的语法。此外，因为它是基于 JavaScript，所以比起 Ruby 开发的 scss-lint 速度更快。</p><p>&#160;&#160;&#160;&#160;<strong>stylelint</strong> 是一个强大和现代的 <strong>CSS</strong> 审查工具，有助于开发者推行统一的代码规范，避免样式错误。<strong>stylelint</strong> 由 <strong>PostCSS</strong> 提供技术支持，所以它也可以理解 <strong>PostCSS</strong> 解析的语法，比如 <strong>SCSS</strong>。</p><p>&#160;&#160;&#160;&#160;<strong>PostCSS</strong> 是一个使用 <strong>JS</strong> 解析样式的插件集合，它可以用来审查 <strong>CSS</strong> 代码，也可以增强 <strong>CSS</strong> 的语法（比如变量和混合宏），还支持未来的 <strong>CSS</strong> 语法、行内图片等等。</p><p>&#160;&#160;&#160;&#160;<strong>PostCSS</strong> 的哲学是专注于处理一件事，并做到极致，目前它已经有了 200 多个插件，由于它们都是基于 <strong>JavaScript</strong> 编写的，所以运行速度非常快。</p><h2 id="stylelint-作用"><a href="#stylelint-作用" class="headerlink" title="stylelint 作用"></a>stylelint 作用</h2><h3 id="错误捕获"><a href="#错误捕获" class="headerlink" title="错误捕获"></a>错误捕获</h3><p>&#160;&#160;&#160;&#160;有些stylelint规则旨在找出明显的错误，如拼写错误或者由于你的心烦意乱或者睡眼惺忪时制造的疏漏。例如，你可以禁止空白块，无效的十六进制值，重复的选择器，未命名的动画名称和错误的线性渐变的语法。</p><p>&#160;&#160;&#160;&#160;其它的规则都是尽自己最大的努力捕捉更细微的错误。 这里有一条规则: 当你使用可以覆盖其属性同行(如<code>margin-top</code>)的速记属性时(如<code>margin</code>)，就会发出警告，因为这可能是由于你的疏忽造成的。另外，还有一种规则会警告你:当出现混乱局面时，如规则Ａ出现在规则B之前，但是实际上覆盖了规则B，因为规则A的的选择器具有更高的优先级(如，规则A为<code>.foo.bar{···}</code>，规则B为 <code>.foo{···}</code>)。这是一种十分棘手的情况。</p><p>&#160;&#160;&#160;&#160;还有一种规则使用了PostCSS的doiuse插件，用于检查你的浏览器是否支持此样式。另外一种则使用了css-colorguard插件用于提示颜色的相似性，以免造成你的混乱使用。(请注意: 这是基于PostCSS之上的stylelint的主要优势之一：相比于其它PostCSS 插件，用很少的努力，stylelint就可以进行提示。)</p><h3 id="强制执行最佳实践"><a href="#强制执行最佳实践" class="headerlink" title="强制执行最佳实践"></a>强制执行最佳实践</h3><p>&#160;&#160;&#160;&#160;如果你在样式表中使用了系统方法，或者对你的代码设置了一个样式指南，你应该取缔这些模式了。<strong>stylelint</strong>已经提供了这些功能。</p><p>&#160;&#160;&#160;&#160;首先，你需要狠狠地控制你的选择器。使用<strong>stylelint</strong>，你可以禁止超过一定特异性的选择器或者在嵌套深度上设置限制。你可以禁止类别选择器(例如没有 id的选择器），并对其余的选择器使用正则表达式进行命名约定。</p><p>&#160;&#160;&#160;&#160;你可以禁止<strong>!important</strong>的使用，或者你的浏览器并不支持的<strong>brower</strong> <strong>hacks</strong>。如果你使用<strong>Autoprefixer</strong>(或者说你应该使用),你可以禁止在源样式表中使用供应商前缀。</p><p>&#160;&#160;&#160;&#160;如果你想要更加严谨 – 你可以花费一些时间在配置上，以保证绝对的一致性 – 你可以强制执行样式表属性的顺序，并为黑名单，白名单提供属性，值，函数还有单位。</p><h3 id="执行代码样式的约定"><a href="#执行代码样式的约定" class="headerlink" title="执行代码样式的约定"></a>执行代码样式的约定</h3><p>&#160;&#160;&#160;&#160;stylelint具有自动执行代码样式的约定，所以你和你的队友无需主动设置。我们致力于使这些规则更加全面灵活。</p><p>&#160;&#160;&#160;&#160;这些规则主要针对于空格，但是同样针对于其它的细节，如；引号，大小写字母，在小数前写零，使用关键字以及拼读出值等等。</p><p>&#160;&#160;&#160;&#160;梦想你和你的队友可以建立一个格式约定(例如我们始终在声明冒号之后留有一个空格)，并在你的stylelint配置中进行修改，之后你们就不会为此再次讨论。让其执行于机器王国。</p><h3 id="制定以及扩展一切"><a href="#制定以及扩展一切" class="headerlink" title="制定以及扩展一切"></a>制定以及扩展一切</h3><p>&#160;&#160;&#160;&#160;Nicholas Zakas，ESLint(以及 CSS Lint)的创作者，写到ESLint的成功在于它的扩展性。stylelint试图遵循ESLint的领先优势，并且提供给CSS 作者一个linter，同样具有扩展性。</p><p>&#160;&#160;&#160;&#160;你可以书写并且发布自己的规则插件。现在已经具有了一大堆可以使用的;并且我们渴望看到别人的优秀插件。</p><p>&#160;&#160;&#160;&#160;配置是可扩展的，因此可以共享。至于插件，我们从ESLint了解了这一功能的价值性。检查其中包括WordPress和SUITCSS配置的，并且已经公布的。</p><p>&#160;&#160;&#160;&#160;如果你不喜欢 stylelint 的内置提示，你可以手工创建属于你自己的风格，甚至可以为你的组织进行创建。你还可以自定义用于提供警告信息的规则。</p><p>&#160;&#160;&#160;&#160;使用stylelint的API，你可以创建文本编译器的插件，并进行测试使stylelint 融入到你的工作流的每个方面。</p><h2 id="stylelint-使用"><a href="#stylelint-使用" class="headerlink" title="stylelint 使用"></a>stylelint 使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code>npm install -g stylelint</code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="创建配置文件（三种方式）"><a href="#创建配置文件（三种方式）" class="headerlink" title="创建配置文件（三种方式）"></a>创建配置文件（三种方式）</h4><p>&#160;&#160;&#160;&#160;1.<code>.stylelintrc</code></p><pre><code>{    &quot;rules&quot;: {        &quot;declaration-block-trailing-semicolon&quot;: null    }}</code></pre><p>&#160;&#160;&#160;&#160;2.<code>stylelint.config.js</code></p><pre><code>module.exports = {    &quot;rules&quot;: {        &quot;declaration-block-trailing-semicolon&quot;: null    }}</code></pre><p>&#160;&#160;&#160;&#160;3.<code>package.json</code></p><pre><code>{    ......    &quot;stylelint&quot;: {        &quot;rules&quot;: {            &quot;color-hex-case&quot;: &quot;lower&quot;        }    }}</code></pre><h3 id="官方配置方法"><a href="#官方配置方法" class="headerlink" title="官方配置方法"></a>官方配置方法</h3><p>&#160;&#160;&#160;&#160;1.本地安装：</p><pre><code>npm install stylelint-config-standard</code></pre><p>&#160;&#160;&#160;&#160;2.在配置文件<code>.stylelintrc</code>中配置</p><pre><code>{    &quot;extends&quot;: &quot;stylelint-config-standard&quot;}</code></pre><p>&#160;&#160;&#160;&#160;3.添加或修改标准配置中的内容</p><pre><code>{    &quot;extends&quot;: &quot;stylelint-config-standard&quot;,    &quot;rules&quot;: {        &quot;declaration-block-trailing-semicolon&quot;: null    }}</code></pre><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>&#160;&#160;&#160;&#160;我在scss文件里面写</p><pre><code>$primary-color: #ff3253;div{    background-color: #0859BD;}</code></pre><p>&#160;&#160;&#160;&#160;在配置文件中添加</p><pre><code>&quot;color-no-hex&quot;:true</code></pre><p>&#160;&#160;&#160;&#160;命令行运行</p><pre><code>stylelint yourfile.css//stylelint &quot;src/style/scss/base.scss&quot;</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/1062695-170bd4fc19297dfe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行"></p><h3 id="具体demo测试"><a href="#具体demo测试" class="headerlink" title="具体demo测试"></a>具体demo测试</h3><h4 id="1-创建工程和文件"><a href="#1-创建工程和文件" class="headerlink" title="1.创建工程和文件"></a>1.创建工程和文件</h4><p><img src="http://upload-images.jianshu.io/upload_images/1062695-580e01953c0784ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建工程和文件"></p><h4 id="2-编写简单的代码"><a href="#2-编写简单的代码" class="headerlink" title="2.编写简单的代码"></a>2.编写简单的代码</h4><p><strong>index.html</strong></p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;index&lt;/title&gt;    &lt;link href=&quot;index.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&apos;root&apos;&gt;        &lt;p class=&quot;nihao&quot;&gt;nihao&lt;/p&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><strong>index.css</strong></p><pre><code>#root{    background-color: #0859BD;}.nihao{    font-size: 18px;    color: #fff000;}</code></pre><h4 id="3-创建package-json文件"><a href="#3-创建package-json文件" class="headerlink" title="3.创建package.json文件"></a>3.创建package.json文件</h4><pre><code>npm init</code></pre><h4 id="4-安装stylelint"><a href="#4-安装stylelint" class="headerlink" title="4.安装stylelint"></a>4.安装stylelint</h4><pre><code>npm install stylelint-config-standard</code></pre><h4 id="5-创建stylelint-config-js文件，编写规则"><a href="#5-创建stylelint-config-js文件，编写规则" class="headerlink" title="5.创建stylelint.config.js文件，编写规则"></a>5.创建stylelint.config.js文件，编写规则</h4><pre><code>module.exports = {    &quot;rules&quot;: {        &quot;color-no-hex&quot;:true//不允许十六进制颜色    }}</code></pre><h4 id="6-运行测试"><a href="#6-运行测试" class="headerlink" title="6.运行测试"></a>6.运行测试</h4><pre><code>stylelint index.css</code></pre><h4 id="7-根据结果修改"><a href="#7-根据结果修改" class="headerlink" title="7.根据结果修改"></a>7.根据结果修改</h4><pre><code>index.css 2:23  ✖  Unexpected hex color &quot;#0859BD&quot;   color-no-hex 6:12  ✖  Unexpected hex color &quot;#fff000&quot;   color-no-hex</code></pre><p>这就算是一个简单的demo实现了。</p><h2 id="stylelint-规则"><a href="#stylelint-规则" class="headerlink" title="stylelint 规则"></a>stylelint 规则</h2><p><a href="https://github.com/stylelint/stylelint/blob/master/docs/user-guide/rules.md" target="_blank" rel="noopener">规则rules</a><br>规则有一百多条，我就不在这一一列举了，以后有时间的话我会加上的。主要是目前用这个的人没有想象中的那么多，我在这基本上算是给一些像我一样的新手做个指引，少走些弯路，关于stylelint主要的东西，还是要看官网英文文档。别的地方相关的文章暂时还不算多。</p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="http://www.w3cplus.com/workflow/How-to-lint-your-css-with-stylelint.html" target="_blank" rel="noopener">使用stylelint对CSS/Sass做代码审查</a>  </p><p><a href="http://www.jb51.net/article/83180.htm" target="_blank" rel="noopener">使用 stylelint检查CSS_StyleLint</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>web学习笔记05-EsLint规则与配置</title>
      <link href="/2016/09/22/web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B005-EsLint%E8%A7%84%E5%88%99%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2016/09/22/web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B005-EsLint%E8%A7%84%E5%88%99%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h1 id="1-EsLint规则"><a href="#1-EsLint规则" class="headerlink" title="1.EsLint规则"></a>1.EsLint规则</h1><h5 id="160-160-160-160-ESLint-Rules"><a href="#160-160-160-160-ESLint-Rules" class="headerlink" title="&#160;&#160;&#160;&#160;ESLint Rules"></a>&#160;&#160;&#160;&#160;<a href="http://eslint.cn/docs/rules/" target="_blank" rel="noopener">ESLint Rules</a></h5><p>&#160;&#160;&#160;&#160;所有的规则默认都是禁用的。在配置文件中，使用 <code>&quot;extends&quot;: &quot;eslint:recommended&quot;</code> 来启用推荐的规则，报告一些常见的问题，在下文中这些推荐的规则都带有一个✔️标记。</p><h3 id="Possible-Errors"><a href="#Possible-Errors" class="headerlink" title="Possible Errors"></a>Possible Errors</h3><p>下面的规则指出了你可能犯错误的地方。</p><ul><li>comma-dangle: 要求或禁止末尾逗号</li><li>no-cond-assign: 禁止条件表达式中出现赋值操作符</li><li>no-console: 禁用 console</li><li>no-constant-condition: 禁止在条件中使用常量表达式</li><li>no-control-regex: 禁止在正则表达式中使用控制字符</li><li>no-debugger: 禁用 debugger</li><li>no-dupe-args: 禁止 function 定义中出现重名参数</li><li>no-dupe-keys: 禁止对象字面量中出现重复的 key</li><li>no-duplicate-case: 禁止重复的 case 标签</li><li>no-empty: 禁止空语句块</li><li>no-empty-character-class: 禁止在正则表达式中使用空字符集</li><li>no-ex-assign: 禁止对 catch 子句的参数重新赋值</li><li>no-extra-boolean-cast: 禁止不必要的布尔转换</li><li>no-extra-parens: 禁止不必要的括号</li><li>no-extra-semi: 禁止不必要的分号</li><li>no-func-assign: 禁止对 function 声明重新赋值</li><li>no-inner-declarations: 禁止在嵌套的块中出现 function 或 var 声明</li><li>no-invalid-regexp: 禁止 RegExp 构造函数中无效的正则表达式字符串</li><li>no-irregular-whitespace: 禁止在字符串和注释之外不规则的空白</li><li>no-negated-in-lhs: 禁止在 in 表达式中出现否定的左操作数</li><li>no-obj-calls: 禁止把全局对象 (Math 和 JSON) 作为函数调用</li><li>no-prototype-builtins: 禁止直接使用 Object.prototypes 的内置属性</li><li>no-regex-spaces: 禁止正则表达式字面量中出现多个空格</li><li>no-sparse-arrays: 禁用稀疏数组</li><li>no-unexpected-multiline: 禁止出现令人困惑的多行表达式</li><li>no-unreachable: 禁止在return、throw、continue 和 break语句之后出现不可达代码</li><li>no-unsafe-finally: 禁止在 finally 语句块中出现控制流语句</li><li>use-isnan: 要求使用 isNaN() 检查 NaN</li><li>valid-jsdoc: 强制使用有效的 JSDoc 注释</li><li>valid-typeof: 强制 typeof 表达式与有效的字符串进行比较</li></ul><h3 id="Best-Practices"><a href="#Best-Practices" class="headerlink" title="Best Practices"></a>Best Practices</h3><p>这些规则是关于最佳实践的，帮助你避免一些问题：</p><ul><li>accessor-pairs: 强制 getter 和 setter 在对象中成对出现</li><li>array-callback-return: 强制数组方法的回调函数中有 return 语句</li><li>block-scoped-var: 强制把变量的使用限制在其定义的作用域范围内</li><li>complexity: 指定程序中允许的最大环路复杂度</li><li>consistent-return: 要求 return 语句要么总是指定返回的值，要么不指定</li><li>curly: 强制所有控制语句使用一致的括号风格</li><li>default-case: 要求 switch 语句中有 default 分支</li><li>dot-location: 强制在点号之前和之后一致的换行</li><li>dot-notation: 强制在任何允许的时候使用点号</li><li>eqeqeq: 要求使用 === 和 !==</li><li>guard-for-in: 要求 for-in 循环中有一个 if 语句</li><li>no-alert: 禁用 alert、confirm 和 prompt</li><li>no-caller: 禁用 arguments.caller 或 arguments.callee</li><li>no-case-declarations: 不允许在 case 子句中使用词法声明</li><li>no-div-regex: 禁止除法操作符显式的出现在正则表达式开始的位置</li><li>no-else-return: 禁止 if 语句中有 return 之后有 else</li><li>no-empty-function: 禁止出现空函数</li><li>no-empty-pattern: 禁止使用空解构模式</li><li>no-eq-null: 禁止在没有类型检查操作符的情况下与 null 进行比较</li><li>no-eval: 禁用 eval()</li><li>no-extend-native: 禁止扩展原生类型</li><li>no-extra-bind: 禁止不必要的 .bind() 调用</li><li>no-extra-label: 禁用不必要的标签</li><li>no-fallthrough: 禁止 case 语句落空</li><li>no-floating-decimal: 禁止数字字面量中使用前导和末尾小数点</li><li>no-implicit-coercion: 禁止使用短符号进行类型转换</li><li>no-implicit-globals: 禁止在全局范围内使用 var 和命名的 function 声明</li><li>no-implied-eval: 禁止使用类似 eval() 的方法</li><li>no-invalid-this: 禁止 this 关键字出现在类和类对象之外</li><li>no-iterator: 禁用 <strong>iterator</strong> 属性</li><li>no-labels: 禁用标签语句</li><li>no-lone-blocks: 禁用不必要的嵌套块</li><li>no-loop-func: 禁止在循环中出现 function 声明和表达式</li><li>no-magic-numbers: 禁用魔术数字</li><li>no-multi-spaces: 禁止使用多个空格</li><li>no-multi-str: 禁止使用多行字符串</li><li>no-native-reassign: 禁止对原生对象赋值</li><li>no-new: 禁止在非赋值或条件语句中使用 new 操作符</li><li>no-new-func: 禁止对 Function 对象使用 new 操作符</li><li>no-new-wrappers: 禁止对 String，Number 和 Boolean 使用 new 操作符</li><li>no-octal: 禁用八进制字面量</li><li>no-octal-escape: 禁止在字符串中使用八进制转义序列</li><li>no-param-reassign: 不允许对 function 的参数进行重新赋值</li><li>no-proto: 禁用 <strong>proto</strong> 属性</li><li>no-redeclare: 禁止使用 var 多次声明同一变量</li><li>no-return-assign: 禁止在 return 语句中使用赋值语句</li><li>no-script-url: 禁止使用 javascript: url</li><li>no-self-assign: 禁止自我赋值</li><li>no-self-compare: 禁止自身比较</li><li>no-sequences: 禁用逗号操作符</li><li>no-throw-literal: 禁止抛出非异常字面量</li><li>no-unmodified-loop-condition: 禁用一成不变的循环条件</li><li>no-unused-expressions: 禁止出现未使用过的表达式</li><li>no-unused-labels: 禁用未使用过的标签</li><li>no-useless-call: 禁止不必要的 .call() 和 .apply()</li><li>no-useless-concat: 禁止不必要的字符串字面量或模板字面量的连接</li><li>no-useless-escape: 禁用不必要的转义字符</li><li>no-void: 禁用 void 操作符</li><li>no-warning-comments: 禁止在注释中使用特定的警告术语</li><li>no-with: 禁用 with 语句</li><li>radix: 强制在parseInt()使用基数参数</li><li>vars-on-top: 要求所有的 var 声明出现在它们所在的作用域顶部</li><li>wrap-iife: 要求 IIFE 使用括号括起来</li><li>yoda: 要求或禁止 “Yoda” 条件</li></ul><h3 id="Strict-Mode"><a href="#Strict-Mode" class="headerlink" title="Strict Mode"></a>Strict Mode</h3><p>该规则与使用严格模式和严格模式指令有关：</p><ul><li>strict: 要求或禁止使用严格模式指令</li></ul><h3 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h3><p>这些规则与变量声明有关：</p><ul><li>init-declarations: 要求或禁止 var 声明中的初始化</li><li>no-catch-shadow: 不允许 catch 子句的参数与外层作用域中的变量同名</li><li>no-delete-var: 禁止删除变量</li><li>no-label-var: 不允许标签与变量同名</li><li>no-restricted-globals: 禁用特定的全局变量</li><li>no-shadow: 禁止 var 声明 与外层作用域的变量同名</li><li>no-shadow-restricted-names: 禁止覆盖受限制的标识符</li><li>no-undef: 禁用未声明的变量，除非它们在 /<em>global </em>/ 注释中被提到</li><li>no-undef-init: 禁止将变量初始化为 undefined</li><li>no-undefined: 禁止将 undefined 作为标识符</li><li>no-unused-vars: 禁止出现未使用过的变量</li><li>no-use-before-define: 不允许在变量定义之前使用它们</li></ul><h3 id="Node-js-and-CommonJS"><a href="#Node-js-and-CommonJS" class="headerlink" title="Node.js and CommonJS"></a>Node.js and CommonJS</h3><p>这些规则是关于Node.js 或 在浏览器中使用CommonJS 的：</p><ul><li>callback-return: require return statements after callbacks</li><li>global-require: 要求 require() 出现在顶层模块作用域中</li><li>handle-callback-err: 要求回调函数中有容错处理</li><li>no-mixed-requires: 禁止混合常规 var 声明和 require 调用</li><li>no-new-require: 禁止调用 require 时使用 new 操作符</li><li>no-path-concat: 禁止对 <strong>dirname 和 </strong>filename进行字符串连接</li><li>no-process-env: 禁用 process.env</li><li>no-process-exit: 禁用 process.exit()</li><li>no-restricted-modules: 禁用指定的通过 require 加载的模块</li><li>no-sync: 禁用同步方法</li></ul><h3 id="Stylistic-Issues"><a href="#Stylistic-Issues" class="headerlink" title="Stylistic Issues"></a>Stylistic Issues</h3><p>这些规则是关于风格指南的，而且是非常主观的：</p><ul><li>array-bracket-spacing: 强制数组方括号中使用一致的空格</li><li>block-spacing: 强制在单行代码块中使用一致的空格</li><li>brace-style: 强制在代码块中使用一致的大括号风格</li><li>camelcase: 强制使用骆驼拼写法命名约定</li><li>comma-spacing: 强制在逗号前后使用一致的空格</li><li>comma-style: 强制使用一致的逗号风格</li><li>computed-property-spacing: 强制在计算的属性的方括号中使用一致的空格</li><li>consistent-this: 当获取当前执行环境的上下文时，强制使用一致的命名</li><li>eol-last: 强制文件末尾至少保留一行空行</li><li>func-names: 强制使用命名的 function 表达式</li><li>func-style: 强制一致地使用函数声明或函数表达式</li><li>id-blacklist: 禁止使用指定的标识符</li><li>id-length: 强制标识符的最新和最大长度</li><li>id-match: 要求标识符匹配一个指定的正则表达式</li><li>indent: 强制使用一致的缩进</li><li>jsx-quotes: 强制在 JSX 属性中一致地使用双引号或单引号</li><li>key-spacing: 强制在对象字面量的属性中键和值之间使用一致的间距</li><li>keyword-spacing: 强制在关键字前后使用一致的空格</li><li>linebreak-style: 强制使用一致的换行风格</li><li>lines-around-comment: 要求在注释周围有空行</li><li>max-depth: 强制可嵌套的块的最大深度</li><li>max-len: 强制一行的最大长度</li><li>max-lines: 强制最大行数</li><li>max-nested-callbacks: 强制回调函数最大嵌套深度</li><li>max-params: 强制 function 定义中最多允许的参数数量</li><li>max-statements: 强制 function 块最多允许的的语句数量</li><li>max-statements-per-line: 强制每一行中所允许的最大语句数量</li><li>new-cap: 要求构造函数首字母大写</li><li>new-parens: 要求调用无参构造函数时有圆括号</li><li>newline-after-var: 要求或禁止 var 声明语句后有一行空行</li><li>newline-before-return: 要求 return 语句之前有一空行</li><li>newline-per-chained-call: 要求方法链中每个调用都有一个换行符</li><li>no-array-constructor: 禁止使用 Array 构造函数</li><li>no-bitwise: 禁用按位运算符</li><li>no-continue: 禁用 continue 语句</li><li>no-inline-comments: 禁止在代码行后使用内联注释</li><li>no-lonely-if: 禁止 if 作为唯一的语句出现在 else 语句中</li><li>no-mixed-operators: 禁止混合使用不同的操作符</li><li>no-mixed-spaces-and-tabs: 不允许空格和 tab 混合缩进</li><li>no-multiple-empty-lines: 不允许多个空行</li><li>no-negated-condition: 不允许否定的表达式</li><li>no-nested-ternary: 不允许使用嵌套的三元表达式</li><li>no-new-object: 禁止使用 Object 的构造函数</li><li>no-plusplus: 禁止使用一元操作符 ++ 和 –</li><li>no-restricted-syntax: 禁止使用特定的语法</li><li>no-spaced-func: 禁止 function 标识符和括号之间出现空格</li><li>no-ternary: 不允许使用三元操作符</li><li>no-trailing-spaces: 禁用行尾空格</li><li>no-underscore-dangle: 禁止标识符中有悬空下划线</li><li>no-unneeded-ternary: 禁止可以在有更简单的可替代的表达式时使用三元操作符</li><li>no-whitespace-before-property: 禁止属性前有空白</li><li>object-curly-newline: 强制花括号内换行符的一致性</li><li>object-curly-spacing: 强制在花括号中使用一致的空格</li><li>object-property-newline: 强制将对象的属性放在不同的行上</li><li>one-var: 强制函数中的变量要么一起声明要么分开声明</li><li>one-var-declaration-per-line: 要求或禁止在 var 声明周围换行</li><li>operator-assignment: 要求或禁止在可能的情况下要求使用简化的赋值操作符</li><li>operator-linebreak: 强制操作符使用一致的换行符</li><li>padded-blocks: 要求或禁止块内填充</li><li>quote-props: 要求对象字面量属性名称用引号括起来</li><li>quotes: 强制使用一致的反勾号、双引号或单引号</li><li>require-jsdoc: 要求使用 JSDoc 注释</li><li>semi: 要求或禁止使用分号而不是 ASI</li><li>semi-spacing: 强制分号之前和之后使用一致的空格</li><li>sort-vars: 要求同一个声明块中的变量按顺序排列</li><li>space-before-blocks: 强制在块之前使用一致的空格</li><li>space-before-function-paren: 强制在 function的左括号之前使用一致的空格</li><li>space-in-parens: 强制在圆括号内使用一致的空格</li><li>space-infix-ops: 要求操作符周围有空格</li><li>space-unary-ops: 强制在一元操作符前后使用一致的空格</li><li>spaced-comment: 强制在注释中 // 或 /* 使用一致的空格</li><li>unicode-bom: 要求或禁止 Unicode BOM</li><li>wrap-regex: 要求正则表达式被括号括起来</li></ul><h3 id="ECMAScript-6"><a href="#ECMAScript-6" class="headerlink" title="ECMAScript 6"></a>ECMAScript 6</h3><p>这些规则只与 ES6 有关, 即通常所说的 ES2015：</p><ul><li>arrow-body-style: 要求箭头函数体使用大括号</li><li>arrow-parens: 要求箭头函数的参数使用圆括号</li><li>arrow-spacing: 强制箭头函数的箭头前后使用一致的空格</li><li>constructor-super: 要求在构造函数中有 super() 的调用</li><li>generator-star-spacing: 强制 generator 函数中 * 号周围使用一致的空格</li><li>no-class-assign: 禁止修改类声明的变量</li><li>no-confusing-arrow: disallow arrow functions where they could be confused with comparisons</li><li>no-const-assign: 禁止修改 const 声明的变量</li><li>no-dupe-class-members: 禁止类成员中出现重复的名称</li><li>no-duplicate-imports: disallow duplicate module imports</li><li>no-new-symbol: disallow new operators with the Symbol object</li><li>no-restricted-imports: disallow specified modules when loaded by import</li><li>no-this-before-super: 禁止在构造函数中，在调用 super() 之前使用 this 或 super</li><li>no-useless-computed-key: disallow unnecessary computed property keys in object literals</li><li>no-useless-constructor: 禁用不必要的构造函数</li><li>no-useless-rename: disallow renaming import, export, and destructured assignments to the same name</li><li>no-var: 要求使用 let 或 const 而不是 var</li><li>object-shorthand: 要求或禁止对象字面量中方法和属性使用简写语法</li><li>prefer-arrow-callback: 要求使用箭头函数作为回调</li><li>prefer-const: 要求使用 const 声明那些声明后不再被修改的变量</li><li>prefer-reflect: 要求在合适的地方使用 Reflect 方法</li><li>prefer-rest-params: require rest parameters instead of arguments</li><li>prefer-spread: 要求使用扩展运算符而非 .apply()</li><li>prefer-template: 要求使用模板字面量而非字符串连接</li><li>require-yield: 要求generator 函数内有 yield</li><li>rest-spread-spacing: enforce spacing between rest and spread operators and their expressions</li><li>sort-imports: 强制模块内的 import 排序</li><li>template-curly-spacing: 要求或禁止模板字符串中的嵌入表达式周围空格的使用</li><li>yield-star-spacing: 强制在 yield<em> 表达式中 </em> 周围使用空格</li></ul><h1 id="2-EsLint配置"><a href="#2-EsLint配置" class="headerlink" title="2.EsLint配置"></a>2.EsLint配置</h1><h2 id="Configuring-ESLint-配置ESLint"><a href="#Configuring-ESLint-配置ESLint" class="headerlink" title="Configuring ESLint(配置ESLint)"></a>Configuring ESLint(配置ESLint)</h2><p>&#160;&#160;&#160;&#160;ESlint 被设计为是完全可配置的，这意味着你可以关闭每一个规则，只运行基本语法验证，或混合和匹配绑定的规则和自定义规则，以让 ESLint 更适合于你的项目。有两种主要的方式来配置 ESLint：</p><ul><li>Configuration Comments: 使用 JavaScript 注释把配置信息直接嵌入到一个文件。</li><li>Configuration Files: 使用 JavaScript、JSON 或者 YAML 文件为整个目录和它的子目录指定配置信息。可以用 .eslintrc.* 文件或者在 package.json 文件里的 eslintConfig 字段这两种方式进行配置，ESLint 会查找和自动读取它们，再者，你可以在命令行指定一个配置文件。</li></ul><p>有很多信息可以配置：</p><ul><li>Environment: 指定脚本的运行环境。每种环境都有一组特定的预定义全局变量。</li><li>Globals: 脚本在执行期间访问的额外的全局变量</li><li>Rules: 启用的规则及各自的错误级别</li></ul><p>所有这些选项让你可以细粒度地控制 ESLint 如何对待你的代码。</p><h2 id="Specifying-Parser-Options-指定解析器选项"><a href="#Specifying-Parser-Options-指定解析器选项" class="headerlink" title="Specifying Parser Options(指定解析器选项)"></a>Specifying Parser Options(指定解析器选项)</h2><p>&#160;&#160;&#160;&#160;ESLint 允许你指定你想要支持的 JavaScript 语言选项。默认情况下，ESLint 支持 ECMAScript 5 语法。你可以通过使用解析器选项让它支持 ECMAScript 6 和 7 以及 JSX。</p><p>&#160;&#160;&#160;&#160;请注意，对 JSX 语法的支持不用于对 React 的支持。React 适用于特定 ESLint 无法识别的 JSX 语法。如果你正在使用 React 和 想要 React 语义，我们推荐你使用 eslint-plugin-react。</p><p>&#160;&#160;&#160;&#160;在 <code>.eslintrc.*</code> 文件使用<code>parserOptions</code> 属性设置解析器选项。可用的选项有：</p><ul><li><code>ecmaVersion</code> - 设置为 3， 5 (默认)， 6 或 7 指定你想要使用的 ECMAScript 版本。</li><li><code>sourceType</code> - 设置为 <code>&quot;script&quot;</code> (默认) 或 <code>&quot;module&quot;</code>（如果你的代码是 ECMAScript 模块)。</li><li><code>ecmaFeatures</code> - 这是个对象，表示你想使用的额外的语言特性:<ul><li><code>globalReturn</code> - 允许在全局作用域下使用 return 语句</li><li><code>impliedStrict</code> - 启用全局 strict mode (如果 ecmaVersion 是 5 或更高)</li><li><code>jsx</code> - 启用 JSX</li><li><code>experimentalObjectRestSpread</code> - 启用对实验性的 <code>object rest/spread properties</code> 的支持。(重要：这是一个实验性的功能,在未来可能会改变明显。 建议你写的规则 不要依赖该功能，除非当它发生改变时你愿意承担维护成本。)</li></ul></li></ul><p>&#160;&#160;&#160;&#160;<code>.eslintrc.json</code> 文件示例：</p><pre><code>{    &quot;parserOptions&quot;: {        &quot;ecmaVersion&quot;: 6,        &quot;sourceType&quot;: &quot;module&quot;,        &quot;ecmaFeatures&quot;: {            &quot;jsx&quot;: true        }    },    &quot;rules&quot;: {        &quot;semi&quot;: 2    }}</code></pre><p>&#160;&#160;&#160;&#160;设置解析器选项帮助 ESLint 确定什么是解析错误，所有语言选项默认都是 false。</p><h2 id="Specifying-Parser-指定解析器"><a href="#Specifying-Parser-指定解析器" class="headerlink" title="Specifying Parser(指定解析器)"></a>Specifying Parser(指定解析器)</h2><p>&#160;&#160;&#160;&#160;ESLint 默认使用Espree作为其解析器，你可以在配置文件中指定一个不同的解析器，只要该解析器符合下列要求：</p><ul><li>它必须是本地安装的一个 npm 模块。</li><li>它必须有兼容 Esprima 的接口（它必须输出一个 parse() 方法）</li><li>它必须产出兼容 Esprima 的 AST 和 token 对象。</li></ul><p>&#160;&#160;&#160;&#160;注意，即使满足这些兼容性，也不能保证一个外部解析器可以与 ESLint 正常工作，ESLint 也不会修复与其它解析器不兼容的相关 bug。</p><p>&#160;&#160;&#160;&#160;为了表明使用该 npm 模块作为你的解析器，你需要在你的 .eslintrc 文件里指定 parser 选项。例如，下面的配置指定了 Esprima 作为解析器：</p><pre><code>{    &quot;parser&quot;: &quot;esprima&quot;,    &quot;rules&quot;: {        &quot;semi&quot;: &quot;error&quot;    }}</code></pre><p>&#160;&#160;&#160;&#160;以下解析器与 ESLint 兼容：</p><ul><li>Esprima</li><li>Babel-ESLint - 对Babel解析器的包装使其与 ESLint 兼容。</li></ul><p>&#160;&#160;&#160;&#160;注意，当使用自定义解析器时，为了使 ESLint 在非 ECMAScript 5 特性下正常工作，配置属性 parserOptions 仍然是必须的。解析器被传入 parserOptions，可能会也可能不会使用它们来决定开启哪个特征。</p><h2 id="Specifying-Environments-指定的环境"><a href="#Specifying-Environments-指定的环境" class="headerlink" title="Specifying Environments(指定的环境)"></a>Specifying Environments(指定的环境)</h2><p>&#160;&#160;&#160;&#160;环境定义了预定义的全局变量。可用的环境有：</p><ul><li><code>browser</code> - browser 全局变量。</li><li><code>node</code> - Node.js 全局变量和 Node.js 作用域。</li><li><code>commonjs</code> - CommonJS 全局变量和 CommonJS 作用域 (仅为使用 Browserify/WebPack 写的只支持浏览器的代码)。</li><li><code>shared-node-browser</code> - Node 和 Browser 通用全局变量。</li><li><code>es6</code> - 支持除了modules所有 ECMAScript 6 特性。</li><li><code>worker</code> - web workers 全局变量。</li><li><code>amd</code> - 定义 require() 和 define() 作为像 amd 一样的全局变量。</li><li><code>mocha</code> - 添加所有的 Mocha 测试全局变量。</li><li><code>jasmine</code> - 添加所有的 Jasmine 版本 1.3 和 2.0 的测试全局变量。</li><li><code>jest</code> - Jest 全局变量。</li><li><code>phantomjs</code> - PhantomJS 全局变量。</li><li><code>protractor</code> - Protractor 全局变量。</li><li><code>qunit</code> - QUnit 全局变量。</li><li><code>jquery</code> - jQuery 全局变量。</li><li><code>prototypejs</code> - Prototype.js 全局变量。</li><li><code>shelljs</code> - ShellJS 全局变量。</li><li><code>meteor</code> - Meteor 全局变量。</li><li><code>mongo</code> - MongoDB 全局变量。</li><li><code>applescript</code> - AppleScript 全局变量。</li><li><code>nashorn</code> - Java 8 Nashorn 全局变量。</li><li><code>serviceworker</code> - Service Worker 全局变量。</li><li><code>atomtest</code> - Atom 测试全局变量。</li><li><code>embertest</code> - Ember 测试全局变量。</li><li><code>webextensions</code> - WebExtensions 全局变量。</li><li><code>greasemonkey</code> - GreaseMonkey 全局变量。</li></ul><p>&#160;&#160;&#160;&#160;这些环境并不是相互排斥的，所以你可以一次定义多个。</p><p>&#160;&#160;&#160;&#160;可以在一个文件里，在配置文件中或使用 –env 命令行来指定环境。</p><p>&#160;&#160;&#160;&#160;在你的 JavaScript 文件中使用注释来指定环境，格式如下：</p><pre><code>/*eslint-env node, mocha */</code></pre><p>该设置启用了 Node.js 和 Mocha 环境。</p><p>&#160;&#160;&#160;&#160;在配置文件里指定环境，使用 env，指定你想启用的环境，设置它们为 true。例如，以下示例启用了 browser 和 Node.js 的环境：</p><pre><code>{    &quot;env&quot;: {           &quot;browser&quot;: true,        &quot;node&quot;: true    }}</code></pre><p>或在 package.json 文件中：</p><pre><code>{    &quot;name&quot;: &quot;mypackage&quot;,    &quot;version&quot;: &quot;0.0.1&quot;,    &quot;eslintConfig&quot;: {        &quot;env&quot;: {            &quot;browser&quot;: true,            &quot;node&quot;: true        }    }}</code></pre><p>在 YAML 文件中：</p><pre><code>---      env:        browser: true        node: true</code></pre><p>&#160;&#160;&#160;&#160;如果你想在一个插件中使用一种环境，确保在<code>plugins</code>数组里指定插件名，插件名不带前缀，后跟一个<code>/</code>，紧随其后的是环境名称。例如：</p><pre><code>{    &quot;plugins&quot;: [&quot;example&quot;],    &quot;env&quot;: {        &quot;example/custom&quot;: true    }}</code></pre><p>或在 <code>package.json</code> 文件中</p><pre><code>{    &quot;name&quot;: &quot;mypackage&quot;,    &quot;version&quot;: &quot;0.0.1&quot;,    &quot;eslintConfig&quot;: {        &quot;plugins&quot;: [&quot;example&quot;],        &quot;env&quot;: {                &quot;example/custom&quot;: true        }    }}</code></pre><p>在 YAML 文件中：</p><pre><code>---      plugins:        - example      env:        example/custom: true</code></pre><h2 id="Specifying-Globals-指定全局"><a href="#Specifying-Globals-指定全局" class="headerlink" title="Specifying Globals(指定全局)"></a>Specifying Globals(指定全局)</h2><p>&#160;&#160;&#160;&#160;当访问未定义的变量时，no-undef 规则将发出警告。如果你想在一个文件里使用全局变量，推荐你定义这些全局变量，这样 ESLint 就不会发出警告了。你可以使用注释或在配置文件中定义全局变量。</p><p>&#160;&#160;&#160;&#160;在你的 JavaScript 文件中，用注释指定全局变量，格式如下：</p><pre><code>/* global var1, var2 */</code></pre><p>这里定义了两个全局变量：<code>var1</code> 和 <code>var2</code>。如果你想指定这些变量不应被重写（只读），你可以将它们设置为 false：</p><pre><code>/* global var1:false, var2:false */</code></pre><p>&#160;&#160;&#160;&#160;在配置文件里配置全局变量时，使用<code>globals</code>指出你要使用的全局变量。设置每个变量等于<code>true</code>允许变量被重写，或 <code>false</code>不允许被重写。比如：</p><pre><code>{    &quot;globals&quot;: {        &quot;var1&quot;: true,        &quot;var2&quot;: false    }}</code></pre><p>在 YAML 中：</p><pre><code>---      globals:        var1: true        var2: false</code></pre><p>这些例子 var1 允许被重写，var2 不允许被重写。</p><h2 id="Configuring-Plugins-配置插件"><a href="#Configuring-Plugins-配置插件" class="headerlink" title="Configuring Plugins(配置插件)"></a>Configuring Plugins(配置插件)</h2><p>&#160;&#160;&#160;&#160;ESLint 支持使用第三方插件。在使用插件之前，你必须使用 npm 安装它。</p><p>&#160;&#160;&#160;&#160;在配置文件里配置插件，要使用<code>plugins</code> ，其中包含插件名字的列表。插件名称可以省略 <code>eslint-plugin-</code>前缀。</p><pre><code>{    &quot;plugins&quot;: [        &quot;plugin1&quot;,        &quot;eslint-plugin-plugin2&quot;    ]}</code></pre><p>在 YAML 中：</p><pre><code>---      plugins:        - plugin1        - eslint-plugin-plugin2</code></pre><p><strong>注意</strong>：全局安装的 ESLint 只能使用全局安装的插件。本地安装的 ESLint 不仅可以使用本地安装的插件还可以使用全局安装的插件。</p><h2 id="Configuring-Rules-配置规则"><a href="#Configuring-Rules-配置规则" class="headerlink" title="Configuring Rules(配置规则)"></a>Configuring Rules(配置规则)</h2><p>&#160;&#160;&#160;&#160;ESLint 附带有大量的规则。你可以使用注释或配置文件修改你项目中要使用哪些规则。改变一个规则设置，你必须设置规则 ID 等于这些值之一：</p><ul><li><code>&quot;off&quot;</code> 或 0 - 关闭规则</li><li><code>&quot;warn&quot;</code> 或 1 - 开启规则，使用警告级别的错误：<code>warn</code> (不会导致程序退出)</li><li><code>&quot;error&quot;</code> 或 2 - 开启规则，使用错误级别的错误：<code>error</code> (当被触发的时候，程序会退出)</li></ul><p>&#160;&#160;&#160;&#160;为了在文件注释里配置规则，使用以下格式的注释：</p><pre><code>/* eslint eqeqeq: &quot;off&quot;, curly: &quot;error&quot; */</code></pre><p>&#160;&#160;&#160;&#160;在这个例子里，eqeqeq 规则被关闭，curly 规则被打开，定义为错误级别。你也可以使用对应的数字定义规则严重程度：</p><pre><code>/* eslint eqeqeq: 0, curly: 2 */</code></pre><p>&#160;&#160;&#160;&#160;这个例子和上个例子是一样的，只不过它是用的数字而不是字符串。eqeqeq 规则是关闭的，curly 规则被设置为错误级别。</p><p>&#160;&#160;&#160;&#160;如果一个规则有额外的选项，你可以使用数组字面量指定它们，比如：</p><pre><code>/* eslint quotes: [&quot;error&quot;, &quot;double&quot;], curly: 2 */</code></pre><p>&#160;&#160;&#160;&#160;这条注释为规则 quotes 指定了 “double”选项。数组的第一项总是规则的严重程度（数字或字符串）。</p><p>&#160;&#160;&#160;&#160;使用 rules 连同错误级别和任何你想使用的选项在配置文件中进行规则配置。例如：</p><pre><code>{    &quot;rules&quot;: {        &quot;eqeqeq&quot;: &quot;off&quot;,        &quot;curly&quot;: &quot;error&quot;,        &quot;quotes&quot;: [&quot;error&quot;, &quot;double&quot;]    }}</code></pre><p>&#160;&#160;&#160;&#160;在 YAML 中：</p><pre><code>---rules:      eqeqeq: off      curly: error      quotes:        - error        - double</code></pre><p>&#160;&#160;&#160;&#160;配置定义在插件中的一个规则的时候，你必须使用 插件名/规则ID 的形式。比如：</p><pre><code>{    &quot;plugins&quot;: [        &quot;plugin1&quot;    ],    &quot;rules&quot;: {        &quot;eqeqeq&quot;: &quot;off&quot;,        &quot;curly&quot;: &quot;error&quot;,        &quot;quotes&quot;: [&quot;error&quot;, &quot;double&quot;],        &quot;plugin1/rule1&quot;: &quot;error&quot;    }}</code></pre><p>&#160;&#160;&#160;&#160;在 YAML 中：</p><pre><code>---plugins:      - plugin1rules:      eqeqeq: 0      curly: error      quotes:        - error        - &quot;double&quot;      plugin1/rule1: error</code></pre><p>&#160;&#160;&#160;&#160;在这些配置文件中，规则 <code>plugin1/rule1</code> 表示来自插件<code>plugin1</code> 的<code>rule1</code>规则。你也可以使用这种格式的注释去配置，比如：</p><pre><code>/* eslint &quot;plugin1/rule1&quot;: &quot;error&quot; */</code></pre><p>&#160;&#160;&#160;&#160;<strong>注意</strong>：当指定从插件来的规则时，确保删除<code>eslint-plugin-</code> 前缀。ESLint 在内部只使用没有前缀的名称去定位规则。</p><h2 id="Disabling-Rules-with-Inline-Comments-禁用规则与内联注释"><a href="#Disabling-Rules-with-Inline-Comments-禁用规则与内联注释" class="headerlink" title="Disabling Rules with Inline Comments(禁用规则与内联注释)"></a>Disabling Rules with Inline Comments(禁用规则与内联注释)</h2><p>&#160;&#160;&#160;&#160;可以在你的文件中使用以下格式的块注释来临时禁止规则出现警告：</p><pre><code>/* eslint-disable */alert(&apos;foo&apos;);/* eslint-enable */</code></pre><p>&#160;&#160;&#160;&#160;你也可以对指定的规则启用或禁用警告:</p><pre><code>/* eslint-disable no-alert, no-console */alert(&apos;foo&apos;);console.log(&apos;bar&apos;);/* eslint-enable no-alert, no-console */</code></pre><p>&#160;&#160;&#160;&#160;如果在整个文件范围内禁止规则出现警告，将 <code>/* eslint-disable */</code> 块注释放在文件顶部：</p><pre><code>/* eslint-disable */alert(&apos;foo&apos;);</code></pre><p>&#160;&#160;&#160;&#160;你也可以对整个文件启用或禁用警告:</p><pre><code>/* eslint-disable no-alert */// Disables no-alert for the rest of the filealert(&apos;foo&apos;);</code></pre><p>&#160;&#160;&#160;&#160;可以在你的文件中使用以下格式的行注释在某一特定的行上禁用所有规则：</p><pre><code>alert(&apos;foo&apos;); // eslint-disable-line// eslint-disable-next-linealert(&apos;foo&apos;);</code></pre><p>&#160;&#160;&#160;&#160;在某一特定的行上禁用某个指定的规则：</p><pre><code>alert(&apos;foo&apos;); // eslint-disable-line no-alert// eslint-disable-next-line no-alertalert(&apos;foo&apos;);</code></pre><p>&#160;&#160;&#160;&#160;在某个特定的行上禁用多个规则：</p><pre><code>alert(&apos;foo&apos;); // eslint-disable-line no-alert, quotes, semi// eslint-disable-next-line no-alert, quotes, semialert(&apos;foo&apos;);</code></pre><p>&#160;&#160;&#160;&#160;<strong>注意</strong>：为文件的某部分禁用警告的注释，告诉 ESLint 不要对禁用的代码报告规则的冲突。ESLint 仍解析整个文件，然而，禁用的代码仍需要是有效的 JavaScript 语法。</p><h2 id="Adding-Shared-Settings"><a href="#Adding-Shared-Settings" class="headerlink" title="Adding Shared Settings"></a>Adding Shared Settings</h2><p>&#160;&#160;&#160;&#160;ESLint 支持在配置文件添加共享设置。你可以添加<code>settings</code>对象到配置文件，它将提供给每一个将被执行的规则。如果你想添加的自定义规则而且使它们可以访问到相同的信息，这将会很有用，并且很容易配置。</p><p>&#160;&#160;&#160;&#160;在 JSON 中：</p><pre><code>{       &quot;settings&quot;: {        &quot;sharedData&quot;: &quot;Hello&quot;    }}</code></pre><p>&#160;&#160;&#160;&#160;在 YAML 中：</p><pre><code>---      settings:        sharedData: &quot;Hello&quot;</code></pre><h2 id="Using-Configuration-Files-使用配置文件"><a href="#Using-Configuration-Files-使用配置文件" class="headerlink" title="Using Configuration Files(使用配置文件)"></a>Using Configuration Files(使用配置文件)</h2><p>&#160;&#160;&#160;&#160;有两种方式可以使用配置文件。第一种是将文件保存到你喜欢的地方，然后将它的位置使用 -c 选项传递命令行，比如：</p><pre><code>eslint -c myconfig.json myfiletotest.js</code></pre><p>&#160;&#160;&#160;&#160;第二种方式是通过<code>.eslintrc.*</code>和<code>package.json</code>。ESLint 将自动在要检测的文件目录里寻找它们，紧接着是父级目录，一直到文件系统的根目录。当你想对一个项目的不同部分的使用不同配置，或当你希望别人能够直接使用 ESLint，而无需记住要在配置文件中传递什么，这种方式就很有用。</p><p>&#160;&#160;&#160;&#160;每种情况，配置文件都会覆盖默认设置。</p><h2 id="Configuration-File-Formats-牵头格式配置"><a href="#Configuration-File-Formats-牵头格式配置" class="headerlink" title="Configuration File Formats(牵头格式配置)"></a>Configuration File Formats(牵头格式配置)</h2><p>&#160;&#160;&#160;&#160;ESLint 支持几种格式的配置文件：</p><ul><li><strong>JavaScript</strong> - 使用<code>.eslintrc.js</code> 然后输出一个配置对象。</li><li><strong>YAML</strong> - 使用 <code>.eslintrc.yaml</code> 或 .eslintrc.yml 去定义配置的结构。</li><li><strong>JSON</strong> - 使用 <code>.eslintrc.json</code>去定义配置的结构，ESLint 的 JSON 文件允许 JavaScript 风格的注释。</li><li><strong>Deprecated</strong> - 使用<code>.eslintrc</code>，可以使 JSON 也可以是 YAML。</li><li><strong>package.json</strong> - 在 <code>package.json</code> 里创建一个 eslintConfig属性，在那里定义你的配置。</li></ul><p>&#160;&#160;&#160;&#160;如果同一个目录下有多个配置文件，ESLint 只会使用一个。优先级顺序如下：</p><ul><li><code>.eslintrc.js</code></li><li><code>.eslintrc.yaml</code></li><li><code>.eslintrc.yml</code></li><li><code>.eslintrc.json</code></li><li><code>.eslintrc</code></li><li><code>package.json</code></li></ul><h2 id="Configuration-Cascading-and-Hierarchy-配置层叠和层次结构"><a href="#Configuration-Cascading-and-Hierarchy-配置层叠和层次结构" class="headerlink" title="Configuration Cascading and Hierarchy(配置层叠和层次结构)"></a>Configuration Cascading and Hierarchy(配置层叠和层次结构)</h2><p>&#160;&#160;&#160;&#160;当使用 <code>.eslintrc.*</code>和 <code>package.json</code>文件的配置时，你可以利用配置级联。例如，假如你有以下结构：</p><pre><code>your-project├── .eslintrc├── lib│ └── source.js└─┬ tests    ├── .eslintrc    └── test.js</code></pre><p>&#160;&#160;&#160;&#160;层叠配置使用离要检测的文件最近的 <code>.eslintrc</code>文件作为最高优先级，然后才是父目录里的配置文件，等等。当你在这个项目中允许 ESLint 时，lib/ 下面的所有文件将使用项目根目录里的 .eslintrc 文件作为它的配置文件。当 ESLint 遍历到 test/ 目录，<code>your-project/.eslintrc</code>之外，它还会用到 <code>your-project/tests/.eslintrc</code>。所以<code>your-project/tests/test.js</code>是基于它的目录层次结构中的两个<code>.eslintrc</code>文件的组合，并且离的最近的一个优先。通过这种方式，你可以有项目级 ESLint 设置，也有覆盖特定目录的 ESLint 设置。</p><p>&#160;&#160;&#160;&#160;同样的，如果在根目录的 package.json 文件中有一个<code>eslintConfig</code>字段，其中的配置将使用于所有子目录，但是当<code>tests</code> 目录下的<code>.eslintrc</code>文件中的规则与之发生冲突时，就会覆盖它。</p><pre><code>your-project├── package.json├── lib│ └── source.js└─┬ tests    ├── .eslintrc    └── test.js</code></pre><p>&#160;&#160;&#160;&#160;如果同一目录下 .eslintrc 和 package.json 同时存在，.eslintrc 优先级高会被使用，package.json 文件将不会被使用。</p><p>&#160;&#160;&#160;&#160;注意：如果在你的主目录下有一个自定义的配置文件 (~/.eslintrc) ，如果没有其它配置文件时它才会被使用。因为个人配置将适用于用户目录下的所有目录和文件，包括第三方的代码，当 ESLint 运行时肯能会导致问题。</p><p>&#160;&#160;&#160;&#160;默认情况下，ESLint 会在所有父级目录里寻找配置文件，一直到根目录。如果你想要你所有项目都遵循一个特定的约定时，这将会很有用，但有时候会导致意想不到的结果。为了将 ESLint 限制到一个特定的项目，在你项目根目录下的 package.json 文件或者 .eslintrc.* 文件里的 eslintConfig 字段下设置 “root”: true。ESLint 一旦发现配置文件中有 “root”: true，它就会停止在父级目录中寻找。</p><pre><code>{        &quot;root&quot;: true}</code></pre><p>&#160;&#160;&#160;&#160;在 YAML 中：</p><pre><code>---      root: true</code></pre><p>&#160;&#160;&#160;&#160;例如，projectA 的主目录下的 .eslintrc 文件中设置了 “root”: true。这种情况下，当检测 main.js 时，lib/ 下的配置将会被使用，projectA/ 下的 .eslintrc 将不会被使用。</p><pre><code>home└── user    ├── .eslintrc &lt;- Always skipped if other configs present    └── projectA        ├── .eslintrc  &lt;- Not used        └── lib            ├── .eslintrc  &lt;- { &quot;root&quot;: true }            └── main.js</code></pre><p>&#160;&#160;&#160;&#160;完整的配置层次结构，从最高优先级最低的优先级，如下:</p><p>1.行内配置</p><ul><li>/<em>eslint-disable</em>/ 和 /<em>eslint-enable</em>/</li><li>/<em>global</em>/</li><li>/<em>eslint</em>/</li><li>/<em>eslint-env</em>/</li></ul><p>2.命令行选项：</p><ul><li>–global</li><li>–rule</li><li>–env</li><li>-c、–config</li></ul><p>3.项目级配置：</p><ul><li>与要检测的文件在同一目录下的 <code>.eslintrc.*</code> 或 <code>package.json</code>文件</li><li>继续在父级目录寻找 .eslintrc 或 package.json文件，直到根目录（包括根目录）或直到发现一个有<code>&quot;root&quot;: true</code>的配置。</li><li>如果不是（1）到（3）中的任何一种情况，退回到 <code>~/.eslintrc</code>中自定义的默认配置。</li></ul><h2 id="Extending-Configuration-Files-扩展配置文件"><a href="#Extending-Configuration-Files-扩展配置文件" class="headerlink" title="Extending Configuration Files(扩展配置文件)"></a>Extending Configuration Files(扩展配置文件)</h2><p>&#160;&#160;&#160;&#160;一个配置文件可以被基础配置中的已启用的规则继承。</p><p><code>extends</code> 属性值可以是：</p><ul><li>在配置中指定的一个字符串</li><li>字符串数组：每个配置继承它前面的配置</li></ul><p>&#160;&#160;&#160;&#160;ESLint 递归地进行扩展配置，所以一个基础的配置也可以有一个 extends 属性。</p><p><code>rules</code> 属性可以做下面的任何事情以扩展（或覆盖）规则：</p><ul><li>启用额外的规则</li><li>覆盖基础配置中的规则的默认选项</li><li>禁用基础配置中的规则</li></ul><h2 id="Using-“eslint-recommended”-使用”eslint-recommended”"><a href="#Using-“eslint-recommended”-使用”eslint-recommended”" class="headerlink" title="Using “eslint:recommended”(使用”eslint:recommended”)"></a>Using “eslint:recommended”(使用”eslint:recommended”)</h2><p>&#160;&#160;&#160;&#160;值为<code>&quot;eslint:recommended&quot;</code>的<code>extends</code> 属性启用一系列核心规则，这些规则报告一些常见问题，在 规则页面 中被标记为 。这个推荐的子集只能在 ESLint 主要版本进行更新。</p><p>&#160;&#160;&#160;&#160;如果你的配置集成了推荐的规则：在你升级到 ESLint 新的主版本之后，在你使用命令行的 –fix 选项之前，检查一下报告的问题，这样你就知道一个新的可修复的推荐的规则将更改代码。</p><p>&#160;&#160;&#160;&#160;<code>eslint --init</code> 命令可以创建一个配置，这样你就可以继承推荐的规则。</p><p>&#160;&#160;&#160;&#160;JavaScript 格式的一个配置文件的例子：</p><pre><code>module.exports = {    &quot;extends&quot;: &quot;eslint:recommended&quot;,    &quot;rules&quot;: {        // enable additional rules        &quot;indent&quot;: [&quot;error&quot;, 4],        &quot;linebreak-style&quot;: [&quot;error&quot;, &quot;unix&quot;],        &quot;quotes&quot;: [&quot;error&quot;, &quot;double&quot;],        &quot;semi&quot;: [&quot;error&quot;, &quot;always&quot;],        // override default options for rules from base configurations        &quot;comma-dangle&quot;: [&quot;error&quot;, &quot;always&quot;],        &quot;no-cond-assign&quot;: [&quot;error&quot;, &quot;always&quot;],        // disable rules from base configurations        &quot;no-console&quot;: &quot;off&quot;,    }}</code></pre><h2 id="Using-a-shareable-configuration-package-使用一个可共享的配置方案"><a href="#Using-a-shareable-configuration-package-使用一个可共享的配置方案" class="headerlink" title="Using a shareable configuration package(使用一个可共享的配置方案)"></a>Using a shareable configuration package(使用一个可共享的配置方案)</h2><p>&#160;&#160;&#160;&#160;可共享的配置 是一个 npm 包，它输出一个配置对象。要确保这个包安装在 ESLint 能请求到的目录下。</p><p>&#160;&#160;&#160;&#160;extends 属性值可以省略包名的前缀 eslint-config-。</p><p>&#160;&#160;&#160;&#160;eslint –init 命令可以创建一个配置，这样你就可以扩展一个流行的风格指南（比如，eslint-config-standard）。</p><p>&#160;&#160;&#160;&#160;YAML 格式的一个配置文件的例子：</p><pre><code>extends: standardrules:  comma-dangle:    - error    - always  no-empty: warn</code></pre><h2 id="Using-the-configuration-from-a-plugin-使用一个插件的配置"><a href="#Using-the-configuration-from-a-plugin-使用一个插件的配置" class="headerlink" title="Using the configuration from a plugin(使用一个插件的配置)"></a>Using the configuration from a plugin(使用一个插件的配置)</h2><p>&#160;&#160;&#160;&#160;插件 是一个<code>npm</code>包，通常输出规则。一些插件也可以输出一个或多个命名的 配置。要确保这个包安装在 ESLint 能请求到的目录下。</p><p>&#160;&#160;&#160;&#160;<code>plugins</code> 属性值 可以省略包名的前缀<code>eslint-plugin-</code>。</p><p>&#160;&#160;&#160;&#160;<code>extends</code> 属性值可以由以下组成：</p><ul><li><code>plugin</code>:</li><li>包名 (省略了前缀，比如，react)</li><li><code>/</code></li><li>配置名称 (比如 recommended)</li></ul><p>&#160;&#160;&#160;&#160;JSON 格式的一个配置文件的例子：</p><pre><code>{    &quot;plugins&quot;: [        &quot;react&quot;    ],    &quot;extends&quot;: [        &quot;eslint:recommended&quot;,        &quot;plugin:react/recommended&quot;    ],    &quot;rules&quot;: {       &quot;no-set-state&quot;: &quot;off&quot;    }}</code></pre><h2 id="Using-a-configuration-file-使用配置文件"><a href="#Using-a-configuration-file-使用配置文件" class="headerlink" title="Using a configuration file(使用配置文件)"></a>Using a configuration file(使用配置文件)</h2><p>&#160;&#160;&#160;&#160;<code>extends</code> 属性值可以是基本配置文件的绝对路径或相对路径。</p><p>&#160;&#160;&#160;&#160;ESLint 解析基本配置文件的相对路径相对你你使用的配置文件，除非那个文件在你的主目录或非 ESLint 安装目录的父级目录。在这些情况下，ESLint 解析基本配合文件的相对路径相对于被检测的 项目目录（尤其是当前工作目录）。</p><p>&#160;&#160;&#160;&#160;JSON 格式的一个配置文件的例子：</p><pre><code>{    &quot;extends&quot;: [        &quot;./node_modules/coding-standard/eslintDefaults.js&quot;,        &quot;./node_modules/coding-standard/.eslintrc-es6&quot;,        &quot;./node_modules/coding-standard/.eslintrc-jsx&quot;    ],    &quot;rules&quot;: {        &quot;eqeqeq&quot;: &quot;warn&quot;    }}</code></pre><h2 id="Using-“eslint-all”"><a href="#Using-“eslint-all”" class="headerlink" title="Using “eslint:all”"></a>Using “eslint:all”</h2><p>&#160;&#160;&#160;&#160;extends 属性值可以是 “eslint:all”，启用当前安装的 ESLint 中所有的核心规则。这些规则可以在 ESLint 的任何版本进行更改。</p><p>&#160;&#160;&#160;&#160;重要：这些配置 不推荐在产品中使用，因为它随着 ESLint 版本进行更改。使用的话，请自己承担风险。</p><p>&#160;&#160;&#160;&#160;如果你配置 ESLint 升级时自动地启用新规则，当源码没有任何改变时，ESLint 可以报告新问题，因此任何 ESLint 的新的小版本好像有破坏性的更改。</p><p>&#160;&#160;&#160;&#160;当你决定在一个项目上使用的规则和选项，尤其是如果你很少覆盖选项或禁用规则，你可能启用所有核心规则作为一种快捷方式使用。规则的默认选项并不是 ESLint 推荐的（例如，quotes 规则的默认选项并不意味着双引号要比单引号好）。</p><p>&#160;&#160;&#160;&#160;如果你的配置扩展了所有的核心规则：在你升级到一个新的大或小的 ESLint 版本，在你使用命令行的 –fix 选项之前，检查一下报告的问题，这样你就知道一个新的可修复的规则将更改代码。</p><p>&#160;&#160;&#160;&#160;JavaScript 格式的一个配置文件的例子：</p><pre><code>module.exports = {    &quot;extends&quot;: &quot;eslint:all&quot;,    &quot;rules&quot;: {        // override default options        &quot;comma-dangle&quot;: [&quot;error&quot;, &quot;always&quot;],        &quot;indent&quot;: [&quot;error&quot;, 2],        &quot;no-cond-assign&quot;: [&quot;error&quot;, &quot;always&quot;],        // disable now, but enable in the future        &quot;one-var&quot;: &quot;off&quot;, // [&quot;error&quot;, &quot;never&quot;]        // disable        &quot;init-declarations&quot;: &quot;off&quot;,        &quot;no-console&quot;: &quot;off&quot;,        &quot;no-inline-comments&quot;: &quot;off&quot;,    }}</code></pre><h2 id="Comments-in-Configuration-Files-评论在配置文件"><a href="#Comments-in-Configuration-Files-评论在配置文件" class="headerlink" title="Comments in Configuration Files(评论在配置文件)"></a>Comments in Configuration Files(评论在配置文件)</h2><p>&#160;&#160;&#160;&#160;JSON 和 YAML 配置文件格式都支持注释 (<code>package.json</code>文件不应该包括注释)。你可以在其他类型的文件中使用 JavaScript 风格的注释或使用 YAML 风格的注释，ESLint 会忽略它们。这允许你的配置更加人性化。例如：</p><pre><code>{    &quot;env&quot;: {        &quot;browser&quot;: true    },    &quot;rules&quot;: {        // Override our default settings just for this directory        &quot;eqeqeq&quot;: &quot;warn&quot;,        &quot;strict&quot;: &quot;off&quot;    }}</code></pre><h2 id="Specifying-File-extensions-to-Lint-指定文件扩展名的lint"><a href="#Specifying-File-extensions-to-Lint-指定文件扩展名的lint" class="headerlink" title="Specifying File extensions to Lint(指定文件扩展名的lint)"></a>Specifying File extensions to Lint(指定文件扩展名的lint)</h2><p>&#160;&#160;&#160;&#160;目前，告诉 ESLint 哪个文件扩展名要检测的唯一方法是使用 –ext 命令行选项指定一个逗号分隔的扩展名列表。</p><h2 id="Ignoring-Files-and-Directories-忽略文件和目录"><a href="#Ignoring-Files-and-Directories-忽略文件和目录" class="headerlink" title="Ignoring Files and Directories(忽略文件和目录)"></a>Ignoring Files and Directories(忽略文件和目录)</h2><p>&#160;&#160;&#160;&#160;你可以通过在项目根目录创建一个 .eslintignore 文件告诉 ESLint 去忽略特定的文件和目录。.eslintignore 文件是一个纯文本文件，其中的每一行都是一个 glob 模式表明哪些路径应该忽略检测。例如，以下将忽略所有的 JavaScript 文件：</p><pre><code>**/*.js</code></pre><p>&#160;&#160;&#160;&#160;当 ESLint 运行时，在确定哪些文件要检测之前，它会在当前工作目录中查找一个<code>.eslintignore</code>文件。如果发现了这个文件，当遍历目录时，将会应用这些偏好设置。一次只有一个<code>.eslintignore</code>文件会被使用，所以，不是当前工作目录下的<code>.eslintignore</code>文件将不会被用到。</p><p>&#160;&#160;&#160;&#160;Globs 匹配使用 node-ignore，所以大量可用的特性有：</p><ul><li>以 # 开头的行被当作注释，不影响忽略模式。</li><li>路径是相对于 .eslintignore 的位置或当前工作目录。这也会影响通过 –ignore-pattern传递的路径。</li><li>忽略模式同 .gitignore 规范</li><li>以 ! 开头的行是否定模式，它将会重新包含一个之前被忽略的模式。</li></ul><p>&#160;&#160;&#160;&#160;除了<code>.eslintignore</code>文件中的模式，ESLint总是忽略<code>/node_modules/*</code>和<code>/bower_components/*</code>中的文件。</p><p>&#160;&#160;&#160;&#160;例如：把下面 .eslintignore 文件放到当前工作目录里，将忽略 node_modules，bower_components 和所有以 .ts.js 或者 .coffee.js 为扩展名的文件以及 build/ 目录下除了 build/index.js 的所有文件。</p><pre><code># /node_modules/* and /bower_components/* ignored by default# Ignore built files except build/index.jsbuild/*!build/index.js</code></pre><h2 id="Using-an-Alternate-File-使用另一个文件"><a href="#Using-an-Alternate-File-使用另一个文件" class="headerlink" title="Using an Alternate File(使用另一个文件)"></a>Using an Alternate File(使用另一个文件)</h2><p>&#160;&#160;&#160;&#160;如果相比于当前工作目录下<code>.eslintignore</code>文件，你更想使用一个不同的文件，你可以在命令行使用<code>--ignore-path</code>选项指定它。例如，你可以使用<code>.jshintignore</code>文件，因为它有相同的格式：</p><pre><code>eslint --ignore-path .jshintignore file.js</code></pre><p>&#160;&#160;&#160;&#160;你也可以使用你的<code>.gitignore</code>文件：</p><pre><code>eslint --ignore-path .gitignore file.js</code></pre><p>&#160;&#160;&#160;&#160;任何文件只要满足标准忽略文件格式都可以用。记住，指定 –ignore-path 意味着任何现有的 .eslintignore 文件将不被使用。请注意，<code>.eslintignore</code>中的匹配规则比 <code>.gitignore</code>中的更严格。</p><h2 id="Ignored-File-Warnings-忽略文件警告"><a href="#Ignored-File-Warnings-忽略文件警告" class="headerlink" title="Ignored File Warnings(忽略文件警告)"></a>Ignored File Warnings(忽略文件警告)</h2><p>&#160;&#160;&#160;&#160;当你传递目录给 ESLint，文件和目录是默默被忽略的。如果你传递一个指定的文件给 ESLint，你会看到一个警告，表明该文件被跳过了。例如，假如你有一个像这样的 <code>.eslintignore</code>文件：</p><pre><code>foo.js</code></pre><p>然后你执行：</p><pre><code>eslint foo.js</code></pre><p>你将会看到这个警告：</p><pre><code>foo.js      0:0  warning  File ignored because of your .eslintignore file. Use --no-ignore to override.✖ 1 problem (0 errors, 1 warning)</code></pre><p>&#160;&#160;&#160;&#160;这种消息出现是因为 ESLint 不确定你是否想检测文件。正如这个消息表明的那样，你可以使用 –no-ignore 覆盖忽略的规则。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2016/09/21/%E9%85%8D%E7%BD%AEeslint/"/>
      <url>/2016/09/21/%E9%85%8D%E7%BD%AEeslint/</url>
      <content type="html"><![CDATA[<h2 id="Configuring-ESLint-配置ESLint"><a href="#Configuring-ESLint-配置ESLint" class="headerlink" title="Configuring ESLint(配置ESLint)"></a>Configuring ESLint(配置ESLint)</h2><p>&#160;&#160;&#160;&#160;ESlint 被设计为是完全可配置的，这意味着你可以关闭每一个规则，只运行基本语法验证，或混合和匹配绑定的规则和自定义规则，以让 ESLint 更适合于你的项目。有两种主要的方式来配置 ESLint：</p><ul><li>Configuration Comments: 使用 JavaScript 注释把配置信息直接嵌入到一个文件。</li><li>Configuration Files: 使用 JavaScript、JSON 或者 YAML 文件为整个目录和它的子目录指定配置信息。可以用 .eslintrc.* 文件或者在 package.json 文件里的 eslintConfig 字段这两种方式进行配置，ESLint 会查找和自动读取它们，再者，你可以在命令行指定一个配置文件。</li></ul><p>有很多信息可以配置：</p><ul><li>Environment: 指定脚本的运行环境。每种环境都有一组特定的预定义全局变量。</li><li>Globals: 脚本在执行期间访问的额外的全局变量</li><li>Rules: 启用的规则及各自的错误级别</li></ul><p>所有这些选项让你可以细粒度地控制 ESLint 如何对待你的代码。</p><h2 id="Specifying-Parser-Options-指定解析器选项"><a href="#Specifying-Parser-Options-指定解析器选项" class="headerlink" title="Specifying Parser Options(指定解析器选项)"></a>Specifying Parser Options(指定解析器选项)</h2><p>&#160;&#160;&#160;&#160;ESLint 允许你指定你想要支持的 JavaScript 语言选项。默认情况下，ESLint 支持 ECMAScript 5 语法。你可以通过使用解析器选项让它支持 ECMAScript 6 和 7 以及 JSX。</p><p>&#160;&#160;&#160;&#160;请注意，对 JSX 语法的支持不用于对 React 的支持。React 适用于特定 ESLint 无法识别的 JSX 语法。如果你正在使用 React 和 想要 React 语义，我们推荐你使用 eslint-plugin-react。</p><p>&#160;&#160;&#160;&#160;在 <code>.eslintrc.*</code> 文件使用<code>parserOptions</code> 属性设置解析器选项。可用的选项有：</p><ul><li><code>ecmaVersion</code> - 设置为 3， 5 (默认)， 6 或 7 指定你想要使用的 ECMAScript 版本。</li><li><code>sourceType</code> - 设置为 <code>&quot;script&quot;</code> (默认) 或 <code>&quot;module&quot;</code>（如果你的代码是 ECMAScript 模块)。</li><li><code>ecmaFeatures</code> - 这是个对象，表示你想使用的额外的语言特性:<ul><li><code>globalReturn</code> - 允许在全局作用域下使用 return 语句</li><li><code>impliedStrict</code> - 启用全局 strict mode (如果 ecmaVersion 是 5 或更高)</li><li><code>jsx</code> - 启用 JSX</li><li><code>experimentalObjectRestSpread</code> - 启用对实验性的 <code>object rest/spread properties</code> 的支持。(重要：这是一个实验性的功能,在未来可能会改变明显。 建议你写的规则 不要依赖该功能，除非当它发生改变时你愿意承担维护成本。)</li></ul></li></ul><p>&#160;&#160;&#160;&#160;<code>.eslintrc.json</code> 文件示例：</p><pre><code>{    &quot;parserOptions&quot;: {        &quot;ecmaVersion&quot;: 6,        &quot;sourceType&quot;: &quot;module&quot;,        &quot;ecmaFeatures&quot;: {            &quot;jsx&quot;: true        }    },    &quot;rules&quot;: {        &quot;semi&quot;: 2    }}</code></pre><p>&#160;&#160;&#160;&#160;设置解析器选项帮助 ESLint 确定什么是解析错误，所有语言选项默认都是 false。</p><h2 id="Specifying-Parser-指定解析器"><a href="#Specifying-Parser-指定解析器" class="headerlink" title="Specifying Parser(指定解析器)"></a>Specifying Parser(指定解析器)</h2><p>&#160;&#160;&#160;&#160;ESLint 默认使用Espree作为其解析器，你可以在配置文件中指定一个不同的解析器，只要该解析器符合下列要求：</p><ul><li>它必须是本地安装的一个 npm 模块。</li><li>它必须有兼容 Esprima 的接口（它必须输出一个 parse() 方法）</li><li>它必须产出兼容 Esprima 的 AST 和 token 对象。</li></ul><p>&#160;&#160;&#160;&#160;注意，即使满足这些兼容性，也不能保证一个外部解析器可以与 ESLint 正常工作，ESLint 也不会修复与其它解析器不兼容的相关 bug。</p><p>&#160;&#160;&#160;&#160;为了表明使用该 npm 模块作为你的解析器，你需要在你的 .eslintrc 文件里指定 parser 选项。例如，下面的配置指定了 Esprima 作为解析器：</p><pre><code>{    &quot;parser&quot;: &quot;esprima&quot;,    &quot;rules&quot;: {        &quot;semi&quot;: &quot;error&quot;    }}</code></pre><p>&#160;&#160;&#160;&#160;以下解析器与 ESLint 兼容：</p><ul><li>Esprima</li><li>Babel-ESLint - 对Babel解析器的包装使其与 ESLint 兼容。</li></ul><p>&#160;&#160;&#160;&#160;注意，当使用自定义解析器时，为了使 ESLint 在非 ECMAScript 5 特性下正常工作，配置属性 parserOptions 仍然是必须的。解析器被传入 parserOptions，可能会也可能不会使用它们来决定开启哪个特征。</p><h2 id="Specifying-Environments-指定的环境"><a href="#Specifying-Environments-指定的环境" class="headerlink" title="Specifying Environments(指定的环境)"></a>Specifying Environments(指定的环境)</h2><p>&#160;&#160;&#160;&#160;环境定义了预定义的全局变量。可用的环境有：</p><ul><li><code>browser</code> - browser 全局变量。</li><li><code>node</code> - Node.js 全局变量和 Node.js 作用域。</li><li><code>commonjs</code> - CommonJS 全局变量和 CommonJS 作用域 (仅为使用 Browserify/WebPack 写的只支持浏览器的代码)。</li><li><code>shared-node-browser</code> - Node 和 Browser 通用全局变量。</li><li><code>es6</code> - 支持除了modules所有 ECMAScript 6 特性。</li><li><code>worker</code> - web workers 全局变量。</li><li><code>amd</code> - 定义 require() 和 define() 作为像 amd 一样的全局变量。</li><li><code>mocha</code> - 添加所有的 Mocha 测试全局变量。</li><li><code>jasmine</code> - 添加所有的 Jasmine 版本 1.3 和 2.0 的测试全局变量。</li><li><code>jest</code> - Jest 全局变量。</li><li><code>phantomjs</code> - PhantomJS 全局变量。</li><li><code>protractor</code> - Protractor 全局变量。</li><li><code>qunit</code> - QUnit 全局变量。</li><li><code>jquery</code> - jQuery 全局变量。</li><li><code>prototypejs</code> - Prototype.js 全局变量。</li><li><code>shelljs</code> - ShellJS 全局变量。</li><li><code>meteor</code> - Meteor 全局变量。</li><li><code>mongo</code> - MongoDB 全局变量。</li><li><code>applescript</code> - AppleScript 全局变量。</li><li><code>nashorn</code> - Java 8 Nashorn 全局变量。</li><li><code>serviceworker</code> - Service Worker 全局变量。</li><li><code>atomtest</code> - Atom 测试全局变量。</li><li><code>embertest</code> - Ember 测试全局变量。</li><li><code>webextensions</code> - WebExtensions 全局变量。</li><li><code>greasemonkey</code> - GreaseMonkey 全局变量。</li></ul><p>&#160;&#160;&#160;&#160;这些环境并不是相互排斥的，所以你可以一次定义多个。</p><p>&#160;&#160;&#160;&#160;可以在一个文件里，在配置文件中或使用 –env 命令行来指定环境。</p><p>&#160;&#160;&#160;&#160;在你的 JavaScript 文件中使用注释来指定环境，格式如下：</p><pre><code>/*eslint-env node, mocha */</code></pre><p>该设置启用了 Node.js 和 Mocha 环境。</p><p>&#160;&#160;&#160;&#160;在配置文件里指定环境，使用 env，指定你想启用的环境，设置它们为 true。例如，以下示例启用了 browser 和 Node.js 的环境：</p><pre><code>{    &quot;env&quot;: {           &quot;browser&quot;: true,        &quot;node&quot;: true    }}</code></pre><p>或在 package.json 文件中：</p><pre><code>{    &quot;name&quot;: &quot;mypackage&quot;,    &quot;version&quot;: &quot;0.0.1&quot;,    &quot;eslintConfig&quot;: {        &quot;env&quot;: {            &quot;browser&quot;: true,            &quot;node&quot;: true        }    }}</code></pre><p>在 YAML 文件中：</p><pre><code>---      env:        browser: true        node: true</code></pre><p>&#160;&#160;&#160;&#160;如果你想在一个插件中使用一种环境，确保在<code>plugins</code>数组里指定插件名，插件名不带前缀，后跟一个<code>/</code>，紧随其后的是环境名称。例如：</p><pre><code>{    &quot;plugins&quot;: [&quot;example&quot;],    &quot;env&quot;: {        &quot;example/custom&quot;: true    }}</code></pre><p>或在 <code>package.json</code> 文件中</p><pre><code>{    &quot;name&quot;: &quot;mypackage&quot;,    &quot;version&quot;: &quot;0.0.1&quot;,    &quot;eslintConfig&quot;: {        &quot;plugins&quot;: [&quot;example&quot;],        &quot;env&quot;: {                &quot;example/custom&quot;: true        }    }}</code></pre><p>在 YAML 文件中：</p><pre><code>---      plugins:        - example      env:        example/custom: true</code></pre><h2 id="Specifying-Globals-指定全局"><a href="#Specifying-Globals-指定全局" class="headerlink" title="Specifying Globals(指定全局)"></a>Specifying Globals(指定全局)</h2><p>&#160;&#160;&#160;&#160;当访问未定义的变量时，no-undef 规则将发出警告。如果你想在一个文件里使用全局变量，推荐你定义这些全局变量，这样 ESLint 就不会发出警告了。你可以使用注释或在配置文件中定义全局变量。</p><p>&#160;&#160;&#160;&#160;在你的 JavaScript 文件中，用注释指定全局变量，格式如下：</p><pre><code>/* global var1, var2 */</code></pre><p>这里定义了两个全局变量：<code>var1</code> 和 <code>var2</code>。如果你想指定这些变量不应被重写（只读），你可以将它们设置为 false：</p><pre><code>/* global var1:false, var2:false */</code></pre><p>&#160;&#160;&#160;&#160;在配置文件里配置全局变量时，使用<code>globals</code>指出你要使用的全局变量。设置每个变量等于<code>true</code>允许变量被重写，或 <code>false</code>不允许被重写。比如：</p><pre><code>{    &quot;globals&quot;: {        &quot;var1&quot;: true,        &quot;var2&quot;: false    }}</code></pre><p>在 YAML 中：</p><pre><code>---      globals:        var1: true        var2: false</code></pre><p>这些例子 var1 允许被重写，var2 不允许被重写。</p><h2 id="Configuring-Plugins-配置插件"><a href="#Configuring-Plugins-配置插件" class="headerlink" title="Configuring Plugins(配置插件)"></a>Configuring Plugins(配置插件)</h2><p>&#160;&#160;&#160;&#160;ESLint 支持使用第三方插件。在使用插件之前，你必须使用 npm 安装它。</p><p>&#160;&#160;&#160;&#160;在配置文件里配置插件，要使用<code>plugins</code> ，其中包含插件名字的列表。插件名称可以省略 <code>eslint-plugin-</code>前缀。</p><pre><code>{    &quot;plugins&quot;: [        &quot;plugin1&quot;,        &quot;eslint-plugin-plugin2&quot;    ]}</code></pre><p>在 YAML 中：</p><pre><code>---      plugins:        - plugin1        - eslint-plugin-plugin2</code></pre><p><strong>注意</strong>：全局安装的 ESLint 只能使用全局安装的插件。本地安装的 ESLint 不仅可以使用本地安装的插件还可以使用全局安装的插件。</p><h2 id="Configuring-Rules-配置规则"><a href="#Configuring-Rules-配置规则" class="headerlink" title="Configuring Rules(配置规则)"></a>Configuring Rules(配置规则)</h2><p>&#160;&#160;&#160;&#160;ESLint 附带有大量的规则。你可以使用注释或配置文件修改你项目中要使用哪些规则。改变一个规则设置，你必须设置规则 ID 等于这些值之一：</p><ul><li><code>&quot;off&quot;</code> 或 0 - 关闭规则</li><li><code>&quot;warn&quot;</code> 或 1 - 开启规则，使用警告级别的错误：<code>warn</code> (不会导致程序退出)</li><li><code>&quot;error&quot;</code> 或 2 - 开启规则，使用错误级别的错误：<code>error</code> (当被触发的时候，程序会退出)</li></ul><p>&#160;&#160;&#160;&#160;为了在文件注释里配置规则，使用以下格式的注释：</p><pre><code>/* eslint eqeqeq: &quot;off&quot;, curly: &quot;error&quot; */</code></pre><p>&#160;&#160;&#160;&#160;在这个例子里，eqeqeq 规则被关闭，curly 规则被打开，定义为错误级别。你也可以使用对应的数字定义规则严重程度：</p><pre><code>/* eslint eqeqeq: 0, curly: 2 */</code></pre><p>&#160;&#160;&#160;&#160;这个例子和上个例子是一样的，只不过它是用的数字而不是字符串。eqeqeq 规则是关闭的，curly 规则被设置为错误级别。</p><p>&#160;&#160;&#160;&#160;如果一个规则有额外的选项，你可以使用数组字面量指定它们，比如：</p><pre><code>/* eslint quotes: [&quot;error&quot;, &quot;double&quot;], curly: 2 */</code></pre><p>&#160;&#160;&#160;&#160;这条注释为规则 quotes 指定了 “double”选项。数组的第一项总是规则的严重程度（数字或字符串）。</p><p>&#160;&#160;&#160;&#160;使用 rules 连同错误级别和任何你想使用的选项在配置文件中进行规则配置。例如：</p><pre><code>{    &quot;rules&quot;: {        &quot;eqeqeq&quot;: &quot;off&quot;,        &quot;curly&quot;: &quot;error&quot;,        &quot;quotes&quot;: [&quot;error&quot;, &quot;double&quot;]    }}</code></pre><p>&#160;&#160;&#160;&#160;在 YAML 中：</p><pre><code>---rules:      eqeqeq: off      curly: error      quotes:        - error        - double</code></pre><p>&#160;&#160;&#160;&#160;配置定义在插件中的一个规则的时候，你必须使用 插件名/规则ID 的形式。比如：</p><pre><code>{    &quot;plugins&quot;: [        &quot;plugin1&quot;    ],    &quot;rules&quot;: {        &quot;eqeqeq&quot;: &quot;off&quot;,        &quot;curly&quot;: &quot;error&quot;,        &quot;quotes&quot;: [&quot;error&quot;, &quot;double&quot;],        &quot;plugin1/rule1&quot;: &quot;error&quot;    }}</code></pre><p>&#160;&#160;&#160;&#160;在 YAML 中：</p><pre><code>---plugins:      - plugin1rules:      eqeqeq: 0      curly: error      quotes:        - error        - &quot;double&quot;      plugin1/rule1: error</code></pre><p>&#160;&#160;&#160;&#160;在这些配置文件中，规则 <code>plugin1/rule1</code> 表示来自插件<code>plugin1</code> 的<code>rule1</code>规则。你也可以使用这种格式的注释去配置，比如：</p><pre><code>/* eslint &quot;plugin1/rule1&quot;: &quot;error&quot; */</code></pre><p>&#160;&#160;&#160;&#160;<strong>注意</strong>：当指定从插件来的规则时，确保删除<code>eslint-plugin-</code> 前缀。ESLint 在内部只使用没有前缀的名称去定位规则。</p><h2 id="Disabling-Rules-with-Inline-Comments-禁用规则与内联注释"><a href="#Disabling-Rules-with-Inline-Comments-禁用规则与内联注释" class="headerlink" title="Disabling Rules with Inline Comments(禁用规则与内联注释)"></a>Disabling Rules with Inline Comments(禁用规则与内联注释)</h2><p>&#160;&#160;&#160;&#160;可以在你的文件中使用以下格式的块注释来临时禁止规则出现警告：</p><pre><code>/* eslint-disable */alert(&apos;foo&apos;);/* eslint-enable */</code></pre><p>&#160;&#160;&#160;&#160;你也可以对指定的规则启用或禁用警告:</p><pre><code>/* eslint-disable no-alert, no-console */alert(&apos;foo&apos;);console.log(&apos;bar&apos;);/* eslint-enable no-alert, no-console */</code></pre><p>&#160;&#160;&#160;&#160;如果在整个文件范围内禁止规则出现警告，将 <code>/* eslint-disable */</code> 块注释放在文件顶部：</p><pre><code>/* eslint-disable */alert(&apos;foo&apos;);</code></pre><p>&#160;&#160;&#160;&#160;你也可以对整个文件启用或禁用警告:</p><pre><code>/* eslint-disable no-alert */// Disables no-alert for the rest of the filealert(&apos;foo&apos;);</code></pre><p>&#160;&#160;&#160;&#160;可以在你的文件中使用以下格式的行注释在某一特定的行上禁用所有规则：</p><pre><code>alert(&apos;foo&apos;); // eslint-disable-line// eslint-disable-next-linealert(&apos;foo&apos;);</code></pre><p>&#160;&#160;&#160;&#160;在某一特定的行上禁用某个指定的规则：</p><pre><code>alert(&apos;foo&apos;); // eslint-disable-line no-alert// eslint-disable-next-line no-alertalert(&apos;foo&apos;);</code></pre><p>&#160;&#160;&#160;&#160;在某个特定的行上禁用多个规则：</p><pre><code>alert(&apos;foo&apos;); // eslint-disable-line no-alert, quotes, semi// eslint-disable-next-line no-alert, quotes, semialert(&apos;foo&apos;);</code></pre><p>&#160;&#160;&#160;&#160;<strong>注意</strong>：为文件的某部分禁用警告的注释，告诉 ESLint 不要对禁用的代码报告规则的冲突。ESLint 仍解析整个文件，然而，禁用的代码仍需要是有效的 JavaScript 语法。</p><h2 id="Adding-Shared-Settings"><a href="#Adding-Shared-Settings" class="headerlink" title="Adding Shared Settings"></a>Adding Shared Settings</h2><p>&#160;&#160;&#160;&#160;ESLint 支持在配置文件添加共享设置。你可以添加<code>settings</code>对象到配置文件，它将提供给每一个将被执行的规则。如果你想添加的自定义规则而且使它们可以访问到相同的信息，这将会很有用，并且很容易配置。</p><p>&#160;&#160;&#160;&#160;在 JSON 中：</p><pre><code>{       &quot;settings&quot;: {        &quot;sharedData&quot;: &quot;Hello&quot;    }}</code></pre><p>&#160;&#160;&#160;&#160;在 YAML 中：</p><pre><code>---      settings:        sharedData: &quot;Hello&quot;</code></pre><h2 id="Using-Configuration-Files-使用配置文件"><a href="#Using-Configuration-Files-使用配置文件" class="headerlink" title="Using Configuration Files(使用配置文件)"></a>Using Configuration Files(使用配置文件)</h2><p>&#160;&#160;&#160;&#160;有两种方式可以使用配置文件。第一种是将文件保存到你喜欢的地方，然后将它的位置使用 -c 选项传递命令行，比如：</p><pre><code>eslint -c myconfig.json myfiletotest.js</code></pre><p>&#160;&#160;&#160;&#160;第二种方式是通过<code>.eslintrc.*</code>和<code>package.json</code>。ESLint 将自动在要检测的文件目录里寻找它们，紧接着是父级目录，一直到文件系统的根目录。当你想对一个项目的不同部分的使用不同配置，或当你希望别人能够直接使用 ESLint，而无需记住要在配置文件中传递什么，这种方式就很有用。</p><p>&#160;&#160;&#160;&#160;每种情况，配置文件都会覆盖默认设置。</p><h2 id="Configuration-File-Formats-牵头格式配置"><a href="#Configuration-File-Formats-牵头格式配置" class="headerlink" title="Configuration File Formats(牵头格式配置)"></a>Configuration File Formats(牵头格式配置)</h2><p>&#160;&#160;&#160;&#160;ESLint 支持几种格式的配置文件：</p><ul><li><strong>JavaScript</strong> - 使用<code>.eslintrc.js</code> 然后输出一个配置对象。</li><li><strong>YAML</strong> - 使用 <code>.eslintrc.yaml</code> 或 .eslintrc.yml 去定义配置的结构。</li><li><strong>JSON</strong> - 使用 <code>.eslintrc.json</code>去定义配置的结构，ESLint 的 JSON 文件允许 JavaScript 风格的注释。</li><li><strong>Deprecated</strong> - 使用<code>.eslintrc</code>，可以使 JSON 也可以是 YAML。</li><li><strong>package.json</strong> - 在 <code>package.json</code> 里创建一个 eslintConfig属性，在那里定义你的配置。</li></ul><p>&#160;&#160;&#160;&#160;如果同一个目录下有多个配置文件，ESLint 只会使用一个。优先级顺序如下：</p><ul><li><code>.eslintrc.js</code></li><li><code>.eslintrc.yaml</code></li><li><code>.eslintrc.yml</code></li><li><code>.eslintrc.json</code></li><li><code>.eslintrc</code></li><li><code>package.json</code></li></ul><h2 id="Configuration-Cascading-and-Hierarchy-配置层叠和层次结构"><a href="#Configuration-Cascading-and-Hierarchy-配置层叠和层次结构" class="headerlink" title="Configuration Cascading and Hierarchy(配置层叠和层次结构)"></a>Configuration Cascading and Hierarchy(配置层叠和层次结构)</h2><p>&#160;&#160;&#160;&#160;当使用 <code>.eslintrc.*</code>和 <code>package.json</code>文件的配置时，你可以利用配置级联。例如，假如你有以下结构：</p><pre><code>your-project├── .eslintrc├── lib│ └── source.js└─┬ tests    ├── .eslintrc    └── test.js</code></pre><p>&#160;&#160;&#160;&#160;层叠配置使用离要检测的文件最近的 <code>.eslintrc</code>文件作为最高优先级，然后才是父目录里的配置文件，等等。当你在这个项目中允许 ESLint 时，lib/ 下面的所有文件将使用项目根目录里的 .eslintrc 文件作为它的配置文件。当 ESLint 遍历到 test/ 目录，<code>your-project/.eslintrc</code>之外，它还会用到 <code>your-project/tests/.eslintrc</code>。所以<code>your-project/tests/test.js</code>是基于它的目录层次结构中的两个<code>.eslintrc</code>文件的组合，并且离的最近的一个优先。通过这种方式，你可以有项目级 ESLint 设置，也有覆盖特定目录的 ESLint 设置。</p><p>&#160;&#160;&#160;&#160;同样的，如果在根目录的 package.json 文件中有一个<code>eslintConfig</code>字段，其中的配置将使用于所有子目录，但是当<code>tests</code> 目录下的<code>.eslintrc</code>文件中的规则与之发生冲突时，就会覆盖它。</p><pre><code>your-project├── package.json├── lib│ └── source.js└─┬ tests    ├── .eslintrc    └── test.js</code></pre><p>&#160;&#160;&#160;&#160;如果同一目录下 .eslintrc 和 package.json 同时存在，.eslintrc 优先级高会被使用，package.json 文件将不会被使用。</p><p>&#160;&#160;&#160;&#160;注意：如果在你的主目录下有一个自定义的配置文件 (~/.eslintrc) ，如果没有其它配置文件时它才会被使用。因为个人配置将适用于用户目录下的所有目录和文件，包括第三方的代码，当 ESLint 运行时肯能会导致问题。</p><p>&#160;&#160;&#160;&#160;默认情况下，ESLint 会在所有父级目录里寻找配置文件，一直到根目录。如果你想要你所有项目都遵循一个特定的约定时，这将会很有用，但有时候会导致意想不到的结果。为了将 ESLint 限制到一个特定的项目，在你项目根目录下的 package.json 文件或者 .eslintrc.* 文件里的 eslintConfig 字段下设置 “root”: true。ESLint 一旦发现配置文件中有 “root”: true，它就会停止在父级目录中寻找。</p><pre><code>{        &quot;root&quot;: true}</code></pre><p>&#160;&#160;&#160;&#160;在 YAML 中：</p><pre><code>---      root: true</code></pre><p>&#160;&#160;&#160;&#160;例如，projectA 的主目录下的 .eslintrc 文件中设置了 “root”: true。这种情况下，当检测 main.js 时，lib/ 下的配置将会被使用，projectA/ 下的 .eslintrc 将不会被使用。</p><pre><code>home└── user    ├── .eslintrc &lt;- Always skipped if other configs present    └── projectA        ├── .eslintrc  &lt;- Not used        └── lib            ├── .eslintrc  &lt;- { &quot;root&quot;: true }            └── main.js</code></pre><p>&#160;&#160;&#160;&#160;完整的配置层次结构，从最高优先级最低的优先级，如下:</p><p>1.行内配置</p><ul><li>/<em>eslint-disable</em>/ 和 /<em>eslint-enable</em>/</li><li>/<em>global</em>/</li><li>/<em>eslint</em>/</li><li>/<em>eslint-env</em>/</li></ul><p>2.命令行选项：</p><ul><li>–global</li><li>–rule</li><li>–env</li><li>-c、–config</li></ul><p>3.项目级配置：</p><ul><li>与要检测的文件在同一目录下的 <code>.eslintrc.*</code> 或 <code>package.json</code>文件</li><li>继续在父级目录寻找 .eslintrc 或 package.json文件，直到根目录（包括根目录）或直到发现一个有<code>&quot;root&quot;: true</code>的配置。</li><li>如果不是（1）到（3）中的任何一种情况，退回到 <code>~/.eslintrc</code>中自定义的默认配置。</li></ul><h2 id="Extending-Configuration-Files-扩展配置文件"><a href="#Extending-Configuration-Files-扩展配置文件" class="headerlink" title="Extending Configuration Files(扩展配置文件)"></a>Extending Configuration Files(扩展配置文件)</h2><p>&#160;&#160;&#160;&#160;一个配置文件可以被基础配置中的已启用的规则继承。</p><p><code>extends</code> 属性值可以是：</p><ul><li>在配置中指定的一个字符串</li><li>字符串数组：每个配置继承它前面的配置</li></ul><p>&#160;&#160;&#160;&#160;ESLint 递归地进行扩展配置，所以一个基础的配置也可以有一个 extends 属性。</p><p><code>rules</code> 属性可以做下面的任何事情以扩展（或覆盖）规则：</p><ul><li>启用额外的规则</li><li>覆盖基础配置中的规则的默认选项</li><li>禁用基础配置中的规则</li></ul><h2 id="Using-“eslint-recommended”-使用”eslint-recommended”"><a href="#Using-“eslint-recommended”-使用”eslint-recommended”" class="headerlink" title="Using “eslint:recommended”(使用”eslint:recommended”)"></a>Using “eslint:recommended”(使用”eslint:recommended”)</h2><p>&#160;&#160;&#160;&#160;值为<code>&quot;eslint:recommended&quot;</code>的<code>extends</code> 属性启用一系列核心规则，这些规则报告一些常见问题，在 规则页面 中被标记为 。这个推荐的子集只能在 ESLint 主要版本进行更新。</p><p>&#160;&#160;&#160;&#160;如果你的配置集成了推荐的规则：在你升级到 ESLint 新的主版本之后，在你使用命令行的 –fix 选项之前，检查一下报告的问题，这样你就知道一个新的可修复的推荐的规则将更改代码。</p><p>&#160;&#160;&#160;&#160;<code>eslint --init</code> 命令可以创建一个配置，这样你就可以继承推荐的规则。</p><p>&#160;&#160;&#160;&#160;JavaScript 格式的一个配置文件的例子：</p><pre><code>module.exports = {    &quot;extends&quot;: &quot;eslint:recommended&quot;,    &quot;rules&quot;: {        // enable additional rules        &quot;indent&quot;: [&quot;error&quot;, 4],        &quot;linebreak-style&quot;: [&quot;error&quot;, &quot;unix&quot;],        &quot;quotes&quot;: [&quot;error&quot;, &quot;double&quot;],        &quot;semi&quot;: [&quot;error&quot;, &quot;always&quot;],        // override default options for rules from base configurations        &quot;comma-dangle&quot;: [&quot;error&quot;, &quot;always&quot;],        &quot;no-cond-assign&quot;: [&quot;error&quot;, &quot;always&quot;],        // disable rules from base configurations        &quot;no-console&quot;: &quot;off&quot;,    }}</code></pre><h2 id="Using-a-shareable-configuration-package-使用一个可共享的配置方案"><a href="#Using-a-shareable-configuration-package-使用一个可共享的配置方案" class="headerlink" title="Using a shareable configuration package(使用一个可共享的配置方案)"></a>Using a shareable configuration package(使用一个可共享的配置方案)</h2><p>&#160;&#160;&#160;&#160;可共享的配置 是一个 npm 包，它输出一个配置对象。要确保这个包安装在 ESLint 能请求到的目录下。</p><p>&#160;&#160;&#160;&#160;extends 属性值可以省略包名的前缀 eslint-config-。</p><p>&#160;&#160;&#160;&#160;eslint –init 命令可以创建一个配置，这样你就可以扩展一个流行的风格指南（比如，eslint-config-standard）。</p><p>&#160;&#160;&#160;&#160;YAML 格式的一个配置文件的例子：</p><pre><code>extends: standardrules:  comma-dangle:    - error    - always  no-empty: warn</code></pre><h2 id="Using-the-configuration-from-a-plugin-使用一个插件的配置"><a href="#Using-the-configuration-from-a-plugin-使用一个插件的配置" class="headerlink" title="Using the configuration from a plugin(使用一个插件的配置)"></a>Using the configuration from a plugin(使用一个插件的配置)</h2><p>&#160;&#160;&#160;&#160;插件 是一个<code>npm</code>包，通常输出规则。一些插件也可以输出一个或多个命名的 配置。要确保这个包安装在 ESLint 能请求到的目录下。</p><p>&#160;&#160;&#160;&#160;<code>plugins</code> 属性值 可以省略包名的前缀<code>eslint-plugin-</code>。</p><p>&#160;&#160;&#160;&#160;<code>extends</code> 属性值可以由以下组成：</p><ul><li><code>plugin</code>:</li><li>包名 (省略了前缀，比如，react)</li><li><code>/</code></li><li>配置名称 (比如 recommended)</li></ul><p>&#160;&#160;&#160;&#160;JSON 格式的一个配置文件的例子：</p><pre><code>{    &quot;plugins&quot;: [        &quot;react&quot;    ],    &quot;extends&quot;: [        &quot;eslint:recommended&quot;,        &quot;plugin:react/recommended&quot;    ],    &quot;rules&quot;: {       &quot;no-set-state&quot;: &quot;off&quot;    }}</code></pre><h2 id="Using-a-configuration-file-使用配置文件"><a href="#Using-a-configuration-file-使用配置文件" class="headerlink" title="Using a configuration file(使用配置文件)"></a>Using a configuration file(使用配置文件)</h2><p>&#160;&#160;&#160;&#160;<code>extends</code> 属性值可以是基本配置文件的绝对路径或相对路径。</p><p>&#160;&#160;&#160;&#160;ESLint 解析基本配置文件的相对路径相对你你使用的配置文件，除非那个文件在你的主目录或非 ESLint 安装目录的父级目录。在这些情况下，ESLint 解析基本配合文件的相对路径相对于被检测的 项目目录（尤其是当前工作目录）。</p><p>&#160;&#160;&#160;&#160;JSON 格式的一个配置文件的例子：</p><pre><code>{    &quot;extends&quot;: [        &quot;./node_modules/coding-standard/eslintDefaults.js&quot;,        &quot;./node_modules/coding-standard/.eslintrc-es6&quot;,        &quot;./node_modules/coding-standard/.eslintrc-jsx&quot;    ],    &quot;rules&quot;: {        &quot;eqeqeq&quot;: &quot;warn&quot;    }}</code></pre><h2 id="Using-“eslint-all”"><a href="#Using-“eslint-all”" class="headerlink" title="Using “eslint:all”"></a>Using “eslint:all”</h2><p>&#160;&#160;&#160;&#160;extends 属性值可以是 “eslint:all”，启用当前安装的 ESLint 中所有的核心规则。这些规则可以在 ESLint 的任何版本进行更改。</p><p>&#160;&#160;&#160;&#160;重要：这些配置 不推荐在产品中使用，因为它随着 ESLint 版本进行更改。使用的话，请自己承担风险。</p><p>&#160;&#160;&#160;&#160;如果你配置 ESLint 升级时自动地启用新规则，当源码没有任何改变时，ESLint 可以报告新问题，因此任何 ESLint 的新的小版本好像有破坏性的更改。</p><p>&#160;&#160;&#160;&#160;当你决定在一个项目上使用的规则和选项，尤其是如果你很少覆盖选项或禁用规则，你可能启用所有核心规则作为一种快捷方式使用。规则的默认选项并不是 ESLint 推荐的（例如，quotes 规则的默认选项并不意味着双引号要比单引号好）。</p><p>&#160;&#160;&#160;&#160;如果你的配置扩展了所有的核心规则：在你升级到一个新的大或小的 ESLint 版本，在你使用命令行的 –fix 选项之前，检查一下报告的问题，这样你就知道一个新的可修复的规则将更改代码。</p><p>&#160;&#160;&#160;&#160;JavaScript 格式的一个配置文件的例子：</p><pre><code>module.exports = {    &quot;extends&quot;: &quot;eslint:all&quot;,    &quot;rules&quot;: {        // override default options        &quot;comma-dangle&quot;: [&quot;error&quot;, &quot;always&quot;],        &quot;indent&quot;: [&quot;error&quot;, 2],        &quot;no-cond-assign&quot;: [&quot;error&quot;, &quot;always&quot;],        // disable now, but enable in the future        &quot;one-var&quot;: &quot;off&quot;, // [&quot;error&quot;, &quot;never&quot;]        // disable        &quot;init-declarations&quot;: &quot;off&quot;,        &quot;no-console&quot;: &quot;off&quot;,        &quot;no-inline-comments&quot;: &quot;off&quot;,    }}</code></pre><h2 id="Comments-in-Configuration-Files-评论在配置文件"><a href="#Comments-in-Configuration-Files-评论在配置文件" class="headerlink" title="Comments in Configuration Files(评论在配置文件)"></a>Comments in Configuration Files(评论在配置文件)</h2><p>&#160;&#160;&#160;&#160;JSON 和 YAML 配置文件格式都支持注释 (<code>package.json</code>文件不应该包括注释)。你可以在其他类型的文件中使用 JavaScript 风格的注释或使用 YAML 风格的注释，ESLint 会忽略它们。这允许你的配置更加人性化。例如：</p><pre><code>{    &quot;env&quot;: {        &quot;browser&quot;: true    },    &quot;rules&quot;: {        // Override our default settings just for this directory        &quot;eqeqeq&quot;: &quot;warn&quot;,        &quot;strict&quot;: &quot;off&quot;    }}</code></pre><h2 id="Specifying-File-extensions-to-Lint-指定文件扩展名的lint"><a href="#Specifying-File-extensions-to-Lint-指定文件扩展名的lint" class="headerlink" title="Specifying File extensions to Lint(指定文件扩展名的lint)"></a>Specifying File extensions to Lint(指定文件扩展名的lint)</h2><p>&#160;&#160;&#160;&#160;目前，告诉 ESLint 哪个文件扩展名要检测的唯一方法是使用 –ext 命令行选项指定一个逗号分隔的扩展名列表。</p><h2 id="Ignoring-Files-and-Directories-忽略文件和目录"><a href="#Ignoring-Files-and-Directories-忽略文件和目录" class="headerlink" title="Ignoring Files and Directories(忽略文件和目录)"></a>Ignoring Files and Directories(忽略文件和目录)</h2><p>&#160;&#160;&#160;&#160;你可以通过在项目根目录创建一个 .eslintignore 文件告诉 ESLint 去忽略特定的文件和目录。.eslintignore 文件是一个纯文本文件，其中的每一行都是一个 glob 模式表明哪些路径应该忽略检测。例如，以下将忽略所有的 JavaScript 文件：</p><pre><code>**/*.js</code></pre><p>&#160;&#160;&#160;&#160;当 ESLint 运行时，在确定哪些文件要检测之前，它会在当前工作目录中查找一个<code>.eslintignore</code>文件。如果发现了这个文件，当遍历目录时，将会应用这些偏好设置。一次只有一个<code>.eslintignore</code>文件会被使用，所以，不是当前工作目录下的<code>.eslintignore</code>文件将不会被用到。</p><p>&#160;&#160;&#160;&#160;Globs 匹配使用 node-ignore，所以大量可用的特性有：</p><ul><li>以 # 开头的行被当作注释，不影响忽略模式。</li><li>路径是相对于 .eslintignore 的位置或当前工作目录。这也会影响通过 –ignore-pattern传递的路径。</li><li>忽略模式同 .gitignore 规范</li><li>以 ! 开头的行是否定模式，它将会重新包含一个之前被忽略的模式。</li></ul><p>&#160;&#160;&#160;&#160;除了<code>.eslintignore</code>文件中的模式，ESLint总是忽略<code>/node_modules/*</code>和<code>/bower_components/*</code>中的文件。</p><p>&#160;&#160;&#160;&#160;例如：把下面 .eslintignore 文件放到当前工作目录里，将忽略 node_modules，bower_components 和所有以 .ts.js 或者 .coffee.js 为扩展名的文件以及 build/ 目录下除了 build/index.js 的所有文件。</p><pre><code># /node_modules/* and /bower_components/* ignored by default# Ignore built files except build/index.jsbuild/*!build/index.js</code></pre><h2 id="Using-an-Alternate-File-使用另一个文件"><a href="#Using-an-Alternate-File-使用另一个文件" class="headerlink" title="Using an Alternate File(使用另一个文件)"></a>Using an Alternate File(使用另一个文件)</h2><p>&#160;&#160;&#160;&#160;如果相比于当前工作目录下<code>.eslintignore</code>文件，你更想使用一个不同的文件，你可以在命令行使用<code>--ignore-path</code>选项指定它。例如，你可以使用<code>.jshintignore</code>文件，因为它有相同的格式：</p><pre><code>eslint --ignore-path .jshintignore file.js</code></pre><p>&#160;&#160;&#160;&#160;你也可以使用你的<code>.gitignore</code>文件：</p><pre><code>eslint --ignore-path .gitignore file.js</code></pre><p>&#160;&#160;&#160;&#160;任何文件只要满足标准忽略文件格式都可以用。记住，指定 –ignore-path 意味着任何现有的 .eslintignore 文件将不被使用。请注意，<code>.eslintignore</code>中的匹配规则比 <code>.gitignore</code>中的更严格。</p><h2 id="Ignored-File-Warnings-忽略文件警告"><a href="#Ignored-File-Warnings-忽略文件警告" class="headerlink" title="Ignored File Warnings(忽略文件警告)"></a>Ignored File Warnings(忽略文件警告)</h2><p>&#160;&#160;&#160;&#160;当你传递目录给 ESLint，文件和目录是默默被忽略的。如果你传递一个指定的文件给 ESLint，你会看到一个警告，表明该文件被跳过了。例如，假如你有一个像这样的 <code>.eslintignore</code>文件：</p><pre><code>foo.js</code></pre><p>然后你执行：</p><pre><code>eslint foo.js</code></pre><p>你将会看到这个警告：</p><pre><code>foo.js      0:0  warning  File ignored because of your .eslintignore file. Use --no-ignore to override.✖ 1 problem (0 errors, 1 warning)</code></pre><p>&#160;&#160;&#160;&#160;这种消息出现是因为 ESLint 不确定你是否想检测文件。正如这个消息表明的那样，你可以使用 –no-ignore 覆盖忽略的规则。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>iOS学习笔记03-指纹验证TouchID简单应用2</title>
      <link href="/2016/09/21/iOS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003-%E6%8C%87%E7%BA%B9%E9%AA%8C%E8%AF%81TouchID%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A82/"/>
      <url>/2016/09/21/iOS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003-%E6%8C%87%E7%BA%B9%E9%AA%8C%E8%AF%81TouchID%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A82/</url>
      <content type="html"><![CDATA[<p>&#160;&#160;&#160;&#160;上一篇文章简单的写了对于touchid的简单了解。因为太懒了，就没有写实例，现在就单独写一篇应用吧，这篇想做的就是一个模仿那个叫啥软件来着，某某理财类类的软件的一个指纹验证解锁。我们做出来的页面应该如下图，在app挂起到后台的时候再点击到前台的时候回出现如下页面：</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-c049cc53edf939fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="app唤醒的时候出现的画面"></p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-6495262ab3ab1ef4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="点击取消按钮出现的页面">  </p><p>&#160;&#160;&#160;&#160;这里我先挂上github的链接地址，毕竟本文的篇幅较长，也没什么人有耐心有时间看到最后，顶多看下demo，快速的知道怎么调用啥的就可以了。<a href="https://github.com/Yulingsong/popViewForTouchID" target="_blank" rel="noopener">popViewForTouchID</a></p><p>&#160;&#160;&#160;&#160;因为我之前没遇到个这种情况，所以我做的都是自己瞎搞搞出来的，也不知道平时大家做的时候是怎么做的，就搞出来这样的，这里我打算用两种方法来实现，不过这个东西放进app中貌似是需要适配的。还是有些许问题的。可能要调下。  </p><p>&#160;&#160;&#160;&#160;在app被唤醒的时候，出现页面我用了两种方式，一种是present出来一个单独的页面，一种方式是自定义弹出view。</p><p>&#160;&#160;&#160;&#160;但是本文呢，主要就介绍一下弹出式view的方式，因为present的方式跟这种方式差别就是在于一个是view一个是Controller，主要的思想还是一样的。</p><h2 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h2><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>&#160;&#160;&#160;&#160;引入需要用的文件，以及创建pch文件，因为是小demo，所以一些宏定义直接丢进去就可以了。</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-0e5662f0bf2a79f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="指纹验证和信息显示控件"></p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>&#160;&#160;&#160;&#160;创建pch文件，引入一些需要用到的文件以及宏定义,这里要是有问题的话可以参照我之前一篇文章写的引入pch文件，当然也可以老老实实的每个文件里都去引入头文件啥的，这个很随意的，毕竟是demo。</p><pre><code>#import &quot;AppDelegate.h&quot;#import &quot;WJTouchID.h&quot;#import &quot;MBProgressHUD.h&quot;#import &quot;MBProgressHUD+Add.h&quot;// 屏幕bounds#define YLSScreenBounds [UIScreen mainScreen].bounds//位置#define ZLRect(x, y, w, h)  CGRectMake([UIScreen mainScreen].bounds.size.width * x, [UIScreen mainScreen].bounds.size.height * y, [UIScreen mainScreen].bounds.size.width * w,  [UIScreen mainScreen].bounds.size.height * h)//字体大小#define ZCFont(f) [UIScreen mainScreen].bounds.size.width * f</code></pre><h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><p>&#160;&#160;&#160;&#160;实现基础页面，如下图</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-5822ed8717b73118.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="基础页面"></p><ul><li><p>声明变量，遵守指纹验证控件的协议</p><pre><code>@interface ViewController ()&lt;WJTouchIDDelegate&gt;/** NoticeLabel */@property (nonatomic,strong) UILabel *label;/** UISwitch */@property (nonatomic,strong) UISwitch *touchIDSwitch;@property (nonatomic, strong) WJTouchID *touchID;@end</code></pre></li></ul><ul><li><p>懒加载</p><pre><code>-(UISwitch *)touchIDSwitch{        if (!_touchIDSwitch)    {        self.touchIDSwitch = [[UISwitch alloc]init];    }    return _touchIDSwitch;}</code></pre></li><li><p>添加子控件</p><pre><code>-(void)setSubViews{    self.label = [[UILabel alloc]init];    [self.view addSubview:self.label];    [self.label setFrame:ZLRect(0, 100/667, 1, 20/667)];    [self.label setText:@&quot;指纹解锁&quot;];    [self.label setTextAlignment:NSTextAlignmentCenter];    [self.label setFont:[UIFont systemFontOfSize:ZCFont(18/375)]];    self.touchIDSwitch = [[UISwitch alloc]init];    [self.touchIDSwitch setFrame:ZLRect(160/375, 200/667, 50/375, 28/667)];    [self.view addSubview:self.touchIDSwitch];    if ([[[NSUserDefaults standardUserDefaults]objectForKey:@&quot;TouchID&quot;] isEqualToString:@&quot;1&quot;])    {        self.touchIDSwitch.on = YES;    }else    {        self.touchIDSwitch.on = NO;    }    [self.touchIDSwitch addTarget:self action:@selector(changeSwitch:) forControlEvents:UIControlEventValueChanged];}</code></pre></li></ul><p>&#160;&#160;&#160;&#160;这里要说一下</p><pre><code>[[[NSUserDefaults standardUserDefaults]objectForKey:@&quot;TouchID&quot;] isEqualToString:@&quot;1&quot;]</code></pre><p>&#160;&#160;&#160;&#160;这个我是将是否设置了指纹验证存到了本地，因为当你进入设置页面的时候，必须知道你本机是否已经设置了指纹验证，这里存在着设置与未设置的一个页面UI差别，我这边就是用switch的开关来打开关闭指纹验证，也是用开关状态来表示指纹验证是否打开。</p><h4 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h4><p>&#160;&#160;&#160;&#160;在viewdidload方法中调用设置子控件的方法，并且实现开关切换的方法。</p><pre><code>- (void)viewDidLoad {        [super viewDidLoad];    [self setSubViews];}</code></pre><p>&#160;&#160;&#160;&#160;切换方法里呢，就是需要调用者会问验证，一般软件设置指纹验证的时候都会要求你先验证一下子，我在这里设置成只要你开或关闭都需要验证一下。</p><pre><code>-(void)changeSwitch:(id)sender{    NSLog(@&quot;------changeSwitch-------&quot;);    WJTouchID *touchid = [[WJTouchID alloc]init];    [touchid startWJTouchIDWithMessage:WJNotice(@&quot;自定义信息&quot;, @&quot;The Custom Message&quot;) fallbackTitle:WJNotice(@&quot;&quot;, @&quot;Fallback Title&quot;) delegate:self];    self.touchID = touchid;}</code></pre><h4 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h4><p>&#160;&#160;&#160;&#160;在上述调用指纹验证成功后，必须得实现它的回调函数，在成功或者失败的方法中写上你需要执行的代码。</p><pre><code>//TouchID验证成功- (void) WJTouchIDAuthorizeSuccess {    [[NSUserDefaults standardUserDefaults]setObject:@&quot;YES&quot; forKey:@&quot;touchIDISon&quot;];    if (self.touchIDSwitch.on == YES)    {        [MBProgressHUD showText:@&quot;成功开启指纹解锁&quot; view:self.view];        [[NSUserDefaults standardUserDefaults] setObject:@&quot;1&quot; forKey:@&quot;TouchID&quot;];    }else{        [MBProgressHUD showText:@&quot;指纹解锁关闭成功&quot; view:self.view];        [[NSUserDefaults standardUserDefaults] setObject:@&quot;0&quot; forKey:@&quot;TouchID&quot;];    }}//TouchID验证失败- (void) WJTouchIDAuthorizeFailure {    [[NSUserDefaults standardUserDefaults]setObject:@&quot;YES&quot; forKey:@&quot;touchIDISon&quot;];    if (self.touchIDSwitch.on == YES){           self.touchIDSwitch.on = NO;        [MBProgressHUD showText:@&quot;指纹解锁开启失败&quot; view:self.view];        [[NSUserDefaults standardUserDefaults] setObject:@&quot;0&quot; forKey:@&quot;TouchID&quot;];    }else    {        self.touchIDSwitch.on = YES;        [MBProgressHUD showText:@&quot;指纹解锁关闭失败&quot; view:self.view];        [[NSUserDefaults standardUserDefaults] setObject:@&quot;1&quot; forKey:@&quot;TouchID&quot;];    }}//取消TouchID验证 (用户点击了取消)- (void) WJTouchIDAuthorizeErrorUserCancel {    [[NSUserDefaults standardUserDefaults]setObject:@&quot;YES&quot; forKey:@&quot;touchIDISon&quot;];    if (self.touchIDSwitch.on == YES){        self.touchIDSwitch.on = NO;        [[NSUserDefaults standardUserDefaults] setObject:@&quot;0&quot; forKey:@&quot;TouchID&quot;];    }else    {        self.touchIDSwitch.on = YES;        [[NSUserDefaults standardUserDefaults] setObject:@&quot;1&quot; forKey:@&quot;TouchID&quot;];    }}//在验证的TouchID的过程中被系统取消 例如突然来电话、按了Home键、锁屏- (void) WJTouchIDAuthorizeErrorSystemCancel {    [[NSUserDefaults standardUserDefaults]setObject:@&quot;YES&quot; forKey:@&quot;touchIDISon&quot;];    if (self.touchIDSwitch.on == YES){        self.touchIDSwitch.on = NO;        [[NSUserDefaults standardUserDefaults] setObject:@&quot;0&quot; forKey:@&quot;TouchID&quot;];    }else    {        self.touchIDSwitch.on = YES;        [[NSUserDefaults standardUserDefaults] setObject:@&quot;1&quot; forKey:@&quot;TouchID&quot;];    }}//多次连续使用Touch ID失败，Touch ID被锁，需要用户输入密码解锁- (void) WJTouchIDAuthorizeLAErrorTouchIDLockout {    [[NSUserDefaults standardUserDefaults]setObject:@&quot;YES&quot; forKey:@&quot;touchIDISon&quot;];    [MBProgressHUD showText:@&quot;验证失败&quot; view:self.view];}//当前软件被挂起取消了授权(如突然来了电话,应用进入前台)- (void) WJTouchIDAuthorizeLAErrorAppCancel {    [[NSUserDefaults standardUserDefaults]setObject:@&quot;YES&quot; forKey:@&quot;touchIDISon&quot;];    if (self.touchIDSwitch.on == YES){        self.touchIDSwitch.on = NO;        [[NSUserDefaults standardUserDefaults] setObject:@&quot;0&quot; forKey:@&quot;TouchID&quot;];    }else    {        self.touchIDSwitch.on = YES;        [[NSUserDefaults standardUserDefaults] setObject:@&quot;1&quot; forKey:@&quot;TouchID&quot;];    }}//当前软件被挂起取消了授权 (授权过程中,LAContext对象被释)- (void) WJTouchIDAuthorizeLAErrorInvalidContext {    [[NSUserDefaults standardUserDefaults]setObject:@&quot;YES&quot; forKey:@&quot;touchIDISon&quot;];    if (self.touchIDSwitch.on == YES){        self.touchIDSwitch.on = NO;        [[NSUserDefaults standardUserDefaults] setObject:@&quot;0&quot; forKey:@&quot;TouchID&quot;];    }else    {        self.touchIDSwitch.on = YES;        [[NSUserDefaults standardUserDefaults] setObject:@&quot;1&quot; forKey:@&quot;TouchID&quot;];    }}</code></pre><p>&#160;&#160;&#160;&#160;以上呢，我是没有判断是否支持touchid来写，是直接按照可以支持的来写的，大家在实际操作工程中还是需要加一下判断条件，因为现在还是有不支持touchid的机型的。然后就是要说一下下面这个。</p><pre><code>[[NSUserDefaults standardUserDefaults]setObject:@&quot;YES&quot; forKey:@&quot;touchIDISon&quot;];</code></pre><p>&#160;&#160;&#160;&#160;这个值我也不知道我是用来干嘛的，好像就是告诉我你设置了指纹验证了，然后在app唤醒的时候要根据一个值来判断是否需要调用指纹验证服务，我后来想了想，好像只要</p><pre><code>[[[NSUserDefaults standardUserDefaults]objectForKey:@&quot;TouchID&quot;] isEqualToString:@&quot;1&quot;]</code></pre><p>&#160;&#160;&#160;&#160;这个就可以了，但是仔细想想还是再加上一个好分辨一点，毕竟就把一个当做判断switch是否打开，一个判断唤醒的时候要不要调用的吧。在不同的回调函数里面需要写的东西还是有差别的。这样上面写完之后，就等于实现一个简单的基础页面，当然这个还不是什么大问题，因为这个很简单，下面就是要实现弹出view了。篇幅好像有点长了，我自己看的也有点烦了都。。。。。</p><h2 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h2><h4 id="第一步-1"><a href="#第一步-1" class="headerlink" title="第一步"></a>第一步</h4><p>&#160;&#160;&#160;&#160;创建自定义的view。在.h文件中写入方法</p><pre><code>@interface YLSTouchidView : UIView/** *  快速创建 */+(instancetype)touchIDView;/** *  弹出 */-(void)show;-(void)showInView:(UIView *)view;@end</code></pre><h4 id="第二步-1"><a href="#第二步-1" class="headerlink" title="第二步"></a>第二步</h4><p>&#160;&#160;&#160;&#160;在.m文件中声明控件，设置页面大小，以及遵守协议，在页面出来的同时就要调用验证服务。</p><pre><code>@interface YLSTouchidView()&lt;WJTouchIDDelegate&gt;/** 指纹解锁的button */@property (nonatomic,strong) UIButton *touchIdBtn;/** 头像 */@property (nonatomic,strong) UIImageView *iconView;/** 用户名 */@property (nonatomic,strong) UILabel *nameLabel;/** 提示信息 */@property (nonatomic,strong) UILabel *noticeLabel;/** 手机号 */@property (nonatomic,strong) NSString *phoneNumber;/** 退出按钮 */@property (nonatomic,strong) UIButton *quitBtn;@property (nonatomic, strong) WJTouchID *touchID;@end-(instancetype)initWithFrame:(CGRect)frame{    self = [super initWithFrame:YLSScreenBounds];    if (self)    {        self.backgroundColor = [UIColor orangeColor];    }    //调用指纹解锁    WJTouchID *touchid = [[WJTouchID alloc]init];    [touchid startWJTouchIDWithMessage:WJNotice(@&quot;自定义信息&quot;, @&quot;The Custom Message&quot;) fallbackTitle:WJNotice(@&quot;&quot;, @&quot;Fallback Title&quot;) delegate:self];    self.touchID = touchid;    return self;}</code></pre><h4 id="第三步-1"><a href="#第三步-1" class="headerlink" title="第三步"></a>第三步</h4><p>&#160;&#160;&#160;&#160;设置控件的位置大小等等属性。</p><pre><code>- (void)layoutSubviews{    [super layoutSubviews];    self.iconView = [[UIImageView alloc]init];    [self.iconView setFrame:ZLRect(128/320, 54/568, 65/320, 65/568)];    [self.iconView setImage:[UIImage imageNamed:@&quot;icon_myinformation&quot;]];    [self addSubview:self.iconView];    self.nameLabel = [[UILabel alloc]init];    [self.nameLabel setFrame:ZLRect(0, 125/568, 1, 28/568)];    [self.nameLabel setText:@&quot;151****1234&quot;];    [self.nameLabel setFont:[UIFont systemFontOfSize:ZCFont(15/375)]];    [self.nameLabel setTextColor:[UIColor whiteColor]];    [self.nameLabel setTextAlignment:NSTextAlignmentCenter];    [self addSubview:self.nameLabel];    self.touchIdBtn = [[UIButton alloc]init];    [self.touchIdBtn setFrame:ZLRect(120/320, 250/568, 80/320, 80/568)];    [self.touchIdBtn setImage:[UIImage imageNamed:@&quot;touchImg&quot;] forState:UIControlStateNormal];    [self.touchIdBtn addTarget:self action:@selector(clickToCheckTouchID) forControlEvents:UIControlEventTouchUpInside];    [self addSubview:self.touchIdBtn];    self.noticeLabel = [[UILabel alloc]init];    [self.noticeLabel setFrame:ZLRect(0, 339/568, 1, 22/568)];    [self.noticeLabel setText:@&quot;点击进行指纹解锁&quot;];    [self.noticeLabel setTextColor:[UIColor whiteColor]];    [self.noticeLabel setTextAlignment:NSTextAlignmentCenter];    [self.noticeLabel setFont:[UIFont systemFontOfSize:ZCFont(16/375)]];    [self addSubview:self.noticeLabel];    self.quitBtn = [[UIButton alloc]init];    [self.quitBtn setFrame:ZLRect(0, 520/568, 1, 30/568)];    [self.quitBtn setTitle:@&quot;退出&quot; forState:UIControlStateNormal];    [self.quitBtn addTarget:self action:@selector(quitContent) forControlEvents:UIControlEventTouchUpInside];    [self addSubview:self.quitBtn];}</code></pre><h4 id="第四步-1"><a href="#第四步-1" class="headerlink" title="第四步"></a>第四步</h4><p>&#160;&#160;&#160;&#160;实现控件的点击方法，以及在.h文件中声明的弹出方法</p><pre><code>//快速创建+ (instancetype)touchIDView{    return [[self alloc]init];}/** 弹出 */- (void)show{    [self showInView:[UIApplication sharedApplication].keyWindow];}    - (void)showInView:(UIView *)view{    // 浮现    [view addSubview:self];}-(void)clickToCheckTouchID{    NSLog(@&quot;点击了指纹解锁&quot;);    [self.touchID startWJTouchIDWithMessage:WJNotice(@&quot;自定义信息&quot;, @&quot;The Custom Message&quot;) fallbackTitle:WJNotice(@&quot;&quot;, @&quot;Fallback Title&quot;) delegate:self];}-(void)quitContent{       NSLog(@&quot;点击了quit&quot;);    [UIView animateWithDuration:3 animations:^{        self.alpha = 0;    } completion:^(BOOL finished) {        [self removeFromSuperview];    }];}</code></pre><p>&#160;&#160;&#160;&#160;上面再退出的时候我还加了一个小小的特效，就是颜色渐渐变成无色，这样有时候可以遮盖你app里面的一些小问题。偷个懒。</p><h4 id="第五步-1"><a href="#第五步-1" class="headerlink" title="第五步"></a>第五步</h4><p>&#160;&#160;&#160;&#160;这里也是跟第一部分一样，实现验证的回调函数。这边的回调函数呢，跟之前的差不多，但是里面的内容就不一样了。而且我这里把不支持touchid的方法加进来，按理说这边是不需要加的，但是我前面没加进来，这里就硬塞进来吧。。。大家就凑合着看，自己用的时候可以直接删掉，不删掉也没事，就是增加点代码量而已。。。</p><pre><code>/** *  TouchID验证成功 */- (void) WJTouchIDAuthorizeSuccess {    [MBProgressHUD showText:@&quot;解锁成功&quot; view:self];    [[NSUserDefaults standardUserDefaults]setObject:@&quot;YES&quot; forKey:@&quot;touchIDISon&quot;];//    [self dismissViewControllerAnimated:YES completion:nil];    [self removeFromSuperview];}/** *  TouchID验证失败 */- (void) WJTouchIDAuthorizeFailure {    [MBProgressHUD showText:@&quot;解锁失败&quot; view:self];    [[NSUserDefaults standardUserDefaults]setObject:@&quot;YES&quot; forKey:@&quot;touchIDISon&quot;];}/** *  取消TouchID验证 (用户点击了取消) */- (void) WJTouchIDAuthorizeErrorUserCancel {    [[NSUserDefaults standardUserDefaults]setObject:@&quot;YES&quot; forKey:@&quot;touchIDISon&quot;];}/** *  在验证的TouchID的过程中被系统取消 例如突然来电话、按了Home键、锁屏... */- (void) WJTouchIDAuthorizeErrorSystemCancel {    [[NSUserDefaults standardUserDefaults]setObject:@&quot;YES&quot; forKey:@&quot;touchIDISon&quot;];}/** *  无法启用TouchID,设备没有设置密码 */- (void) WJTouchIDAuthorizeErrorPasscodeNotSet {    [[NSUserDefaults standardUserDefaults]setObject:@&quot;YES&quot; forKey:@&quot;touchIDISon&quot;];}/** *  设备没有录入TouchID,无法启用TouchID */- (void) WJTouchIDAuthorizeErrorTouchIDNotEnrolled {    [[NSUserDefaults standardUserDefaults]setObject:@&quot;YES&quot; forKey:@&quot;touchIDISon&quot;];}/** *  该设备的TouchID无效 */- (void) WJTouchIDAuthorizeErrorTouchIDNotAvailable {    [[NSUserDefaults standardUserDefaults]setObject:@&quot;YES&quot; forKey:@&quot;touchIDISon&quot;];}/** *  多次连续使用Touch ID失败，Touch ID被锁，需要用户输入密码解锁 */- (void) WJTouchIDAuthorizeLAErrorTouchIDLockout {    [[NSUserDefaults standardUserDefaults]setObject:@&quot;YES&quot; forKey:@&quot;touchIDISon&quot;];}/** *  当前软件被挂起取消了授权(如突然来了电话,应用进入前台) */- (void) WJTouchIDAuthorizeLAErrorAppCancel {    [[NSUserDefaults standardUserDefaults]setObject:@&quot;YES&quot; forKey:@&quot;touchIDISon&quot;];}/** *  当前软件被挂起取消了授权 (授权过程中,LAContext对象被释) */- (void) WJTouchIDAuthorizeLAErrorInvalidContext {    [[NSUserDefaults standardUserDefaults]setObject:@&quot;YES&quot; forKey:@&quot;touchIDISon&quot;];}/** *  当前设备不支持指纹识别 */-(void)WJTouchIDIsNotSupport {    [[NSUserDefaults standardUserDefaults]setObject:@&quot;YES&quot; forKey:@&quot;touchIDISon&quot;];}</code></pre><h2 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h2><p>&#160;&#160;&#160;&#160;这里呢，是最重要的地方，也是最简单的地方，只要在appdelegate.m文件中加上几句话就可以实现了。<br>在下面这个方法里面写，下面这个方法是呢app被唤醒进入活跃状态的方法</p><pre><code>- (void)applicationDidBecomeActive:(UIApplication *)application</code></pre><p>&#160;&#160;&#160;&#160;这边的知识点其实还挺多的，就是一个生命周期的问题，一个app运行完成，即将进入活跃状态，已经进入活跃状态，即将进入后台，已经进入后台状态，这几种状态，在之前我还想着声明一个变量让app在后台运行的时候，也跟着运行，类似于一个计时器，但是我看了网上的一些想要让app后台挂起的时候还能运行一些东西，设置过程就好几种，而且很多都说上架的时候审核是不给过得，想着有时间的话可以好好研究下那些方法，这里我就没有弄，所以才有了上面的</p><pre><code>[[NSUserDefaults standardUserDefaults]setObject:@&quot;YES&quot; forKey:@&quot;touchIDISon&quot;];</code></pre><p>&#160;&#160;&#160;&#160;这个值，本来也是设置成计时器的，但是这样好像更方便点，就这么设置了，因为为了全局都可以取到这个值。<br>&#160;&#160;&#160;&#160;在唤醒方法中写下代码</p><pre><code>- (void)applicationDidBecomeActive:(UIApplication *)application {    NSString *touchIDExist = [[NSUserDefaults standardUserDefaults]objectForKey:@&quot;TouchID&quot;];    NSString *touchISOn = [[NSUserDefaults standardUserDefaults]objectForKey:@&quot;touchIDISon&quot;];    if ([touchIDExist isEqualToString:@&quot;1&quot;] &amp;&amp; [touchISOn isEqualToString:@&quot;NO&quot;])    {        YLSTouchidView *yls = [[YLSTouchidView alloc]init];        [yls show];    }    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(20 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{        [[NSUserDefaults standardUserDefaults]setObject:@&quot;NO&quot; forKey:@&quot;touchIDISon&quot;];       });}</code></pre><p>&#160;&#160;&#160;&#160;下面那个呢就是为了防止重复调用，因为好像当页面出现指纹验证的弹出框的时候，app似乎就是被挂起到后台了，然后唤醒的时候又要被调用，所以这里出现了一个重复调用的问题，然后我就找个不是办法的办法来解决这个问题。就是用上面这段代码来处理，具体道理我也不知道咋说，就这么迷迷糊糊的实现了功能。这样子就是完成了一个指纹验证以及app唤醒的时候指纹解锁的一个小demo。present出来一个单独的页面的方式其实跟这个差不多，但是这篇文章的篇幅好像有点太长了，估计也没什么人看到最后，所以我就不写了，啥时候想补的话再补上来吧。</p><h4 id="还有就是，本人作为新手，上面代码有啥问题的话，或者有啥可以优化的地方，希望大家可以指正，可以了留言跟我讨论，或者是私信啥的，都可以，大家一起共同进步共同学习。"><a href="#还有就是，本人作为新手，上面代码有啥问题的话，或者有啥可以优化的地方，希望大家可以指正，可以了留言跟我讨论，或者是私信啥的，都可以，大家一起共同进步共同学习。" class="headerlink" title="还有就是，本人作为新手，上面代码有啥问题的话，或者有啥可以优化的地方，希望大家可以指正，可以了留言跟我讨论，或者是私信啥的，都可以，大家一起共同进步共同学习。"></a><strong>还有就是，本人作为新手，上面代码有啥问题的话，或者有啥可以优化的地方，希望大家可以指正，可以了留言跟我讨论，或者是私信啥的，都可以，大家一起共同进步共同学习。</strong></h4>]]></content>
      
      
    </entry>
    
    <entry>
      <title>web学习笔记04-EsLint入门学习</title>
      <link href="/2016/09/20/web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B004-EsLint%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2016/09/20/web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B004-EsLint%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h4 id="160-160-160-160-这两天因为公司要求，就对ESLint进行了初步的了解，网上的内容基本上都差不多，但是内容有些乱，我这呢，就跟着大部分的文章，以及官方文档整理出了一篇入门学习的文字，技术点不算特别全，但是对于新手的我来说是够的，文章的篇幅很长，内容可能有些累赘，但是按着步骤一步一步来，基本上看完也就可以对ESLint有个初步的了解了，此外一些相关文档网上还是有很多的，一些单个比较重要的技术点，网上也都会有相关的文章做了详细的描述，我这篇文章针对的就是对eslint完全不了解的小伙伴们。比较我就是比较新手的，最近算是转型吧，写了一段时间的移动端，技术没咋练好，就被要求做前端的东西，脑子里也是一团浆糊，公司又要求研究些东西，刚接触的时候完全懵逼，现在慢慢地有点喜欢上前端了，最近也在开始补习web基础，发现需要学习的东西好多啊。希望大家要是有兴趣的话可以跟我做个朋友，以前讨论讨论技术的事情，互相学习一下下。"><a href="#160-160-160-160-这两天因为公司要求，就对ESLint进行了初步的了解，网上的内容基本上都差不多，但是内容有些乱，我这呢，就跟着大部分的文章，以及官方文档整理出了一篇入门学习的文字，技术点不算特别全，但是对于新手的我来说是够的，文章的篇幅很长，内容可能有些累赘，但是按着步骤一步一步来，基本上看完也就可以对ESLint有个初步的了解了，此外一些相关文档网上还是有很多的，一些单个比较重要的技术点，网上也都会有相关的文章做了详细的描述，我这篇文章针对的就是对eslint完全不了解的小伙伴们。比较我就是比较新手的，最近算是转型吧，写了一段时间的移动端，技术没咋练好，就被要求做前端的东西，脑子里也是一团浆糊，公司又要求研究些东西，刚接触的时候完全懵逼，现在慢慢地有点喜欢上前端了，最近也在开始补习web基础，发现需要学习的东西好多啊。希望大家要是有兴趣的话可以跟我做个朋友，以前讨论讨论技术的事情，互相学习一下下。" class="headerlink" title="&#160;&#160;&#160;&#160;这两天因为公司要求，就对ESLint进行了初步的了解，网上的内容基本上都差不多，但是内容有些乱，我这呢，就跟着大部分的文章，以及官方文档整理出了一篇入门学习的文字，技术点不算特别全，但是对于新手的我来说是够的，文章的篇幅很长，内容可能有些累赘，但是按着步骤一步一步来，基本上看完也就可以对ESLint有个初步的了解了，此外一些相关文档网上还是有很多的，一些单个比较重要的技术点，网上也都会有相关的文章做了详细的描述，我这篇文章针对的就是对eslint完全不了解的小伙伴们。比较我就是比较新手的，最近算是转型吧，写了一段时间的移动端，技术没咋练好，就被要求做前端的东西，脑子里也是一团浆糊，公司又要求研究些东西，刚接触的时候完全懵逼，现在慢慢地有点喜欢上前端了，最近也在开始补习web基础，发现需要学习的东西好多啊。希望大家要是有兴趣的话可以跟我做个朋友，以前讨论讨论技术的事情，互相学习一下下。"></a>&#160;&#160;&#160;&#160;这两天因为公司要求，就对ESLint进行了初步的了解，网上的内容基本上都差不多，但是内容有些乱，我这呢，就跟着大部分的文章，以及官方文档整理出了一篇入门学习的文字，技术点不算特别全，但是对于新手的我来说是够的，文章的篇幅很长，内容可能有些累赘，但是按着步骤一步一步来，基本上看完也就可以对ESLint有个初步的了解了，此外一些相关文档网上还是有很多的，一些单个比较重要的技术点，网上也都会有相关的文章做了详细的描述，我这篇文章针对的就是对eslint完全不了解的小伙伴们。比较我就是比较新手的，最近算是转型吧，写了一段时间的移动端，技术没咋练好，就被要求做前端的东西，脑子里也是一团浆糊，公司又要求研究些东西，刚接触的时候完全懵逼，现在慢慢地有点喜欢上前端了，最近也在开始补习web基础，发现需要学习的东西好多啊。希望大家要是有兴趣的话可以跟我做个朋友，以前讨论讨论技术的事情，互相学习一下下。</h4><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>&#160;&#160;&#160;&#160;<strong>ESLint</strong> 是由 <strong>Nicholas C. Zakas</strong> 编写的一个可扩展、每条规则独立、不内置编码风格为理念的 <strong>Lint</strong> 工具。 </p><p>&#160;&#160;&#160;&#160;在团队协作中，为避免低级 Bug、产出风格统一的代码，会预先制定编码规范。使用 Lint 工具和代码风格检测工具，则可以辅助编码规范执行，有效控制代码质量。EsLint帮助我们检查<strong>Javascript</strong>编程时的语法错误。比如：在<strong>Javascript</strong>应用中，你很难找到你漏泄的变量或者方法。<strong>EsLint</strong>能够帮助我们分析JS代码，找到bug并确保一定程度的JS语法书写的正确性。</p><p>&#160;&#160;&#160;&#160;<strong>EsLint</strong>是建立在<strong>Esprima</strong>(<strong>ECMAScript</strong>解析架构)的基础上的。<strong>Esprima</strong>支持ES5.1,本身也是用<strong>ECMAScript</strong>编写的，用于多用途分析。<strong>EsLint</strong>不但提供一些默认的规则（可扩展），也提供用户自定义规则来约束我们写的<strong>Javascript</strong>代码。</p><p>&#160;&#160;&#160;&#160;ESLint是确定和报告模式的工具中发现<strong>ECMAScript</strong> / <strong>JavaScript</strong>代码,使代码更一致的目标和避免错误。在许多方面,它类似于<strong>JSLint</strong>和<strong>JSHint</strong>，但是也有部分不同。</p><p>特定：</p><ul><li>ESLint使用Espree JavaScript解析。</li><li>ESLint使用AST评估模式的代码。</li><li>ESLint完全可插入式的,每一个规则是一个插件,支持插件扩展、自定义规则。</li><li>默认规则包含所有 JSLint、JSHint 中存在的规则，易迁移；</li><li>规则可配置性高：可设置「警告」、「错误」两个 error 等级，或者直接禁用；</li><li>包含代码风格检测的规则（可以丢掉 JSCS 了）；</li></ul><p>EsLint提供以下支持：</p><ul><li>ES6</li><li>AngularJS</li><li>JSX</li><li>Style检查</li><li>自定义错误和提示</li></ul><p>EsLint提供以下几种校验：</p><ul><li>语法错误校验</li><li>不重要或丢失的标点符号，如分号</li><li>没法运行到的代码块（使用过WebStorm的童鞋应该了解）</li><li>未被使用的参数提醒</li><li>漏掉的结束符，如}</li><li>确保样式的统一规则，如sass或者less</li><li>检查变量的命名</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>&#160;&#160;&#160;&#160;有两种方法来安装<strong>ESLint</strong>:全局安装和本地安装。</p><h4 id="1-本地安装"><a href="#1-本地安装" class="headerlink" title="1.本地安装"></a>1.本地安装</h4><p>如果你想包括ESLint作为你的项目构建系统的一部分,我们建议在本地安装。你可以使用npm:</p><pre><code>$ npm install eslint --save-dev</code></pre><p>你应该设置一个配置文件:</p><pre><code>$ ./node_modules/.bin/eslint --init</code></pre><p>之后,您可以运行ESLint在任何文件或目录如下:</p><pre><code>$ ./node_modules/.bin/eslint yourfile.js</code></pre><p>yourfile.js是你需要测试的js文件。你使用的任何插件或共享配置必须安装在本地来与安装在本地的ESLint一起工作。</p><h4 id="2-全局安装"><a href="#2-全局安装" class="headerlink" title="2.全局安装"></a>2.全局安装</h4><p>如果你想让ESLint可用到所有的项目,我们建议安装ESLint全局安装。你可以使用npm:</p><pre><code>npm install -g eslint</code></pre><p>你应该设置一个配置文件:</p><pre><code>eslint --init</code></pre><p>之后,您可以在任何文件或目录运行ESLint:</p><pre><code>eslint yourfile.js</code></pre><h5 id="PS：eslint-–init是用于每一个项目设置和配置eslint-并将执行本地安装的ESLint及其插件的目录。如果你喜欢使用全局安装的ESLint，在你配置中使用的任何插件都必须是全局安装的。"><a href="#PS：eslint-–init是用于每一个项目设置和配置eslint-并将执行本地安装的ESLint及其插件的目录。如果你喜欢使用全局安装的ESLint，在你配置中使用的任何插件都必须是全局安装的。" class="headerlink" title="PS：eslint –init是用于每一个项目设置和配置eslint,并将执行本地安装的ESLint及其插件的目录。如果你喜欢使用全局安装的ESLint，在你配置中使用的任何插件都必须是全局安装的。"></a>PS：eslint –init是用于每一个项目设置和配置eslint,并将执行本地安装的ESLint及其插件的目录。如果你喜欢使用全局安装的ESLint，在你配置中使用的任何插件都必须是全局安装的。</h5><h4 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h4><ul><li><p>新建一个项目：<br>  <img src="http://upload-images.jianshu.io/upload_images/1062695-c187438b213fec23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建项目"></p></li><li><p>创建package.json文件</p><pre><code>npm init</code></pre><p>  <img src="http://upload-images.jianshu.io/upload_images/1062695-2400e7ee232eff77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="npm init"></p></li></ul><ul><li><p>安装ESLint</p><pre><code>npm install -g eslint</code></pre><p>  <img src="http://upload-images.jianshu.io/upload_images/1062695-6fa26dffea88fa40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="npm install -g eslint"></p></li><li><p>创建和编写简单的js文件<br>&#160;&#160;&#160;&#160;创建index.js文件，里面写一个函数，就直接用别人写的一个简单的函数用用吧。</p><pre><code>function merge () {  var ret = {};  for (var i in arguments) {    var m = arguments[i];    for (var j in m) ret[j] = m[j];  }  return ret;}console.log(merge({a: 123}, {b: 456}));</code></pre></li><li><p>执行<code>node index.js</code>，输出结果为{ a: 123, b: 456 }</p><pre><code> appledeMacBook-Pro:testEslint apple$ node index.js{ a: 123, b: 456 }</code></pre></li></ul><ul><li><p>使用eslint检查</p><pre><code>eslint index.js</code></pre><p>  <img src="http://upload-images.jianshu.io/upload_images/1062695-35360d2dd0822ea2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="eslint index.js"></p></li></ul><p>&#160;&#160;&#160;&#160;执行结果是失败，因为没有找到相应的配置文件，个人认为这个eslint最重要的就是配置问题。</p><ul><li><p>新建配置文件</p><pre><code>eslint --init</code></pre><p>  &#160;&#160;&#160;&#160;不过这个生成的额文件里面已经有一些配置了，把里面的内容大部分删除。留下个extends，剩下的自己填就可以了</p><pre><code>module.exports = {    &quot;extends&quot;: &quot;eslint:recommended&quot;};</code></pre><p>  &#160;&#160;&#160;&#160;eslint:recommended配置，它包含了一系列核心规则，能报告一些常见的问题。</p></li><li><p>重新执行eslint index.js</p><p>  <img src="http://upload-images.jianshu.io/upload_images/1062695-826297c1dbc87c93.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="eslint index.js"><br>  &#160;&#160;&#160;&#160;<strong>Unexpected console statement no-console - 不能使用console</strong><br>  &#160;&#160;&#160;&#160;<strong>‘console’ is not defined     no-undef - console变量未定义，不能使用未定义的变量</strong><br>  &#160;&#160;&#160;&#160;一条一条解决，不能使用console的提示，那我们就禁用no-console就好了，在配置文件中添加rules</p><pre><code>module.exports = {      extends: &apos;eslint:recommended&apos;,      rules: {        &apos;no-console&apos;: &apos;off&apos;,      },};</code></pre><p>  &#160;&#160;&#160;&#160;配置规则写在rules对象里面，key表示规则名称，value表示规则的配置。<br>  &#160;&#160;&#160;&#160;然后就是解决<strong>no-undef</strong>:出错的原因是因为JavaScript有很多种运行环境，比如常见的有浏览器和Node.js，另外还有很多软件系统使用JavaScript作为其脚本引擎，比如PostgreSQL就支持使用JavaScript来编写存储引擎，而这些运行环境可能并不存在console这个对象。另外在浏览器环境下会有window对象，而Node.js下没有；在Node.js下会有process对象，而浏览器环境下没有。<br>  所以在配置文件中我们还需要指定程序的目标环境：</p><pre><code>module.exports = {      extends: &apos;eslint:recommended&apos;,      env: {        node: true,      },      rules: {        &apos;no-console&apos;: &apos;off&apos;,      }};</code></pre><p>  &#160;&#160;&#160;&#160;再重新执行检查时，就没有任何提示输出了，说明index.js已经完全通过了检查。</p></li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>&#160;&#160;&#160;&#160;ESLint设计出来就是可以配置的，挺自由的，你可以关闭任何一条规则，只运行基本语法验证。有两种主要的方式来配置：</p><ul><li><strong>Configuration Comments</strong> - 使用 JavaScript 注释把配置信息直接嵌入到一个文件。</li><li><strong>Configuration Files</strong> - 使用 JavaScript、JSON 或者 YAML 文件为整个目录和它的子目录指定配置信息。可以用 .eslintrc.* 文件或者在 package.json 文件里的 eslintConfig 字段这两种方式进行配置，ESLint 会查找和自动读取它们，再者，你可以在命令行指定一个配置文件。</li></ul><p>&#160;&#160;&#160;&#160;有很多信息可以配置：</p><ul><li><strong>Environments</strong> - 指定脚本的运行环境。每种环境都有一组特定的预定义全局变量。</li><li><strong>Globals</strong> - 脚本在执行期间访问的额外的全局变量</li><li><strong>Rules</strong> - 启用的规则及各自的错误级别</li></ul><p>&#160;&#160;&#160;&#160;在配置文件。<strong>eslintrc.js</strong>中写配置内容，可以将<strong>module.exports</strong>内的内容直接写到<strong>package.json</strong>里用字段<strong>eslintConfig</strong>括起来就可以了。也可以在执行<strong>eslint</strong>命令是通过命令行参数来指定。</p><p>&#160;&#160;&#160;&#160;配置的详细说明文档可以参考这里：<a href="http://eslint.cn/docs/user-guide/configuring" target="_blank" rel="noopener">Configuring ESLint</a></p><h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><p>&#160;&#160;&#160;&#160;我们<strong>eslintrc.js</strong>中的ruls中不仅仅是只有诸如<strong>‘no-console’: ‘off’</strong>的规则，更多的是像下面这样的规则。</p><pre><code>{    &quot;rules&quot;: {           &quot;semi&quot;: [&quot;error&quot;, &quot;always&quot;],        &quot;quotes&quot;: [&quot;error&quot;, &quot;double&quot;]    }}</code></pre><p>&#160;&#160;&#160;&#160;这里的<strong>“semi”</strong> 和<strong> “quotes” </strong>是 ESLint 中 规则 的名称。中括号中第一个是错误级别。每条规则又三个取值：</p><ul><li>“off” or 0 - 关闭(禁用)规则</li><li>“warn” or 1 - 将规则视为一个警告（并不会导致检查不通过）</li><li>“error” or 2 - 将规则视为一个错误 (退出码为1，检查不通过)</li></ul><p>&#160;&#160;&#160;&#160;有些规则还带有可选的参数，比如comma-dangle可以写成[ “error”, “always-multiline” ]；no-multi-spaces可以写成[ “error”, { exceptions: { “ImportDeclaration”: true }}]。</p><p>&#160;&#160;&#160;&#160;配置和规则的内容有不少，将会另出一篇文介绍。</p><p>&#160;&#160;&#160;&#160;规则的详细说明文档可以参考这里：<a href="http://eslint.cn/docs/rules/" target="_blank" rel="noopener">Rules</a></p><h2 id="使用共享的配置文件"><a href="#使用共享的配置文件" class="headerlink" title="使用共享的配置文件"></a>使用共享的配置文件</h2><p>&#160;&#160;&#160;&#160;我们使用配置js文件是以<strong>extends: ‘eslint:recommended’</strong>为基础配置，但是大多数时候我们需要制定很多规则，在一个文件中写入会变得很臃肿，管理起来会很麻烦。</p><p>&#160;&#160;&#160;&#160;我们可以将定义好规则的<strong>.eslintrc.js</strong>文件存储到一个公共的位置。改个名字比如<strong>public-eslintrc.js</strong>。在文件内容添加一两个规则。</p><pre><code>module.exports = {  extends: &apos;eslint:recommended&apos;,  env: {    node: true,  },  rules: {    &apos;no-console&apos;: &apos;off&apos;,    &apos;indent&apos;: [ &apos;error&apos;, 4 ],    &apos;quotes&apos;: [ &apos;error&apos;, &apos;single&apos; ],      },};</code></pre><p>&#160;&#160;&#160;&#160;然后原来的<strong>.eslintrc.js</strong>文件内容稍微变化下，删掉规则啥的，留下一个<strong>extends</strong>。</p><pre><code>module.exports = {      extends: &apos;./public-eslintrc.js&apos;,};</code></pre><p>&#160;&#160;&#160;&#160;这个要测试的是啥呢，就是看看限定缩进是4个空格和使用单引号的字符串等，然后测试下，运行<strong>eslint index.js</strong>，得到的结果是没有问题的，但是如果在<code>index.js</code>中的<code>var ret = {};</code>前面加个空格啥的，结果就立马不一样了。<br><img src="http://upload-images.jianshu.io/upload_images/1062695-7abd726abecfca07.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="eslint index.js"></p><p>&#160;&#160;&#160;&#160;这时候提示第7行的是缩进应该是8个空格，而文件的第7行却发现了9个空格，说明公共配置文件public-eslintrc.js已经生效了。</p><p>&#160;&#160;&#160;&#160;除了这些基本的配置以外，在npm上有很多已经发布的ESLint配置，也可以通过安装使用。配置名字一般都是<strong>eslint-config-</strong>为前缀，一般我们用的eslint是全局安装的，那用的<strong>eslint-config-</strong>模块也必须是全局安装，不然没法载入。</p><p>&#160;&#160;&#160;&#160;下面是官网的一些资料：<br>&#160;&#160;&#160;&#160;<a href="http://eslint.cn/docs/user-guide/configuring#using-a-shareable-configuration-package" target="_blank" rel="noopener">使用共享的模块</a><br>&#160;&#160;&#160;&#160;<a href="http://eslint.cn/docs/user-guide/configuring#using-the-configuration-from-a-plugin" target="_blank" rel="noopener">使用插件</a><br>&#160;&#160;&#160;&#160;<a href="http://eslint.cn/docs/user-guide/configuring#using-a-configuration-file" target="_blank" rel="noopener">使用配置文件</a>  </p><p>&#160;&#160;&#160;&#160;在这提一下，<a href="http://eslint.cn/docs/rules/" target="_blank" rel="noopener">Rules</a>页面的很多规则后面都有一个橙色的小扳手标识，这个标识在执行</p><pre><code>eslint index.js --fix</code></pre><p>的时候，–fix参数可以自动修复该问题。<br>&#160;&#160;&#160;&#160;比如我们在规则中添加一条no-extra-semi: 禁止不必要的分号。</p><pre><code>&apos;no-extra-semi&apos;:&apos;error&apos;</code></pre><p>&#160;&#160;&#160;&#160;然后，我们在index.js最后多添加一个分号</p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-f9dc5ca53e9a1498.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="不必要的分号"></p><p>&#160;&#160;&#160;&#160;执行eslint index.js，得到结果如下：<br><img src="http://upload-images.jianshu.io/upload_images/1062695-499a2c6182d6692d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="不必要的分号"></p><p>&#160;&#160;&#160;&#160;我们再执行</p><pre><code>eslint index.js --fix</code></pre><p>就会自动修复，index.js那个多余的分号也就被修复消失不见了。</p><h2 id="发布自己的配置"><a href="#发布自己的配置" class="headerlink" title="发布自己的配置"></a>发布自己的配置</h2><p>&#160;&#160;&#160;&#160;共享的配置文件那一节里面已经说了，因为项目中需要配置的内容太多，所以可以在extends中指定一个文件名，或者一个eslint-config-开头的模块名。为了便于共享，一般推荐将其发布成一个NPM模块。</p><p>&#160;&#160;&#160;&#160;其原理就是在载入模块时输出原来.eslintrc.js的数据。比如我们可以创建一个模块 <code>eslint-config-my</code> 用于测试。 </p><p>&#160;&#160;&#160;&#160;创建文件夹和文件：<br><img src="http://upload-images.jianshu.io/upload_images/1062695-a61613cb99752918.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建文件"></p><p>&#160;&#160;&#160;&#160;my-config.js:</p><pre><code>module.exports = {    extends: &apos;eslint:recommended&apos;,    env: {            node: true,           es6: true       },    rules: {        &apos;no-console&apos;: &apos;off&apos;,        &apos;indent&apos;: [ &apos;error&apos;, 4 ],        &apos;quotes&apos;: [ &apos;error&apos;, &apos;single&apos; ]    }};</code></pre><p>&#160;&#160;&#160;&#160;package.json:</p><pre><code>{      &quot;name&quot;: &quot;application-name1&quot;,      &quot;version&quot;: &quot;0.0.1&quot;,      &quot;main&quot;:&quot;my-config.js&quot;}</code></pre><p>&#160;&#160;&#160;&#160;为了能让 eslint 正确载入这个模块，我们需要执行 npm link 将这个模块链接到本地全局位置：</p><pre><code>npm link eslint-config-my</code></pre><p>&#160;&#160;&#160;&#160;然后将文件 .eslintrc.js 改成：</p><pre><code>module.exports = {      extends: &apos;my&apos;,}; </code></pre><p>&#160;&#160;&#160;&#160;提醒：在 extends 中， eslint-config-my 可简写为 <strong>my</strong> 。</p><p>&#160;&#160;&#160;&#160;在执行 <code>eslint merge.js</code> 检查，可看到没有任何错误提示信息，说明 eslint 已经成功载入了 <code>eslint-config-my</code> 的配置。如果我们使用 <code>npm publish</code> 将其发布到 NPM 上，那么其他人通过 <code>npm install eslint-config-my</code> 即可使用我们共享的这个配置。</p><p>&#160;&#160;&#160;&#160;在<code>eslint --init</code>初始化文件的时候，有一些默认的数据项，我就简单的说一下。</p><pre><code>module.exports = {&quot;env&quot;: {},&quot;extends&quot;: &quot;&quot;,&quot;rules&quot;: {}};</code></pre><ul><li><p>parserOptions  </p><p>  &#160;&#160;&#160;&#160;EsLint通过parserOptions，允许指定校验的ecma的版本，及ecma的一些特性</p><pre><code>{    &quot;parserOptions&quot;: {        &quot;ecmaVersion&quot;: 6, //指定ECMAScript支持的版本，6为ES6        &quot;sourceType&quot;: &quot;module&quot;, //指定来源的类型，有两种”script”或”module”        &quot;ecmaFeatures&quot;: {            &quot;jsx&quot;: true//启动JSX        },    }}</code></pre></li><li><p>Parser  </p><p>  &#160;&#160;&#160;&#160;EsLint默认使用esprima做脚本解析，当然你也切换他，比如切换成        babel-eslint解析</p><pre><code>{    &quot;parser&quot;: &quot;esprima&quot; //默认，可以设置成babel-eslint，支持jsx}</code></pre></li><li><p>Environments  </p><p>  &#160;&#160;&#160;&#160;Environment可以预设好的其他环境的全局变量，如brower、node环境变量、es6环境变量、mocha环境变量等</p><pre><code>{    &quot;env&quot;: {        &quot;browser&quot;: true,        &quot;node&quot;: true    }}</code></pre><p>  &#160;&#160;&#160;&#160;如果你想使用插件中的环境变量，你可以使用plugins指定，如下</p><pre><code>{    &quot;plugins&quot;: [&quot;example&quot;],    &quot;env&quot;: {        &quot;example/custom&quot;: true    }}</code></pre></li><li><p>Globals</p><p>  &#160;&#160;&#160;&#160;指定你所要使用的全局变量，true代表允许重写、false代表不允许重写</p><pre><code>{    &quot;globals&quot;: {           &quot;var1&quot;: true,        &quot;var2&quot;: false    }}</code></pre></li></ul><ul><li><p>Plugins</p><p>  &#160;&#160;&#160;&#160;EsLint允许使用第三方插件</p><pre><code>{    &quot;plugins&quot;: [        &quot;react&quot;         ]}</code></pre></li><li><p>Rules</p><p>  &#160;&#160;&#160;&#160;这个就是上面说的规则。</p></li></ul><h2 id="自定义规则"><a href="#自定义规则" class="headerlink" title="自定义规则"></a>自定义规则</h2><p>&#160;&#160;&#160;&#160;ESLint自带的规则一般都不会很全面，在实际的项目中，我们要根据自己的需求来创建自己的规则。这也算的上是ESLint最有特色的地方了。</p><p>&#160;&#160;&#160;&#160;在我看来，发布自己的配置，其实就是要先自定义规则，自己的配置中加上自定义的规则，应该会比较适合实际项目中的使用。</p><p>&#160;&#160;&#160;&#160;以 eslint-plugin-react 为例，安装以后，需要在 ESLint 配置中开启插件，其中 eslint-plugin- 前缀可以省略：</p><pre><code>{      &quot;plugins&quot;: [          &quot;react&quot;      ]}</code></pre><p>接下来开启 ESLint JSX 支持（ESLint 内置选项）：</p><pre><code>{      &quot;ecmaFeatures&quot;: {        &quot;jsx&quot;: true      }}</code></pre><p>然后就可以配置插件提供的规则了：</p><pre><code>{      &quot;rules&quot;: {           &quot;react/display-name&quot;: 1,        &quot;react/jsx-boolean-value&quot;: 1      }}</code></pre><p>自定义规则都是以插件名称为命名空间的。</p><h2 id="工作流集成"><a href="#工作流集成" class="headerlink" title="工作流集成"></a>工作流集成</h2><p>&#160;&#160;&#160;&#160;ESLint 可以集成到主流的编辑器和构建工具中，以便我们在编写的代码的同时进行 lint。</p><h5 id="编辑器集成"><a href="#编辑器集成" class="headerlink" title="编辑器集成"></a>编辑器集成</h5><p>&#160;&#160;&#160;&#160;以 WebStorm 为例，只要全局安装 ESLint 或者在项目中依赖中添加 ESLint ，然后在设置里开启 ESLint 即可。其他编辑可以从官方文档中获得获得具体信息。</p><h5 id="构建系统集成"><a href="#构建系统集成" class="headerlink" title="构建系统集成"></a>构建系统集成</h5><p>&#160;&#160;&#160;&#160;在 Gulp 中使用：</p><pre><code>var gulp = require(&apos;gulp&apos;);  var eslint = require(&apos;gulp-eslint&apos;);gulp.task(&apos;lint&apos;, function() {        return gulp.src(&apos;client/app/**/*.js&apos;)    .pipe(eslint())    .pipe(eslint.format());});</code></pre><p>其他构建工具参考官方文档。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h5 id="160-160-160-160-以上呢，就是我花了两天整理的一些资料，不能算很全，但是对于像我这样的新手进行的初步了解应该是够了，之后可能有时间的话会陆续的整理一些相关的资料发布出来。"><a href="#160-160-160-160-以上呢，就是我花了两天整理的一些资料，不能算很全，但是对于像我这样的新手进行的初步了解应该是够了，之后可能有时间的话会陆续的整理一些相关的资料发布出来。" class="headerlink" title="&#160;&#160;&#160;&#160;以上呢，就是我花了两天整理的一些资料，不能算很全，但是对于像我这样的新手进行的初步了解应该是够了，之后可能有时间的话会陆续的整理一些相关的资料发布出来。"></a>&#160;&#160;&#160;&#160;以上呢，就是我花了两天整理的一些资料，不能算很全，但是对于像我这样的新手进行的初步了解应该是够了，之后可能有时间的话会陆续的整理一些相关的资料发布出来。</h5><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p>&#160;&#160;&#160;&#160;<a href="http://eslint.org/" target="_blank" rel="noopener">ESLint-官方文档</a>  </p><p>&#160;&#160;&#160;&#160;<a href="http://cnodejs.org/topic/57c68052b4a3bca66bbddbdd" target="_blank" rel="noopener">利用ESLint检查代码质量 </a>  </p><p>&#160;&#160;&#160;&#160;<a href="http://blog.csdn.net/helpzp2008/article/details/51507428" target="_blank" rel="noopener">Eslint 规则说明</a> </p><p>&#160;&#160;&#160;&#160;<a href="https://csspod.com/getting-started-with-eslint/" target="_blank" rel="noopener">ESLint 使用入门</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>iOS学习笔记02-指纹验证TouchID简单应用1</title>
      <link href="/2016/09/19/iOS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002-%E6%8C%87%E7%BA%B9%E9%AA%8C%E8%AF%81TouchID%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A81/"/>
      <url>/2016/09/19/iOS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002-%E6%8C%87%E7%BA%B9%E9%AA%8C%E8%AF%81TouchID%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A81/</url>
      <content type="html"><![CDATA[<p>&#160;&#160;&#160;&#160;指纹验证这个功能现在在一些app中经常常见，常常与数字解锁，手势解锁联合起来使用。前几天接到说实现一个指纹验证的功能，捣鼓了挺久，然后今天，我就简单的介绍下指纹验证，会做个简单的demo实现一下基本的功能。<br>&#160;&#160;&#160;&#160;<strong>支持系统和机型</strong>：iOS系统的指纹识别功能最低支持的机型为iPhone 5s，最低支持系统为iOS 8。实现起来呢，其实还是很简单的，下面我们就用纯代码方式实现一个简单的demo1。</p><p>##第一部分：调用原生服务实现指纹验证</p><p>#####这部分了解个大概就可以了</p><ul><li>第一步：添加LocalAuthentication.framework库</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1062695-1e3865f35c18c47c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="firstStep.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-0d2fd2672524dff4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="secondStep.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-c863bcdb8851d006.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="thirdStep.png"></p><ul><li>第二步：在appdelegate.m中添加代码<br>  这个不说其实大家也都知道的吧。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;AppDelegate.h&quot;</span><br><span class="line">#import &quot;ViewController.h&quot;</span><br><span class="line">@interface AppDelegate ()</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line">@implementation AppDelegate</span><br><span class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</span><br><span class="line">    //appdelegate</span><br><span class="line">    _window = [[UIWindow alloc]initWithFrame:[UIScreen mainScreen].bounds];</span><br><span class="line">    _window.backgroundColor = [UIColor whiteColor];</span><br><span class="line">    [_window makeKeyAndVisible];</span><br><span class="line">    ViewController *vc = [[ViewController alloc]init];</span><br><span class="line">    UINavigationController *na = [[UINavigationController alloc]initWithRootViewController:vc];</span><br><span class="line">    _window.rootViewController = na;</span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第三步<br><strong>引入头文件</strong>  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;LocalAuthentication/LocalAuthentication.h&gt;</span><br></pre></td></tr></table></figure><ul><li>第四步：实现指纹验证<br>&#160;&#160;&#160;&#160;这一步就是很重要的地方了，在<code>- (void)viewDidLoad</code>中写入验证实现的代码，这里只有两步，因为LAContext在官方文档中只有两个方法:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  -canEvaluatePolicy:error: </span><br><span class="line">//-(BOOL)canEvaluatePolicy:(LAPolicy)policy error:(NSError * __autoreleasing *)error __attribute__((swift_error(none)));</span><br><span class="line"></span><br><span class="line">  -evaluatePolicy:localizedReason:reply: </span><br><span class="line">//- (void)evaluatePolicy:(LAPolicy)policy localizedReason:(NSString *)localizedReason reply:(void(^)(BOOL success, NSError * __nullable error))reply;</span><br></pre></td></tr></table></figure><p>&#160;&#160;&#160;&#160;一个是判断设备是否支持touchid，一个是进行验证返回不同的结果，之前在网上经常可以一些文章中写了，指纹验证的第一步都是先判断设备的系统版本等等，现在似乎都不需要了，只要调用该方法就可以了。全部的代码 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    self.title = @&quot;TouchIDSimpleDemoOne&quot;;</span><br><span class="line">    LAContext *context = [[LAContext alloc]init];</span><br><span class="line">    NSError *error;</span><br><span class="line">    NSString *result = @&quot;需要你身份验证呢&quot;;  </span><br><span class="line">    if ([context canEvaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics error:&amp;error])</span><br><span class="line">    &#123;</span><br><span class="line">        [context evaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics localizedReason:result reply:^(BOOL success, NSError *error)</span><br><span class="line">        &#123;</span><br><span class="line">            if (success)</span><br><span class="line">            &#123;</span><br><span class="line">                //验证成功，主线程处理UI</span><br><span class="line">                //这个地方呢就是写一些验证成功之后需要做些什么事情的代码。</span><br><span class="line">                NSLog(@&quot;验证成功&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                //以下是一些验证失败的原因啥的</span><br><span class="line">                NSLog(@&quot;%@&quot;,error.localizedDescription);</span><br><span class="line">                switch (error.code) &#123;</span><br><span class="line">                    case LAErrorSystemCancel:</span><br><span class="line">                    &#123;</span><br><span class="line">                        NSLog(@&quot;切换到其他APP，系统取消验证Touch ID&quot;);</span><br><span class="line">                        //切换到其他APP，系统取消验证Touch ID</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                    case LAErrorUserCancel:</span><br><span class="line">                    &#123;</span><br><span class="line">                        NSLog(@&quot;用户取消验证Touch ID&quot;);</span><br><span class="line">                        //用户取消验证Touch ID</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                    case LAErrorUserFallback:</span><br><span class="line">                    &#123;</span><br><span class="line">                        NSLog(@&quot;用户选择输入密码&quot;);</span><br><span class="line">                        [[NSOperationQueue mainQueue] addOperationWithBlock:^&#123;</span><br><span class="line">                            //用户选择其他验证方式，切换主线程处理</span><br><span class="line">                        &#125;];</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                    default:</span><br><span class="line">                    &#123;</span><br><span class="line">                        NSLog(@&quot;LAErrorAuthenticationFailed，授权失败&quot;);</span><br><span class="line">                        //授权失败</span><br><span class="line">                        [[NSOperationQueue mainQueue] addOperationWithBlock:^&#123;</span><br><span class="line">                            //其他情况，切换主线程处理</span><br><span class="line">                        &#125;];</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];  </span><br><span class="line">    &#125;else</span><br><span class="line">    &#123;</span><br><span class="line">        //不支持指纹识别，LOG出错误详情</span><br><span class="line">        </span><br><span class="line">        switch (error.code) &#123;</span><br><span class="line">            case LAErrorTouchIDNotEnrolled:</span><br><span class="line">            &#123;</span><br><span class="line">                NSLog(@&quot;设备Touch ID不可用，用户未录入&quot;);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            case LAErrorPasscodeNotSet:</span><br><span class="line">            &#123;</span><br><span class="line">                NSLog(@&quot;系统未设置密码&quot;);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            case LAErrorTouchIDNotAvailable:</span><br><span class="line">            &#123;</span><br><span class="line">                NSLog(@&quot;设备Touch ID不可用，例如未打开&quot;);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            default:</span><br><span class="line">            &#123;</span><br><span class="line">                NSLog(@&quot;系统未设置密码&quot;);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        NSLog(@&quot;%@&quot;,error.localizedDescription);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">//指纹验证返回值</span><br><span class="line">typedef NS_ENUM(NSInteger, LAError)</span><br><span class="line">&#123;</span><br><span class="line">    /// Authentication was not successful, because user failed to provide valid credentials.</span><br><span class="line">    LAErrorAuthenticationFailed = kLAErrorAuthenticationFailed,</span><br><span class="line">    </span><br><span class="line">    /// Authentication was canceled by user (e.g. tapped Cancel button).</span><br><span class="line">    LAErrorUserCancel           = kLAErrorUserCancel,</span><br><span class="line">    </span><br><span class="line">    /// Authentication was canceled, because the user tapped the fallback button (Enter Password).</span><br><span class="line">    LAErrorUserFallback         = kLAErrorUserFallback,</span><br><span class="line">    </span><br><span class="line">    /// Authentication was canceled by system (e.g. another application went to foreground).</span><br><span class="line">    LAErrorSystemCancel         = kLAErrorSystemCancel,</span><br><span class="line">    </span><br><span class="line">    /// Authentication could not start, because passcode is not set on the device.</span><br><span class="line">    LAErrorPasscodeNotSet       = kLAErrorPasscodeNotSet,</span><br><span class="line"></span><br><span class="line">    /// Authentication could not start, because Touch ID is not available on the device.</span><br><span class="line">    LAErrorTouchIDNotAvailable  = kLAErrorTouchIDNotAvailable,</span><br><span class="line">    </span><br><span class="line">    /// Authentication could not start, because Touch ID has no enrolled fingers.</span><br><span class="line">    LAErrorTouchIDNotEnrolled   = kLAErrorTouchIDNotEnrolled,</span><br><span class="line"></span><br><span class="line">    /// Authentication was not successful, because there were too many failed Touch ID attempts and</span><br><span class="line">    /// Touch ID is now locked. Passcode is required to unlock Touch ID, e.g. evaluating</span><br><span class="line">    /// LAPolicyDeviceOwnerAuthenticationWithBiometrics will ask for passcode as a prerequisite.</span><br><span class="line">    LAErrorTouchIDLockout   NS_ENUM_AVAILABLE(10_11, 9_0) = kLAErrorTouchIDLockout,</span><br><span class="line"></span><br><span class="line">    /// Authentication was canceled by application (e.g. invalidate was called while</span><br><span class="line">    /// authentication was in progress).</span><br><span class="line">    LAErrorAppCancel        NS_ENUM_AVAILABLE(10_11, 9_0) = kLAErrorAppCancel,</span><br><span class="line"></span><br><span class="line">    /// LAContext passed to this call has been previously invalidated.</span><br><span class="line">    LAErrorInvalidContext   NS_ENUM_AVAILABLE(10_11, 9_0) = kLAErrorInvalidContext</span><br><span class="line">&#125; NS_ENUM_AVAILABLE(10_10, 8_0);</span><br></pre></td></tr></table></figure><p>&#160;&#160;&#160;&#160;以上呢，就是一个简单的demo了，可能有些小问题，到时候需要的话可以自调整。这里附上这个demo的guithub链接<strong><a href="https://github.com/Yulingsong/TouchIDSimpleDemoOne" target="_blank" rel="noopener">看这里看这里，链接在这呢</a></strong>。</p><p>##第二部分：利用现有的第三方组件实现。</p><p>#####这个部分可以好好学习一下。<br>&#160;&#160;&#160;&#160;在这里呢，我要推荐一个别人写的一个第三方的组件，就是<a href="https://github.com/hu670014125/WJTouchID" target="_blank" rel="noopener"><strong><a href="https://github.com/hu670014125/WJTouchID" target="_blank" rel="noopener">WJTouchID</a></strong></a>;这个控件的话，在这个链接上其实已经有写出怎么用了，其实不需要我再都说什么，但是我还是要说下吧。<br>&#160;&#160;&#160;&#160;调用时只需要一两行代码调用，但是回调函数还是需要写不少东西的。。。</p><ul><li>1:复制文件进去</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1062695-9d0c8257a493a73a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="WJTouchID"></p><ul><li>2:引入头文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;WJTouchID.h&quot;</span><br></pre></td></tr></table></figure><ul><li>3:遵守协议</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@interface ViewController ()&lt;WJTouchIDDelegate&gt;</span><br></pre></td></tr></table></figure><ul><li>4: 创建对象</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@property (nonatomic, strong) WJTouchID *touchID;</span><br></pre></td></tr></table></figure><ul><li>5:调用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    //初始化</span><br><span class="line">    WJTouchID *touchid = [[WJTouchID alloc]init];</span><br><span class="line">    [touchid startWJTouchIDWithMessage:WJNotice(@&quot;自定义信息&quot;, @&quot;The Custom Message&quot;) fallbackTitle:WJNotice(@&quot;&quot;, @&quot;Fallback Title&quot;) delegate:self];</span><br><span class="line">    self.touchID = touchid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>6：实现回调函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">@required</span><br><span class="line"></span><br><span class="line"> //TouchID验证成功</span><br><span class="line">- (void)WJTouchIDAuthorizeSuccess;</span><br><span class="line"></span><br><span class="line"> //TouchID验证失败</span><br><span class="line">- (void)WJTouchIDAuthorizeFailure; </span><br><span class="line"></span><br><span class="line">@optional</span><br><span class="line"></span><br><span class="line"> //当前设备不支持指纹识别</span><br><span class="line">- (void)WJTouchIDIsNotSupport;</span><br><span class="line"></span><br><span class="line"> //当前软件被挂起取消了授权(如突然来了电话,应用进入前台)</span><br><span class="line">- (void)WJTouchIDAuthorizeErrorAppCancel;</span><br><span class="line"></span><br><span class="line"> //取消TouchID验证 (用户点击了取消)</span><br><span class="line">- (void)WJTouchIDAuthorizeErrorUserCancel; </span><br><span class="line"></span><br><span class="line"> //在TouchID对话框中点击输入密码按钮</span><br><span class="line">- (void)WJTouchIDAuthorizeErrorUserFallback; </span><br><span class="line"></span><br><span class="line"> //在验证的TouchID的过程中被系统取消 例如突然来电话、按了Home键、锁屏...</span><br><span class="line">- (void)WJTouchIDAuthorizeErrorSystemCancel;</span><br><span class="line"></span><br><span class="line"> //无法启用TouchID,设备没有设置密码</span><br><span class="line">- (void)WJTouchIDAuthorizeErrorPasscodeNotSet; </span><br><span class="line"></span><br><span class="line"> //多次连续使用Touch ID失败，Touch ID被锁，需要用户输入密码解锁</span><br><span class="line">- (void)WJTouchIDAuthorizeErrorTouchIDLockout;</span><br><span class="line"></span><br><span class="line"> //当前软件被挂起取消了授权 (授权过程中,LAContext对象被释)</span><br><span class="line">- (void)WJTouchIDAuthorizeErrorInvalidContext;</span><br><span class="line"></span><br><span class="line"> //设备没有录入TouchID,无法启用TouchID</span><br><span class="line">- (void)WJTouchIDAuthorizeErrorTouchIDNotEnrolled; </span><br><span class="line"></span><br><span class="line"> //该设备的TouchID无效</span><br><span class="line">- (void)WJTouchIDAuthorizeErrorTouchIDNotAvailable;</span><br></pre></td></tr></table></figure><p><strong>这些方法实现结束后呢，这个功能也基本上算是完成了。因为好像篇幅太长了，看得人肯定也嫌烦，所以我准备另写一篇做一个在app被唤醒的时候启动指纹验证，分别用弹出控制器和弹出自定义view这两个方式来实现。感兴趣的话可以看下。</strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>web学习笔记03-angular 单元测试简单应用</title>
      <link href="/2016/09/19/web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003-angular-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/"/>
      <url>/2016/09/19/web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003-angular-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="angular单元测试"><a href="#angular单元测试" class="headerlink" title="angular单元测试"></a>angular单元测试</h2><h3 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h3><p><img src="http://upload-images.jianshu.io/upload_images/1062695-5482a4f8f3b06149.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建项目"></p><h3 id="2-创建文件夹"><a href="#2-创建文件夹" class="headerlink" title="2.创建文件夹"></a>2.创建文件夹</h3><p>在项目中创建3个文件夹分别用于存放项目中用到的html、js、test文件。</p><h3 id="3-安装框架"><a href="#3-安装框架" class="headerlink" title="3.安装框架"></a>3.安装框架</h3><p>服务器依赖于nodejs，需要安装nodejs的包，首先在根目录下创建package.json文件。</p><ul><li>安装angular等框架  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install bootstrap -save</span><br><span class="line"></span><br><span class="line">npm install install angular -save</span><br><span class="line"></span><br><span class="line">npm install angular-mocks -save</span><br></pre></td></tr></table></figure><ul><li><p>安装http-server模块   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install http-server -save</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>安装其他模块   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">npm install jasmine-core -save</span><br><span class="line"></span><br><span class="line">npm install karma -save</span><br><span class="line"></span><br><span class="line">npm install karma-chrome-launcher -save</span><br><span class="line"></span><br><span class="line">npm install karma-jasmine -save</span><br><span class="line"></span><br><span class="line">npm install karma-junit-reporter -save</span><br><span class="line"></span><br><span class="line">npm install protractor -save</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-启动服务器"><a href="#4-启动服务器" class="headerlink" title="4.启动服务器"></a>4.启动服务器</h3><p>要启动node服务器需要在package.json中配置script节点,dependencies中定义依赖包，在script配置start节点用于启动服务器，test节点的内容会在后面讲解。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;application-name&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;AngularUnitTest&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.1&quot;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;angular&quot;: &quot;^1.5.8&quot;,</span><br><span class="line">    &quot;angular-mocks&quot;: &quot;^1.5.8&quot;,</span><br><span class="line">    &quot;bootstrap&quot;: &quot;^3.3.7&quot;,</span><br><span class="line">    &quot;http-server&quot;: &quot;^0.9.0&quot;,</span><br><span class="line">    &quot;install&quot;: &quot;^0.8.1&quot;,</span><br><span class="line">    &quot;jasmine-core&quot;: &quot;^2.5.2&quot;,</span><br><span class="line">    &quot;karma&quot;: &quot;^1.3.0&quot;,</span><br><span class="line">    &quot;karma-chrome-launcher&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">    &quot;karma-jasmine&quot;: &quot;^1.0.2&quot;,</span><br><span class="line">    &quot;karma-junit-reporter&quot;: &quot;^1.1.0&quot;,</span><br><span class="line">    &quot;protractor&quot;: &quot;^4.0.8&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;prestart&quot;: &quot;npm install&quot;,</span><br><span class="line">    &quot;start&quot;: &quot;http-server -a localhost -p 8000 -c-1&quot;,</span><br><span class="line">    &quot;pretest&quot;: &quot;npm install&quot;,</span><br><span class="line">    &quot;test&quot;: &quot;karma start karma.conf.js&quot;,</span><br><span class="line">    &quot;test-single-run&quot;: &quot;karma start karma.conf.js  --single-run&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置后运行命令,启动服务器，浏览器上输入<a href="http://localhost:8000" target="_blank" rel="noopener">http://localhost:8000</a>  </p><p><code>npm start</code></p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-8ea19edef0dc2f74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="npm start">  </p><h3 id="5-编写功能代码"><a href="#5-编写功能代码" class="headerlink" title="5.编写功能代码"></a>5.编写功能代码</h3><p>在文件js中新建js文件index.js。在index.js中定义congroller,实现简单累加方法add,代码如下:</p><pre><code>var appControllers = angular.module(&apos;app&apos;, []);appControllers.controller(&apos;indexCtrl&apos;,[&apos;$scope&apos;,function($scope) {    $scope.add = function (a, b) {        if(a &amp;&amp; b)            return Number(a) + Number(b)        return 0;    };     $scope.detect = function (a, b) {        if(a &amp;&amp; b)            return Number(a) - Number(b)        return 0;    };           $scope.pr = function () {        console.log(&apos;Function pr&apos;);    };}]);</code></pre><p>&#160;&#160;&#160;&#160;在文件html中新建html文件index.html，加入两个输入框用户获取输入，当输入后绑定controller中的add方法实现计算器功能，代码如下:</p><pre><code>&lt;p&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;br /&gt; &amp;lt;html lang=&amp;quot;en&amp;quot; ng-app=&amp;quot;app&amp;quot;&amp;gt;&lt;br /&gt; &amp;lt;head&amp;gt;&lt;br /&gt;     &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;&lt;br /&gt;     &amp;lt;title&amp;gt;index&amp;lt;/title&amp;gt;&lt;br /&gt; &amp;lt;/head&amp;gt;&lt;br /&gt; &amp;lt;body&amp;gt;&lt;br /&gt; &amp;lt;div ng-controller=&amp;quot;indexCtrl&amp;quot;&amp;gt;&lt;br /&gt;     &amp;lt;input type=&amp;quot;text&amp;quot; ng-model=&amp;quot;a&amp;quot; value=&amp;quot;     0&amp;quot;&amp;gt;&lt;br /&gt;     +&lt;br /&gt;     &amp;lt;input type=&amp;quot;text&amp;quot; ng-model=&amp;quot;b&amp;quot; value=&amp;quot;    0&amp;quot;&amp;gt;&lt;br /&gt;     =&amp;lt;span id=&amp;quot;result&amp;quot;&amp;gt;{{add(a,b)}}&amp;lt;/span&amp;gt;&lt;br /&gt; &amp;lt;/div&amp;gt;&lt;br /&gt; &amp;lt;/body&amp;gt;&lt;br /&gt; &amp;lt;/html&amp;gt;&lt;br /&gt; &amp;lt;script src=&amp;quot;/node&lt;em&gt;modules/angular/angular.min.js&amp;quot;&amp;gt;&amp;lt;/     script&amp;gt;&lt;br /&gt; &amp;lt;script src=&amp;quot;/node&lt;/em&gt;modules/angular-mocks/angular-    mocks.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;br /&gt; &amp;lt;script src=&amp;quot;/js/index.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/p&gt;&lt;br /&gt; </code></pre><p>启动服务器看到下图效果<br><img src="http://upload-images.jianshu.io/upload_images/1062695-f16d76958d16c3d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图"></p><h3 id="6-编写测试代码"><a href="#6-编写测试代码" class="headerlink" title="6.编写测试代码"></a>6.编写测试代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line">describe(&apos;app&apos;, function () &#123;</span><br><span class="line">    beforeEach(module(&apos;app&apos;));</span><br><span class="line">    describe(&apos;indexCtrl&apos;, function () &#123;</span><br><span class="line">        it(&apos;add 测试&apos;, inject(function ($controller) &#123;</span><br><span class="line">            var $scope = &#123;&#125;;</span><br><span class="line">            //spec body</span><br><span class="line">            var indexCtrl = $controller(&apos;indexCtrl&apos;, &#123;$scope: $scope&#125;);</span><br><span class="line">            expect(indexCtrl).toBeDefined();</span><br><span class="line">            expect($scope.add(2, 3)).toEqual(5);</span><br><span class="line">        &#125;));</span><br><span class="line">        it(&apos;test detect function&apos;, function () &#123;</span><br><span class="line">            expect(scope.detect(4,3)).toEqual(1);</span><br><span class="line">        &#125;);</span><br><span class="line">        it(&apos;test pr function&apos;, function () &#123;</span><br><span class="line">            expect(scope.pr()).toEqual();</span><br><span class="line">        &#125;);</span><br><span class="line">      </span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><h3 id="7-单元测试配置"><a href="#7-单元测试配置" class="headerlink" title="7.单元测试配置"></a>7.单元测试配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">karma init</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/1062695-6eae9385ac77aa2e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="karma init"></p><p>在karma配置文件代码中每个节点都有默认注释请参</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// Karma configuration</span><br><span class="line">// Generated on Mon Sep 19 2016 10:51:55 GMT+0800 (CST)</span><br><span class="line"></span><br><span class="line">module.exports = function(config) &#123;</span><br><span class="line">  config.set(&#123;</span><br><span class="line"></span><br><span class="line">    // base path that will be used to resolve all patterns (eg. files, exclude)</span><br><span class="line">    basePath: &apos;./&apos;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // frameworks to use</span><br><span class="line">    // available frameworks: https://npmjs.org/browse/keyword/karma-adapter</span><br><span class="line">    frameworks: [&apos;jasmine&apos;],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // list of files / patterns to load in the browser</span><br><span class="line">    files: [</span><br><span class="line">      &apos;node_modules/angular/angular.min.js&apos;,</span><br><span class="line">      &apos;node_modules/angular-mocks/angular-mocks.js&apos;,</span><br><span class="line">      &apos;js/index.js&apos;,</span><br><span class="line">      &apos;test/index-test.js&apos;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // list of files to exclude</span><br><span class="line">    exclude: [</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // preprocess matching files before serving them to the browser</span><br><span class="line">    // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor</span><br><span class="line">    preprocessors: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // test results reporter to use</span><br><span class="line">    // possible values: &apos;dots&apos;, &apos;progress&apos;</span><br><span class="line">    // available reporters: https://npmjs.org/browse/keyword/karma-reporter</span><br><span class="line">    reporters: [&apos;progress&apos;],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // web server port</span><br><span class="line">    port: 9876,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // enable / disable colors in the output (reporters and logs)</span><br><span class="line">    colors: true,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // level of logging</span><br><span class="line">    // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</span><br><span class="line">    logLevel: config.LOG_INFO,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // enable / disable watching file and executing tests whenever any file changes</span><br><span class="line">    autoWatch: true,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // start these browsers</span><br><span class="line">    // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher</span><br><span class="line">    browsers: [&apos;Chrome&apos;],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // Continuous Integration mode</span><br><span class="line">    // if true, Karma captures browsers, runs the tests and exits</span><br><span class="line">    singleRun: false,</span><br><span class="line"></span><br><span class="line">    // Concurrency level</span><br><span class="line">    // how many browser should be started simultaneous</span><br><span class="line">    concurrency: Infinity,</span><br><span class="line">    plugins: [</span><br><span class="line">      &apos;karma-chrome-launcher&apos;,</span><br><span class="line">      &apos;karma-jasmine&apos;,</span><br><span class="line">      &apos;karma-junit-reporter&apos;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    junitReporter: &#123;</span><br><span class="line">      outputFile: &apos;/test_out/unit.xml&apos;,</span><br><span class="line">      suite: &apos;unit&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在package.json scripts 配置测试信息,指定karma文件地址</p><pre><code>&quot;test&quot;: &quot;karma start karma.conf.js&quot;,</code></pre><h3 id="8-运行单元测试"><a href="#8-运行单元测试" class="headerlink" title="8.运行单元测试"></a>8.运行单元测试</h3><pre><code>npm test</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/1062695-0c2224619eec10a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="npm run"></p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-1defb99c819cffde.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="test page1"></p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-ba60430131515263.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="test page2"></p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-d88d80a63e862386.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="test result"></p><h3 id="9-添加网络测试"><a href="#9-添加网络测试" class="headerlink" title="9.添加网络测试"></a>9.添加网络测试</h3><ul><li>$http service示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var app = angular.module(&apos;Application&apos;, []</span><br><span class="line">)</span><br><span class="line">app.controller(&apos;MainCtrl&apos;, function($scope, $http) &#123;</span><br><span class="line">  $http.get(&apos;Users/users.json&apos;).success(function(data)&#123;</span><br><span class="line">      $scope.users = data;</span><br><span class="line">  &#125;);</span><br><span class="line">  $scope.text = &apos;Hello World!&apos;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>使用$httpBackend设置伪后台</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">describe(&apos;MainCtrl&apos;, function() &#123;</span><br><span class="line">    //我们会在测试中使用这个scope</span><br><span class="line">    var scope, $httpBackend;</span><br><span class="line"></span><br><span class="line">    //模拟我们的Application模块并注入我们自己的依赖</span><br><span class="line">    beforeEach(angular.mock.module(&apos;Application&apos;));</span><br><span class="line"></span><br><span class="line">    //模拟Controller，并且包含 $rootScope 和 $controller</span><br><span class="line">    beforeEach(angular.mock.inject(function($rootScope, $controller, _$httpBackend_) &#123;</span><br><span class="line">        //设置$httpBackend冲刷$http请求</span><br><span class="line">        $httpBackend = _$httpBackend_;</span><br><span class="line">        $httpBackend.when(&apos;GET&apos;, &apos;Users/users.json&apos;).respond([&#123;</span><br><span class="line">            id: 1,</span><br><span class="line">            name: &apos;Bob&apos;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            id: 2,</span><br><span class="line">            name: &apos;Jane&apos;</span><br><span class="line">        &#125;]);</span><br><span class="line">        //创建一个空的 scope</span><br><span class="line">        scope = $rootScope.$new();</span><br><span class="line"></span><br><span class="line">        //声明 Controller并且注入已创建的空的 scope</span><br><span class="line">        $controller(&apos;MainCtrl&apos;, &#123;</span><br><span class="line">            $scope: scope</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;));</span><br><span class="line"></span><br><span class="line">    // 测试从这里开始</span><br><span class="line">    it(&apos;should have variable text = &quot;Hello World!&quot;&apos;, function() &#123;</span><br><span class="line">        expect(scope.text).toBe(&apos;Hello World!&apos;);</span><br><span class="line">    &#125;);</span><br><span class="line">    it(&apos;should fetch list of users&apos;, function() &#123;</span><br><span class="line">        $httpBackend.flush();</span><br><span class="line">        expect(scope.users.length).toBe(2);</span><br><span class="line">        expect(scope.users[0].name).toBe(&apos;Bob&apos;);</span><br><span class="line">        //输出结果以方便查看</span><br><span class="line">        for(var i=0;i&lt;scope.users.length;i++)&#123;</span><br><span class="line">            console.log(scope.users[i].name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上示例中，可以使用$httpBackend.when和$httpBackend.expect提前设置请求的伪数据。最后在请求后执行$httpBackend.flush就会立即执行完成http请求。</p><p>在demo中具体情况是这样的，添加常规常量和变量测试，以及两个网络测试，具体代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//常规变量</span><br><span class="line">    $scope.aaa = 1;</span><br><span class="line">    $scope.testText = &apos;Hello Jsamine And Karma&apos;;</span><br><span class="line"></span><br><span class="line">    //</span><br><span class="line">    $http.get(&apos;users.json&apos;).success(function(data)&#123;</span><br><span class="line">        $scope.users = data;</span><br><span class="line">    &#125;).error(function (error) &#123;</span><br><span class="line">        $scope.users = error;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    //获取网络数据,制造伪后台</span><br><span class="line">    $http.post(&apos;api/000&apos;).success(function(data)&#123;</span><br><span class="line">        $scope.userInfo = data;</span><br><span class="line">    &#125;).error(function (error) &#123;</span><br><span class="line">        $scope.userInfo = error;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>在测试文件中这么写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Created by apple on 16/9/19.</span><br><span class="line"> */</span><br><span class="line">&apos;use strict&apos;;</span><br><span class="line">describe(&apos;app&apos;, function () &#123;</span><br><span class="line">    beforeEach(module(&apos;app&apos;));</span><br><span class="line"></span><br><span class="line">    var scope,ctrl,$httpBackend;</span><br><span class="line"></span><br><span class="line">    beforeEach(inject(function ($controller, $rootScope,_$httpBackend_) &#123;</span><br><span class="line"></span><br><span class="line">        $httpBackend = _$httpBackend_;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        $httpBackend.when(&apos;GET&apos;, &apos;users.json&apos;).respond([</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;id&quot;: 1,</span><br><span class="line">                &quot;name&quot;: &quot;Bob&quot;,</span><br><span class="line">                &quot;age&quot;:20</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;id&quot;: 2,</span><br><span class="line">                &quot;name&quot;: &quot;Jane&quot;,</span><br><span class="line">                &quot;age&quot;:21</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;id&quot;: 3,</span><br><span class="line">                &quot;name&quot;: &quot;gary&quot;,</span><br><span class="line">                &quot;age&quot;:22</span><br><span class="line">            &#125;</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        $httpBackend.when(&apos;POST&apos;, &apos;api/000&apos;).respond(&#123;</span><br><span class="line">            &quot;dataList&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;moduleId&quot;: &quot;501&quot;,</span><br><span class="line">                    &quot;moduleList&quot;: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            &quot;moduleId&quot;: &quot;501001&quot;,</span><br><span class="line">                            &quot;moduleName&quot;: &quot;融资申请&quot;,</span><br><span class="line">                            &quot;moduleUrl&quot;: &quot;/financing&quot;,</span><br><span class="line">                            &quot;parentModuleId&quot;: &quot;501&quot;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            &quot;moduleId&quot;: &quot;501002&quot;,</span><br><span class="line">                            &quot;moduleName&quot;: &quot;融资进度查询&quot;,</span><br><span class="line">                            &quot;moduleUrl&quot;: &quot;/myFinancing&quot;,</span><br><span class="line">                            &quot;parentModuleId&quot;: &quot;501&quot;</span><br><span class="line">                        &#125;</span><br><span class="line">                    ],</span><br><span class="line">                    &quot;moduleName&quot;: &quot;票据融资&quot;,</span><br><span class="line">                    &quot;moduleUrl&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;parentModuleId&quot;: &quot;00&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            &quot;imgCaptchaRequired&quot;: &quot;N&quot;,</span><br><span class="line">            &quot;isModifyPwd&quot;: &quot;N&quot;,</span><br><span class="line">            &quot;isSetTradePwd&quot;: &quot;N&quot;,</span><br><span class="line">            &quot;loginId&quot;: &quot;15250964261&quot;,</span><br><span class="line">            &quot;loginType&quot;: &quot;00&quot;,</span><br><span class="line">            &quot;participantName&quot;: &quot;guyu&quot;,</span><br><span class="line">            &quot;phone&quot;: &quot;15250964261&quot;,</span><br><span class="line">            &quot;retCode&quot;: &quot;000000&quot;,</span><br><span class="line">            &quot;retMsg&quot;: &quot;交易成功&quot;,</span><br><span class="line">            &quot;shortName&quot;: &quot;&quot;,</span><br><span class="line">            &quot;totalCount&quot;: 3,</span><br><span class="line">            &quot;userName&quot;: &quot;15250964261&quot;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        //模拟生成scope, $rootScope是angular中的顶级scope，angular中每个controller中的scope都是rootScope new出来的</span><br><span class="line">        scope = $rootScope.$new();</span><br><span class="line"></span><br><span class="line">        //模拟生成controller 并把先前生成的scope传入以方便测试</span><br><span class="line">        ctrl = $controller(&apos;indexCtrl&apos;, &#123;$scope: scope&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    describe(&apos;indexCtrl&apos;, function () &#123;</span><br><span class="line">        it(&apos;test add function&apos;, function () &#123;</span><br><span class="line">            expect(scope.add(2, 3)).toEqual(5);</span><br><span class="line">        &#125;);</span><br><span class="line">        it(&apos;test detect function&apos;, function () &#123;</span><br><span class="line">            expect(scope.detect(4,3)).toEqual(1);</span><br><span class="line">        &#125;);</span><br><span class="line">        it(&apos;test pr function&apos;, function () &#123;</span><br><span class="line">            expect(scope.pr()).toEqual();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        it(&apos;test normal varibles&apos;, function () &#123;</span><br><span class="line">            expect(scope.testText).toEqual(&apos;Hello Jsamine And Karma&apos;);</span><br><span class="line">            expect(scope.aaa).toBe(1);</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        //测试伪后台的json数据</span><br><span class="line">        it(&apos;test get json&apos;, function () &#123;</span><br><span class="line">            $httpBackend.flush();</span><br><span class="line">            expect(scope.users.length).toBe(3);</span><br><span class="line">            expect(scope.users[0].name).toBe(&apos;Bob&apos;);</span><br><span class="line">            expect(scope.users[1].name).toEqual(&apos;Jane&apos;);</span><br><span class="line">            expect(scope.users[1].id).toBe(2);</span><br><span class="line">            expect(scope.users[2].age).toBe(22);</span><br><span class="line"></span><br><span class="line">            //输出结果以方便查看</span><br><span class="line">            for(var i=0;i&lt;scope.users.length;i++)&#123;</span><br><span class="line">                console.log(scope.users[i].id);</span><br><span class="line">                console.log(scope.users[i].name +&quot;    &quot;+ scope.users[i].age);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        //测试伪后台网络数据</span><br><span class="line">        it(&apos;test get network data&apos;, function () &#123;</span><br><span class="line">            $httpBackend.flush();</span><br><span class="line">            expect(scope.userInfo).toBeDefined();</span><br><span class="line">            expect(scope.userInfo.isModifyPwd).toEqual(&apos;N&apos;);</span><br><span class="line">            expect(scope.userInfo.retCode).toEqual(&apos;000000&apos;);</span><br><span class="line">            expect(scope.userInfo.phone).toEqual(&apos;15250964261&apos;);</span><br><span class="line">            expect(scope.userInfo.dataList.length).toBe(1);</span><br><span class="line">            expect(scope.userInfo.dataList[0].moduleId).toEqual(&quot;501&quot;);</span><br><span class="line">            expect(scope.userInfo.dataList[0].moduleList[0].moduleId).toEqual(&quot;501001&quot;);</span><br><span class="line">            expect(scope.userInfo.dataList[0].moduleList[0].parentModuleId).toEqual(&quot;501&quot;);</span><br><span class="line">            expect(scope.userInfo.dataList[0].moduleList[0].moduleUrl).toEqual(&quot;/financing&quot;);</span><br><span class="line">            expect(scope.userInfo.dataList[0].moduleList[1].moduleId).toEqual(&quot;501002&quot;);</span><br><span class="line">            expect(scope.userInfo.dataList[0].moduleList[1].moduleName).toEqual(&quot;融资进度查询&quot;);</span><br><span class="line">            expect(scope.userInfo.dataList[0].moduleList[1].moduleUrl).toEqual(&quot;/myFinancing&quot;);</span><br><span class="line">            console.log(scope.userInfo);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">   &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>测试结果：<br><img src="http://upload-images.jianshu.io/upload_images/1062695-ac3c140f157719f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="测试结果"></p><h3 id="补充：-httpBackend常用方法"><a href="#补充：-httpBackend常用方法" class="headerlink" title="补充：$httpBackend常用方法"></a>补充：$httpBackend常用方法</h3><h4 id="when"><a href="#when" class="headerlink" title="when"></a>when</h4><p>新建一个后端定义（backend definition）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">when(method, url, [data], [headers]);</span><br></pre></td></tr></table></figure><h4 id="expect"><a href="#expect" class="headerlink" title="expect"></a>expect</h4><p>新建一个请求期望（request expectation）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expect(method, url, [data], [headers]);</span><br></pre></td></tr></table></figure><p>when和expect都需要4个参数method, url, data, headers, 其中后2个参数可选。</p><ul><li><p>method表示http方法注意都需要是大写(GET, PUT…);<br></p></li><li><p>url请求的url可以为正则或者字符串；</p></li><li><p>data请求时带的参数，</p></li><li><p>headers请求时设置的header。</p></li></ul><p>如果这些参数都提供了，那只有当这些参数都匹配的时候才会正确的匹配请求。when和expect都会返回一个带respond方法的对象。respond方法有3个参数status，data，headers通过设置这3个参数就可以伪造返回的响应数据了。</p><h4 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h4><p>$httpBackend.when与$httpBackend.expect的区别在于：$httpBackend.expect的伪后台只能被调用一次(调用一次后会被清除)，第二次调用就会报错，而且$httpBackend.resetExpectations可以移除所有的expect而对when没有影响。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>web学习笔记02-基于Karma和Jasmine的AngularJS单元测试</title>
      <link href="/2016/09/12/web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002-%E5%9F%BA%E4%BA%8EKarma%E5%92%8CJasmine%E7%9A%84AngularJS%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>/2016/09/12/web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002-%E5%9F%BA%E4%BA%8EKarma%E5%92%8CJasmine%E7%9A%84AngularJS%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<p>简单介绍通过karma与jsmine框架对angular开发的应用程序进行单元测试。</p><h4 id="前提：nodejs，webstorm"><a href="#前提：nodejs，webstorm" class="headerlink" title="前提：nodejs，webstorm"></a>前提：nodejs，webstorm</h4><h3 id="1-创建项目基本目录"><a href="#1-创建项目基本目录" class="headerlink" title="1.创建项目基本目录"></a>1.创建项目基本目录</h3><p>&#160;&#160;&#160;&#160;创建<strong>html、js，test</strong>文件夹，在项目中创建2个文件夹分别用于存放项目中用到的<strong>index.html、index.js,index-test.js</strong>文件。<br><img src="http://upload-images.jianshu.io/upload_images/1062695-b6fdc370fc55205e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建目录"></p><h3 id="2-安装框架"><a href="#2-安装框架" class="headerlink" title="2.安装框架"></a>2.安装框架</h3><h3 id="安装前端框架"><a href="#安装前端框架" class="headerlink" title="安装前端框架"></a>安装前端框架</h3><p>&#160;&#160;&#160;&#160;项目中的前端框架主要为angularjs相关的框架,为了安装框架方便可安装bower包管理器。  </p><ul><li>安装bower包管理器   </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install bower -save</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">- 初始化bower.json文件,管理bower的依赖和配置</span><br></pre></td></tr></table></figure><p>bower init<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![初始化bower.json文件](http://upload-images.jianshu.io/upload_images/1062695-fbbd2ac6bc2989ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) </span><br><span class="line"></span><br><span class="line">- 安装angular,angular-mocks框架</span><br></pre></td></tr></table></figure></p><p>bower install bootstrap -save</p><p>bower install angular -save</p><p>bower install angular-mocks -save</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![安装angular,angular-mocks框架](http://upload-images.jianshu.io/upload_images/1062695-a3f6c84e34f466b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line"></span><br><span class="line">### 安装服务器端框架</span><br><span class="line">- 服务器依赖于nodejs，需要安装nodejs的包，生成package.json文件。</span><br></pre></td></tr></table></figure><p>npm init<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 安装http-server模块</span><br></pre></td></tr></table></figure></p><p>npm install http-server -save<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![安装http-server模块](http://upload-images.jianshu.io/upload_images/1062695-7d4350f294027ebf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)  </span><br><span class="line">- 安装其他模块</span><br></pre></td></tr></table></figure></p><p>npm install jasmine-core –save   //javascript单元测试框架<br>npm install karma –save   //模拟javascript脚本在各种浏览器执行的工具<br>npm install karma-chrome-launcher –save  //在chrome浏览器执行的工具<br>npm install karma-jasmine –save  //jasmine-core在karma中的适配器<br>npm install karma-junit-reporter –save  //生成junit报告<br>npm install protractor –save  //E2E测试框架</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&amp;#160;&amp;#160;&amp;#160;&amp;#160;偶尔会出现报错的时候，一般都是权限不够，在前面添加sudo就可以了。  </span><br><span class="line">![package.json](http://upload-images.jianshu.io/upload_images/1062695-fc9fe28dcdf8261a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line">scripts是自己定义的。</span><br><span class="line"></span><br><span class="line">- 配置后运行命令,启动服务器，浏览器上输入http://localhost:8002</span><br></pre></td></tr></table></figure><p>npm start<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 编写代码</span><br><span class="line">#### index.html  </span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot; ng-app=&quot;app&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;index&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div ng-controller=&quot;indexCtrl&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; ng-model=&quot;a&quot; value=&quot;0&quot;&gt;</span><br><span class="line">    +</span><br><span class="line">    &lt;input type=&quot;text&quot; ng-model=&quot;b&quot; value=&quot;0&quot;&gt;</span><br><span class="line">    =&lt;span id=&apos;result&apos;&gt;&#123;&#123;add(a,b)&#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script src=&quot;/bower_components/angular/angular.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;/bower_components/angular-mocks/angular-mocks.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;/js/index.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h4 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(function (angular) &#123;</span><br><span class="line">    angular.module(&apos;app&apos;, []).</span><br><span class="line">    controller(&apos;indexCtrl&apos;, function ($scope) &#123;</span><br><span class="line">        $scope.add = function (a, b) &#123;</span><br><span class="line">            if(a&amp;&amp;b)</span><br><span class="line">            return Number(a) + Number(b)</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)(window.angular);</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/1062695-29a79638a1b65f56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="启动服务器"></p><p>####index-test.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line">describe(&apos;app&apos;, function () &#123;</span><br><span class="line">    beforeEach(module(&apos;app&apos;));</span><br><span class="line">    describe(&apos;indexCtrl&apos;, function () &#123;</span><br><span class="line">        it(&apos;add 测试&apos;, inject(function ($controller) &#123;</span><br><span class="line">            var $scope = &#123;&#125;;</span><br><span class="line">            //spec body</span><br><span class="line">            var indexCtrl = $controller(&apos;indexCtrl&apos;, &#123;$scope: $scope&#125;);</span><br><span class="line">            expect(indexCtrl).toBeDefined();</span><br><span class="line">            expect($scope.add(2, 3)).toEqual(5);</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="单元测试配置"><a href="#单元测试配置" class="headerlink" title="单元测试配置"></a>单元测试配置</h3><p>初始化karma配置文件,用于配置karma，执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">karma init</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/1062695-a182b28cab06737b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="karma init"></p><p>在karma配置文件代码中每个节点都有注释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">// Karma configuration</span><br><span class="line">// Generated on Mon Sep 12 2016 11:43:48 GMT+0800 (CST)</span><br><span class="line"></span><br><span class="line">module.exports = function(config) &#123;</span><br><span class="line">  config.set(&#123;</span><br><span class="line"></span><br><span class="line">    // base path that will be used to resolve all patterns (eg. files, exclude)</span><br><span class="line">    basePath: &apos;&apos;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // frameworks to use</span><br><span class="line">    // available frameworks: https://npmjs.org/browse/keyword/karma-adapter</span><br><span class="line">    frameworks: [&apos;jasmine&apos;],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // list of files / patterns to load in the browser</span><br><span class="line">    files: [</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // list of files to exclude</span><br><span class="line">    exclude: [</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // preprocess matching files before serving them to the browser</span><br><span class="line">    // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor</span><br><span class="line">    preprocessors: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // test results reporter to use</span><br><span class="line">    // possible values: &apos;dots&apos;, &apos;progress&apos;</span><br><span class="line">    // available reporters: https://npmjs.org/browse/keyword/karma-reporter</span><br><span class="line">    reporters: [&apos;progress&apos;],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // web server port</span><br><span class="line">    port: 9876,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // enable / disable colors in the output (reporters and logs)</span><br><span class="line">    colors: true,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // level of logging</span><br><span class="line">    // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</span><br><span class="line">    logLevel: config.LOG_INFO,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // enable / disable watching file and executing tests whenever any file changes</span><br><span class="line">    autoWatch: true,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // start these browsers</span><br><span class="line">    // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher</span><br><span class="line">    browsers: [&apos;Chrome&apos;],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // Continuous Integration mode</span><br><span class="line">    // if true, Karma captures browsers, runs the tests and exits</span><br><span class="line">    singleRun: false,</span><br><span class="line"></span><br><span class="line">    // Concurrency level</span><br><span class="line">    // how many browser should be started simultaneous</span><br><span class="line">    concurrency: Infinity</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行单元测试"><a href="#运行单元测试" class="headerlink" title="运行单元测试"></a>运行单元测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm test</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/1062695-548d50776a371913.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-09-12 上午11.57.23.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-99fd18eea059b0ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-09-12 上午11.57.49.png"></p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="http://www.cnblogs.com/vipyoumay/p/5331787.html#%E5%85%88%E5%86%B3%E6%9D%A1%E4%BB%B6" target="_blank" rel="noopener">angular单元测试与自动化UI测试实践</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>web学习笔记01-Jasmine-Unit-Test</title>
      <link href="/2016/09/05/web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001-Jasmine-Unit-Test/"/>
      <url>/2016/09/05/web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001-Jasmine-Unit-Test/</url>
      <content type="html"><![CDATA[<h2>Unit Test</h2><ul><li><p></p><h4>单元测试概念（Unit Testing）</h4><br>&#160;&#160;&#160;&#160;又称为模块测试, 是针对程序模块（软件设计的最小单位）来进行正确性检验的测试工作。程序单元是应用的最小可测试部件。在过程化编程中，一个单元就是单个程序、函数、过程等；对于面向对象编程，最小单元就是方法，包括基类（超类）、抽象类、或者派生类（子类）中的方法。<p></p></li><li><p></p><h4>单元测试必要性</h4><br>&#160;&#160;&#160;&#160;随着项目规模的增加，函数、方法、变量都在递增，维护的难度不断加大，以及测试提出的各种bug导致修改代码的时候会将原本整洁的代码变得混乱。<br>&#160;&#160;&#160;&#160;经常出现同一个接口以不同的名称出现在不同的控制器中，这个时候往往会去重构代码，但是重构代码的时候没人会保证自己将万无一失，重构的代码还是正确的，方法一样跑通等等。这个时候就需要单元测试了，单元测试是一个衡量标准，告诉开发人员这么做是否将改变结果。保证重构后的代码的兼容性，减少人力测试的过程，降低维护成本。<p></p></li></ul><h2>Jasmine</h2><p>&#160;&#160;&#160;&#160;Jasmine是一个behavior-driven development ( 行为驱动开发 ) 测试框架， 不依赖于任何其他JavaScript框架， 不依赖DOM， 并且有很简洁的语法让你能够很轻松的编写单元测试。它既可以在html文件中运行，也可以和jsTestDriver整合，在jsTestDriver中运行。</p><ul><li><p>BDD 行为驱动开发，是一种新的敏捷开发方法。相对于TDD(测试驱动开发)，它更趋向于需求，需要共同利益者的参与，强调用户故事和行为;是面向开发者、QA、非技术人员或商业参与者共同参与和理解的开发活动，而不是TDD简单地只关注开发者的方法论；  </p></li><li><p>TDD测试驱动开发，是一种不同于传统软件开发流程:开发结束再测试介入的新型开发方法。要求把项目按功能点划分，在编写每个功能点前先编写测试代码，然后再编写使测试通过的功能代码，通过测试来推动整个开发工作。</p></li></ul><h2>搭建环境</h2><h4>1.下载源文件</h4><p><a href="https://github.com/jasmine/jasmine/releases" target="_blank" rel="noopener">jasmine源文件下载地址</a></p><p><img src="http://upload-images.jianshu.io/upload_images/1062695-257a5b3a23ce42f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图1.png">    </p><p>&#160;&#160;&#160;&#160;下载jasmine-standlone-2.5.0.zip即可。这是一个范例，但是可以直接使用。运行起来如下图显示：<br> <img src="http://upload-images.jianshu.io/upload_images/1062695-c601eb879ca4f145.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行图"></p><h4>2.使用</h4><br>&#160;&#160;&#160;&#160;将下载下来的文件夹中lib文件夹下的jasmine-2.5.0文件夹直接拖入你所需要用的项目。在index.html 中引入下面几句<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;shortcut icon&quot; type=&quot;image/png&quot; href=&quot;lib/jasmine-2.5.0/jasmine_favicon.png&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;lib/jasmine-2.5.0/jasmine.css&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;lib/jasmine-2.5.0/jasmine.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;lib/jasmine-2.5.0/jasmine-html.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;lib/jasmine-2.5.0/boot.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><br><br>&#160;&#160;&#160;&#160;之后便可以直接创建对应的测试用例js文件了。<br><br><br><br><h2>jasmine基础语法</h2><br><strong>一个简单的例子</strong><br><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">describe(&quot;A suite&quot;, function() &#123;  </span><br><span class="line">    it(&quot;contains spec with an expectation&quot;, function() &#123;  </span><br><span class="line">        expect(true).toBe(true);  </span><br><span class="line">    &#125;);  </span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">&lt;h3&gt;1.两个核心方法&lt;/h3&gt;</span><br><span class="line">- &lt;h4&gt;describe方法&lt;/h4&gt;  </span><br><span class="line">&amp;#160;&amp;#160;&amp;#160;&amp;#160;describe是jasmine用于描述测试集(Test Suite)的全局函数，作为测试集的开始，一般有两个参数，字符串和方法。字符串作为特定用例组的名字和标题。方法是包含实现用例组的代码。一个测试集合可以包含多个spec(测试点)。  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- &lt;h4&gt;it方法&lt;/h4&gt;</span><br><span class="line">&amp;#160;&amp;#160;&amp;#160;&amp;#160;jasmine中用方法it来开始specs。it方法和describe方法类似， 同样有两个参数，一个String，一个function；String用来描述测试点（spec），function是具体的测试代码。  </span><br><span class="line"></span><br><span class="line">**示例代码**   </span><br><span class="line"></span><br><span class="line">```  </span><br><span class="line">describe(&quot;This is an exmaple suite&quot;, function() &#123;</span><br><span class="line">  it(&quot;contains spec with an expectation&quot;, function() &#123;</span><br><span class="line">    expect(true).toBe(true);</span><br><span class="line">    expect(false).toBe(false);</span><br><span class="line">    expect(false).not.toBe(true);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><br><h3>2.四个核心概念</h3><br><h4>Jasmine四个核心概念：</h4><br> - 分组(Suites)<br> - 用例(Specs)<br> - 期望(Expectations)<br> - 匹配(Matchers)<br><br>- <h4>分组</h4>(Suites)<br>&#160;&#160;&#160;&#160;Suites可以理解为一组测试用例，以函数describe(string,function)封装，describe函数接受两个参数，一个字符串和一个函数。字符串是这个Suites的名字或标题（通常描述下测试内容），函数是实现Suites的代码块。一个Suite可以包含多个Specs，一个Specs可以包括多个expect<br><br>- <h4>用例</h4>用例(Specs)<br>&#160;&#160;&#160;&#160;<strong>Specs</strong>可以理解为一个测试用例，使用全局的Jasmin函数<strong>it</strong>创建。和<strong>describe</strong>一样接受两个参数，一个字符串和一个函数，函数就是要执行的测试代码，字符串就是测试用例的名字。一个<strong>Spec</strong>可以包含多个<strong>expectations</strong>来测试代码。<br><br>- <h4>期望</h4>(Expectations)<br>&#160;&#160;&#160;&#160;Expectations由expect 函数创建。接受一个参数。和Matcher一起联用，设置测试的预期值。返回ture或false。<br>&#160;&#160;&#160;&#160;在分组(<strong>describe</strong>)中可以写多个测试用例(<strong>it</strong>)，也可以再进行分组(<strong>describe</strong>)，在测试用例(<strong>it</strong>)中定义期望表达式(<strong>expect</strong>)和匹配判断(<strong>toBe</strong>)。看一个简单的Demo:<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">describe(&quot;A suite&quot;, function() &#123;//suites</span><br><span class="line">    var a;</span><br><span class="line">    it(&quot;A spec&quot;, function() &#123;//spec</span><br><span class="line">      a = true;</span><br><span class="line">      expect(a).toBe(true);//expectations</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    describe(&quot;a suite&quot;, function() &#123;//inner suites</span><br><span class="line">           it(&quot;a spec&quot;, function() &#123;//spec</span><br><span class="line">           expect(a).toBe(true);//expectations</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><br>- <h4>匹配</h4>(Matchers)<br>&#160;&#160;&#160;&#160;Matcher实现断言的比较操作，一个“期望值”与“实际值”的对比，如果结果为true，则通过测试，反之，则失败。每一个matcher都能通过not执行否定判断。<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">expect(a).toBe(true);//期望变量a为true</span><br><span class="line">expect(a).toEqual(true);//期望变量a等于true</span><br><span class="line">expect(a).toMatch(/reg/);//期望变量a匹配reg正则表达式，也可以是字符串</span><br><span class="line">expect(a.foo).toBeDefined();//期望a.foo已定义</span><br><span class="line">expect(a.foo).toBeUndefined();//期望a.foo未定义</span><br><span class="line">expect(a).toBeNull();//期望变量a为null</span><br><span class="line">expect(a.isMale).toBeTruthy();//期望a.isMale为真</span><br><span class="line">expect(a.isMale).toBeFalsy();//期望a.isMale为假</span><br><span class="line">expect(true).toEqual(true);//期望true等于true</span><br><span class="line">expect(a).toBeLessThan(b);//期望a小于b</span><br><span class="line">expect(a).toBeGreaterThan(b);//期望a大于b</span><br><span class="line">expect(a).toThrowError(/reg/);//期望a方法抛出异常，异常信息可以是字符串、正则表达式、错误类型以及错误类型和错误信息</span><br><span class="line">expect(a).toThrow();//期望a方法抛出异常</span><br><span class="line">expect(a).toContain(b);//期望a(数组或者对象)包含b</span><br></pre></td></tr></table></figure><br><br>&#160;&#160;&#160;&#160;自定义Matcher（被称为Matcher Factories）实质上是一个函数（该函数的参数可以为空），该函数返回一个闭包，该闭包的本质是一个compare函数，compare函数接受2个参数：actual value 和 expected value。<br>&#160;&#160;&#160;&#160;compare函数必须返回一个带pass属性的结果Object，pass属性是一个Boolean值，表示该Matcher的结果（为true表示该Matcher实际值与预期值匹配，为false表示不匹配），也就是说，实际值与预期值具体的比较操作的结果，存放于pass属性中。<br><br><h4>其他matchers：</h4><br><strong>jasmine.any(Class)–传入构造函数或者类返回数据类型作为期望值，返回true表示实际值和期望值数据类型相同:</strong><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">it(&quot;matches any value&quot;, function() &#123;</span><br><span class="line">    expect(&#123;&#125;).toEqual(jasmine.any(Object));</span><br><span class="line">    expect(12).toEqual(jasmine.any(Number));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><br><strong>jasmine.anything()–如果实际值不是null或者undefined则返回true:</strong><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(&quot;matches anything&quot;, function() &#123;</span><br><span class="line">    expect(1).toEqual(jasmine.anything());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><br><strong>jasmine.objectContaining({key:value})–实际数组只要匹配到有包含的数值就算匹配通过:</strong><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">foo = &#123;</span><br><span class="line">      a: 1,</span><br><span class="line">      b: 2,</span><br><span class="line">      bar: &quot;baz&quot;</span><br><span class="line">&#125;;</span><br><span class="line">expect(foo).toEqual(jasmine.objectContaining(&#123;bar: &quot;baz&quot;&#125;));</span><br></pre></td></tr></table></figure><br><br><strong>jasmine.arrayContaining([val1,val2,…])–stringContaining可以匹配字符串的一部分也可以匹配对象内的字符串:</strong><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">expect(&#123;foo: &apos;bar&apos;&#125;).toEqual(&#123;foo: jasmine.stringMatching(/^bar$/)&#125;);</span><br><span class="line">expect(&apos;foobarbaz&apos;).toEqual(&#123;foo: jasmine.stringMatching(&apos;bar&apos;)&#125;);</span><br></pre></td></tr></table></figure><br><br><h3>3.Setup和Teardown方法</h3><br>&#160;&#160;&#160;&#160;为了减少重复性的代码，jasmine提供了beforeEach、afterEach、beforeAll、afterAll方法。<br><br>- beforeEach() :在describe函数中每个Spec执行之前执行；<br>- afterEach() :在describe函数中每个Spec执行之后执行;<br>- beforeAll() :在describe函数中所有的Specs执行之前执行，且只执行一次<br>- afterAll () : 在describe函数中所有的Specs执行之后执行，且只执行一次<br><br><br><br><h5>结果如图所示:</h5><br><img src="http://upload-images.jianshu.io/upload_images/1062695-6660e7d9e385fb4b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结果"><br><br><h3>4.describe函数的嵌套</h3><br><br>&#160;&#160;&#160;&#160;每个嵌套的<strong>describe</strong>函数，都可以有自己的<strong>beforeEach</strong>，<strong>afterEach</strong>函数。<br>&#160;&#160;&#160;&#160;在执行每个内层<strong>Spec</strong>时，都会按嵌套的由外及内的顺序执行每个<strong>beforeEach</strong>函数，所以内层<strong>Sepc</strong>可以访问到外层<strong>Sepc</strong>中的<strong>beforeEach</strong>中的数据。类似的，当内层<strong>Spec</strong>执行完成后，会按由内及外的顺序执行每个<strong>afterEach</strong>函数。<br><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">describe(&quot;A spec&quot;, function() &#123;</span><br><span class="line">  var foo;</span><br><span class="line"></span><br><span class="line">  beforeEach(function() &#123;</span><br><span class="line">    foo = 0;</span><br><span class="line">    foo += 1;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  afterEach(function() &#123;</span><br><span class="line">    foo = 0;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(&quot;is just a function, so it can contain any code&quot;, function() &#123;</span><br><span class="line">    expect(foo).toEqual(1);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(&quot;can have more than one expectation&quot;, function() &#123;</span><br><span class="line">    expect(foo).toEqual(1);</span><br><span class="line">    expect(true).toEqual(true);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  describe(&quot;nested inside a second describe&quot;, function() &#123;</span><br><span class="line">    var bar;</span><br><span class="line">    beforeEach(function() &#123;</span><br><span class="line">      bar = 1;</span><br><span class="line">    &#125;);</span><br><span class="line">    it(&quot;can reference both scopes as needed&quot;, function() &#123;</span><br><span class="line">      expect(foo).toEqual(bar);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><br><h3>5.禁用Suites,挂起Specs</h3><br><br><br>&#160;&#160;&#160;&#160;<strong>Suites</strong>可以被<strong>Disabled</strong>。在<strong>describe</strong>函数名之前添加<strong>x</strong>即可将<strong>Suite</strong>禁用。<br>&#160;&#160;&#160;&#160;被<strong>Disabled</strong>的<strong>Suites</strong>在执行中会被跳过，该<strong>Suite</strong>的结果也不会显示在结果集中。<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">xdescribe(&quot;A spec&quot;, function() &#123;</span><br><span class="line">  var foo;</span><br><span class="line"></span><br><span class="line">  beforeEach(function() &#123;</span><br><span class="line">    foo = 0;</span><br><span class="line">    foo += 1;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(&quot;is just a function, so it can contain any code&quot;, function() &#123;</span><br><span class="line">    expect(foo).toEqual(1);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><br>&#160;&#160;&#160;&#160;有3种方法可以将一个Spec标记为Pending。被Pending的Spec不会被执行，但是Spec的名字会在结果集中显示，只是标记为Pending。<br><br>- 如果在Spec函数it的函数名之前添加x（xit），那么该Spec就会被标记为Pending。<br>- 一个没有定义函数体的Sepc也会在结果集中被标记为Pending。<br>- 如果在Spec的函数体中调用pending()函数，那么该Spec也会被标记为Pending。pending()函数接受一个字符串参数，该参数会在结果集中显示在PENDING WITH MESSAGE:之后，作为为何被Pending的原因。<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">describe(&quot;Pending specs&quot;, function() &#123;</span><br><span class="line"></span><br><span class="line">  xit(&quot;can be declared &apos;xit&apos;&quot;, function() &#123;</span><br><span class="line">    expect(true).toBe(false);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(&quot;can be declared with &apos;it&apos; but without a function&quot;);</span><br><span class="line">  </span><br><span class="line">  it(&quot;can be declared by calling &apos;pending&apos; in the spec body&quot;, function() &#123;</span><br><span class="line">    expect(true).toBe(false);</span><br><span class="line">    pending(&apos;this is why it is pending&apos;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><br><h3>6.Spy追踪</h3><br><h4>&#160;&#160;&#160;&#160;Jasmine具有函数的追踪和反追踪的双重功能，这东西就是Spy。Spy能够存储任何函数调用记录和传入的参数，Spy只存在于describe和it中，在spec执行完之后销毁。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">describe(&quot;A spy&quot;, function() &#123;</span><br><span class="line">  var foo, bar = null;</span><br><span class="line">  beforeEach(function() &#123;</span><br><span class="line">    foo = &#123;</span><br><span class="line">      setBar: function(value) &#123;</span><br><span class="line">        bar = value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    spyOn(foo, &apos;setBar&apos;);//给foo对象的setBar函数绑定追踪</span><br><span class="line">    foo.setBar(123);</span><br><span class="line">    foo.setBar(456, &apos;another param&apos;);</span><br><span class="line">  &#125;);</span><br><span class="line">  it(&quot;tracks that the spy was called&quot;, function() &#123;</span><br><span class="line">    expect(foo.setBar).toHaveBeenCalled();//toHaveBeenCalled用来匹配测试函数是否被调用过</span><br><span class="line">  &#125;);</span><br><span class="line">  it(&quot;tracks all the arguments of its calls&quot;, function() &#123;</span><br><span class="line">    expect(foo.setBar).toHaveBeenCalledWith(123);//toHaveBeenCalledWith用来匹配测试函数被调用时的参数列表</span><br><span class="line">    expect(foo.setBar).toHaveBeenCalledWith(456, &apos;another param&apos;);//期望foo.setBar已经被调用过，且传入参数为[456, &apos;another param&apos;]</span><br><span class="line">  &#125;);</span><br><span class="line">  it(&quot;stops all execution on a function&quot;, function() &#123;</span><br><span class="line">    expect(bar).toBeNull();//用例没有执行foo.setBar,bar为null</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4>&#160;&#160;&#160;&#160;and.callThrough–spy链式调用and.callThrough后，在获取spy的同时，调用实际的函数。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">describe(&quot;A spy, when configured to call through&quot;, function() &#123;</span><br><span class="line">  var foo, bar, fetchedBar;</span><br><span class="line">  beforeEach(function() &#123;</span><br><span class="line">    foo = &#123;</span><br><span class="line">      setBar: function(value) &#123;</span><br><span class="line">        bar = value;</span><br><span class="line">      &#125;,</span><br><span class="line">      getBar: function() &#123;</span><br><span class="line">        return bar;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    spyOn(foo, &apos;getBar&apos;).and.callThrough();//调用and.callThrough方法</span><br><span class="line">    foo.setBar(123);</span><br><span class="line">    fetchedBar = foo.getBar();//因为and.callThrough，这里执行的是foo.getBar方法，而不是spy的方法</span><br><span class="line">  &#125;);</span><br><span class="line">  it(&quot;tracks that the spy was called&quot;, function() &#123;</span><br><span class="line">    expect(foo.getBar).toHaveBeenCalled();</span><br><span class="line">  &#125;);</span><br><span class="line">  it(&quot;should not effect other functions&quot;, function() &#123;</span><br><span class="line">    expect(bar).toEqual(123);</span><br><span class="line">  &#125;);</span><br><span class="line">  it(&quot;when called returns the requested value&quot;, function() &#123;</span><br><span class="line">    expect(fetchedBar).toEqual(123);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4>&#160;&#160;&#160;&#160;and.returnValue–spy链式调用and.returnValue 后，任何时候调用该方法都只会返回指定的值，</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">describe(&quot;A spy, when configured to fake a return value&quot;, function() &#123;</span><br><span class="line">  var foo, bar, fetchedBar;</span><br><span class="line">  beforeEach(function() &#123;</span><br><span class="line">    foo = &#123;</span><br><span class="line">      setBar: function(value) &#123;</span><br><span class="line">        bar = value;</span><br><span class="line">      &#125;,</span><br><span class="line">      getBar: function() &#123;</span><br><span class="line">        return bar;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    spyOn(foo, &quot;getBar&quot;).and.returnValue(745);//指定返回值为745</span><br><span class="line">    foo.setBar(123);</span><br><span class="line">    fetchedBar = foo.getBar();</span><br><span class="line">  &#125;);</span><br><span class="line">  it(&quot;tracks that the spy was called&quot;, function() &#123;</span><br><span class="line">    expect(foo.getBar).toHaveBeenCalled();</span><br><span class="line">  &#125;);</span><br><span class="line">  it(&quot;should not effect other functions&quot;, function() &#123;</span><br><span class="line">    expect(bar).toEqual(123);</span><br><span class="line">  &#125;);</span><br><span class="line">  it(&quot;when called returns the requested value&quot;, function() &#123;</span><br><span class="line">    expect(fetchedBar).toEqual(745);//默认返回指定的returnValue值</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4>&#160;&#160;&#160;&#160;and.callFake–spy链式添加and.callFake相当于用新的方法替换spy的方法 </h4> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">describe(&quot;A spy, when configured with an alternate implementation&quot;, function() &#123;</span><br><span class="line">  var foo, bar, fetchedBar;</span><br><span class="line">  beforeEach(function() &#123;</span><br><span class="line">    foo = &#123;</span><br><span class="line">      setBar: function(value) &#123;</span><br><span class="line">        bar = value;</span><br><span class="line">      &#125;,</span><br><span class="line">      getBar: function() &#123;</span><br><span class="line">        return bar;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    spyOn(foo, &quot;getBar&quot;).and.callFake(function() &#123;//指定callFake方法</span><br><span class="line">      return 1001;</span><br><span class="line">    &#125;);</span><br><span class="line">    foo.setBar(123);</span><br><span class="line">    fetchedBar = foo.getBar();</span><br><span class="line">  &#125;);</span><br><span class="line">  it(&quot;tracks that the spy was called&quot;, function() &#123;</span><br><span class="line">    expect(foo.getBar).toHaveBeenCalled();</span><br><span class="line">  &#125;);</span><br><span class="line">  it(&quot;should not effect other functions&quot;, function() &#123;</span><br><span class="line">    expect(bar).toEqual(123);</span><br><span class="line">  &#125;);</span><br><span class="line">  it(&quot;when called returns the requested value&quot;, function() &#123;</span><br><span class="line">    expect(fetchedBar).toEqual(1001);//执行callFake方法，返回1001</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><h4>&#160;&#160;&#160;&#160;and.throwError–spy链式调用and.callError后，任何时候调用该方法都会抛出异常错误信息: </h4><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">describe(&quot;A spy, when configured to throw an error&quot;, function() &#123;</span><br><span class="line">  var foo, bar;</span><br><span class="line">  beforeEach(function() &#123;</span><br><span class="line">    foo = &#123;</span><br><span class="line">      setBar: function(value) &#123;</span><br><span class="line">        bar = value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    spyOn(foo, &quot;setBar&quot;).and.throwError(&quot;error&quot;);//指定throwError</span><br><span class="line">  &#125;);</span><br><span class="line">  it(&quot;throws the value&quot;, function() &#123;</span><br><span class="line">    expect(function() &#123;</span><br><span class="line">      foo.setBar(123)</span><br><span class="line">    &#125;).toThrowError(&quot;error&quot;);//抛出错误异常</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><p></p><h4>&#160;&#160;&#160;&#160;and.stub–spy恢复到原始状态，不执行任何操作。直接看下代码: </h4><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">describe(&quot;A spy&quot;, function() &#123;</span><br><span class="line">  var foo, bar = null;</span><br><span class="line">  beforeEach(function() &#123;</span><br><span class="line">    foo = &#123;</span><br><span class="line">      setBar: function(value) &#123;</span><br><span class="line">        bar = value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    spyOn(foo, &apos;setBar&apos;).and.callThrough();</span><br><span class="line">  &#125;);</span><br><span class="line">  it(&quot;can call through and then stub in the same spec&quot;, function() &#123;</span><br><span class="line">    foo.setBar(123);</span><br><span class="line">    expect(bar).toEqual(123);</span><br><span class="line">    foo.setBar.and.stub();//把foo.setBar设置为原始状态，and.callThrough无效</span><br><span class="line">    bar = null;</span><br><span class="line">    foo.setBar(123);//执行赋值无效</span><br><span class="line">    expect(bar).toBe(null);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><p></p><h4>&#160;&#160;&#160;&#160;Spy的其他方法  </h4><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.calls.any():记录spy是否被访问过，如果没有，则返回false，否则，返回true；</span><br><span class="line">.calls.count():记录spy被访问过的次数；</span><br><span class="line">.calls.argsFor(index):返回指定索引的参数；</span><br><span class="line">.calls.allArgs():返回所有函数调用的参数记录数组；</span><br><span class="line">.calls.all ():返回所有函数调用的上下文、参数和返回值；</span><br><span class="line">.calls.mostRecent():返回最近一次函数调用的上下文、参数和返回值；</span><br><span class="line">.calls.first():返回第一次函数调用的上下文、参数和返回值；</span><br><span class="line">.calls.reset():清除spy的所有调用记录；</span><br></pre></td></tr></table></figure><p></p><p></p><h4>参考：</h4><br><a href="http://jasmine.github.io/2.5/introduction.html" target="_blank" rel="noopener">官方文档</a><br><a href="http://www.open-open.com/lib/view/open1402751449322.html" target="_blank" rel="noopener">jasmine测试框架简介</a><br><a href="http://www.cnblogs.com/zhcncn/p/4330112.html" target="_blank" rel="noopener">JavaScript单元测试框架-Jasmine</a><br><a href="http://www.tuicool.com/articles/J7vUny" target="_blank" rel="noopener">JavaScript 单元测试框架：Jasmine 初探</a><br><a href="http://blog.csdn.net/luqin1988/article/details/8701611" target="_blank" rel="noopener">web前端开发七武器—Jasmine入门教程(上)</a><br><a href="http://www.jianshu.com/p/cbfbfe65d777" target="_blank" rel="noopener">前端测试-jasmine</a><br><a href="http://www.jianshu.com/p/5254b4b1a5de" target="_blank" rel="noopener">开启JavaScript测试之路–Jasmine</a>  <p></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>iOS学习笔记01-自定义简单弹出pickerView</title>
      <link href="/2016/09/02/iOS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%AE%80%E5%8D%95%E5%BC%B9%E5%87%BApickerView/"/>
      <url>/2016/09/02/iOS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%AE%80%E5%8D%95%E5%BC%B9%E5%87%BApickerView/</url>
      <content type="html"><![CDATA[<p> &#160;&#160;&#160;&#160;UIPickerView平常用的地方好像也不是很多，顶多就是一些需要选择的地方，这次项目需要这一个功能，我就单独写了一个简单的demo，效果图如下：</p> <h5>新增主页面弹出view，在主页面添加的代码</h5><br><h6>有个小问题就是第四个直接添加在主页弹出来的view好像被导航栏给覆盖了，我还没去研究，就着急的先吧功能写了。大家谅解下</h6><br><img src="http://upload-images.jianshu.io/upload_images/1062695-5051762d50ff7123.gif?imageMogr2/auto-orient/strip" alt="9月-03-2016 17-49-51.gif"><br><h5>最初版本</h5><p><img src="http://upload-images.jianshu.io/upload_images/1062695-e5ea7bca16082ce7.gif?imageMogr2/auto-orient/strip" alt="picker.gif"></p><p> &#160;&#160;&#160;&#160;<strong>话说我终于弄了gif了，再也不要去截图每张图都发一遍了！！</strong><br> &#160;&#160;&#160;&#160;这个demo呢，等于是可以拿来直接用的第三方了吧，只需要传数据就可以了，弹出的三个框显示的数据也不一样，我的封装能力不行，所以都是单独写了，在这里呢，我先把链接发上，大家要是没有耐心的其实可以直接看demo，下载了，看下代码基本上就会了。<a href="https://github.com/Yulingsong/YLSPicker" target="_blank" rel="noopener">YLSPicker</a>。</p><p> &#160;&#160;&#160;&#160;实现的基本思路呢，其实也挺简单的。我这里就说下我实现的过程，然后贴上代码片段，大家可以看一下。</p><h4>第一步：主页面的设置</h4><br>  &#160;&#160;&#160;&#160;这里其实也没啥好说的，页面上三个不能输入的三个文本框，然后点击会弹出东西来。<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//宏定义</span><br><span class="line">#define YLSRect(x, y, w, h)  CGRectMake([UIScreen mainScreen].bounds.size.width * x, [UIScreen mainScreen].bounds.size.height * y, [UIScreen mainScreen].bounds.size.width * w,  [UIScreen mainScreen].bounds.size.height * h)</span><br></pre></td></tr></table></figure><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@interface ViewController ()&lt;UITextFieldDelegate&gt;</span><br><span class="line">//声明</span><br><span class="line">/** text1 */</span><br><span class="line">@property (nonatomic,strong) UITextField *text1;</span><br><span class="line">/** text2 */</span><br><span class="line">@property (nonatomic,strong) UITextField *text2;</span><br><span class="line">/** text3 */</span><br><span class="line">@property (nonatomic,strong) UITextField *text3;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">   - (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    self.title = @&quot;Picker&quot;;</span><br><span class="line">    </span><br><span class="line">    //placeholder数组</span><br><span class="line">    NSArray *placeholderArr = @[@&quot;Picker OneVlaue&quot;,@&quot;Picker TwoVlaue&quot;,@&quot;Picker ThreeVlaue&quot;];</span><br><span class="line">    //循环添加文本框</span><br><span class="line">    for (int i = 0; i &lt; 3; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        UITextField *text = [[UITextField alloc]initWithFrame:YLSRect(100/375, (140 + i * 60)/667, 175/375, 30/667)];</span><br><span class="line">        text.borderStyle = UITextBorderStyleRoundedRect;</span><br><span class="line">        text.backgroundColor = [UIColor lightGrayColor];</span><br><span class="line">        text.tag = i + 1000;</span><br><span class="line">        text.placeholder = placeholderArr[i];</span><br><span class="line">        text.delegate = self;</span><br><span class="line">        [self.view addSubview:text];</span><br><span class="line">        if(text.tag == 1000)</span><br><span class="line">        &#123;</span><br><span class="line">            self.text1 = text;</span><br><span class="line">        &#125;else if(text.tag == 1001)</span><br><span class="line">        &#123;</span><br><span class="line">            self.text2 = text;</span><br><span class="line">        &#125;else</span><br><span class="line">        &#123;</span><br><span class="line">            self.text3 = text;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br> &#160;&#160;&#160;&#160;很多像我这样的新手，对textfiled的代理都不是很清楚，像我这个点击文本框不进行编辑，然后还能弹出自定义view的事件应该在哪里实现呢，答案就是在<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//点击文本框时触发的事件</span><br><span class="line">- (BOOL)textFieldShouldBeginEditing:(UITextField *)textField;</span><br></pre></td></tr></table></figure><br><br>就这样，主页面算是勾画好了。接下来就是自定义view的部分了。<br><br><h4>第二步：实现自定义view</h4><p> &#160;&#160;&#160;&#160;1.创建类YLSOPickerView<br> &#160;&#160;&#160;&#160;2.在.h文件中声明变量，一个是需要传入的数组，一个是弹出框的标题。还要声明两个方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@interface YLSOPickerView : UIView</span><br><span class="line">/** array */</span><br><span class="line">@property (nonatomic,strong) NSArray *array;</span><br><span class="line">/** title */</span><br><span class="line">@property (nonatomic,strong) NSString *title;</span><br><span class="line">//快速创建</span><br><span class="line">+(instancetype)pickerView;</span><br><span class="line">//弹出</span><br><span class="line">-(void)show;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p> &#160;&#160;&#160;&#160;3.接下来的就是最主要的工作，就是.m文件的编写</p><ul><li>宏定义</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#define YLSRect(x, y, w, h)  CGRectMake([UIScreen mainScreen].bounds.size.width * x, [UIScreen mainScreen].bounds.size.height * y, [UIScreen mainScreen].bounds.size.width * w,  [UIScreen mainScreen].bounds.size.height * h)</span><br><span class="line">#define YLSFont(f) [UIFont systemFontOfSize:[UIScreen mainScreen].bounds.size.width * f]</span><br><span class="line">#define YLSColorAlpha(r,g,b,a) [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:(a)]</span><br><span class="line">#define YLSMainBackColor [UIColor colorWithRed:240/255.0 green:239/255.0 blue:245/255.0 alpha:1]</span><br><span class="line">#define BlueColor [UIColor colorWithRed:0/255.0 green:122/255.0 blue:255/255.0 alpha:1]</span><br><span class="line">#define ClearColor [UIColor clearColor]</span><br></pre></td></tr></table></figure><ul><li>声明需要用到的控件，遵守响应的协议  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@interface YLSOPickerView()&lt;UIPickerViewDelegate,UIPickerViewDataSource&gt;</span><br><span class="line">/** view */</span><br><span class="line">@property (nonatomic,strong) UIView *topView;</span><br><span class="line">/** button */</span><br><span class="line">@property (nonatomic,strong) UIButton *doneBtn;</span><br><span class="line">/** pickerView */</span><br><span class="line">@property (nonatomic,strong) UIPickerView *pickerView;</span><br><span class="line">/** 选择传回的值 */</span><br><span class="line">@property (nonatomic,strong) NSString *result;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><ul><li>实现init方法和创建方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//快速创建</span><br><span class="line">+ (instancetype)pickerView</span><br><span class="line">&#123;</span><br><span class="line">    return [[self alloc]init];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(instancetype)initWithFrame:(CGRect)frame</span><br><span class="line">&#123;</span><br><span class="line">    self = [super initWithFrame:YLSRect(0, 0, 1, 917/667)];</span><br><span class="line">    if (self)</span><br><span class="line">    &#123;</span><br><span class="line">        self.backgroundColor = YLSColorAlpha(0, 0, 0, 0.4);    </span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> &#160;&#160;&#160;&#160;<strong>这里呢我要说一下的是，为了达到在点击文本框从下弹出的一个动态效果，所以起初的时候我将整个view的长度设置成了一个屏幕的长度加上选择器的长度，在弹出方法中我将整个view上移着添加进屏幕。这样会有好看点效果</strong></p><ul><li>添加页面控件，设置样式位置等</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">-(void)layoutSubviews</span><br><span class="line">&#123;</span><br><span class="line">    [super layoutSubviews];</span><br><span class="line">    </span><br><span class="line">    self.topView = [[UIView alloc]initWithFrame:YLSRect(0, 667/667, 1, 250/667)];</span><br><span class="line">    self.topView.backgroundColor = [UIColor whiteColor];</span><br><span class="line">    [self addSubview:self.topView];</span><br><span class="line">    </span><br><span class="line">    //为view上面的两个角做成圆角。不喜欢的可以注掉</span><br><span class="line">    UIBezierPath *maskPath = [UIBezierPath bezierPathWithRoundedRect:self.topView.bounds byRoundingCorners:UIRectCornerTopLeft | UIRectCornerTopRight cornerRadii:CGSizeMake(5, 5)];</span><br><span class="line">    CAShapeLayer *maskLayer = [[CAShapeLayer alloc] init];</span><br><span class="line">    maskLayer.frame = self.topView.bounds;</span><br><span class="line">    maskLayer.path = maskPath.CGPath;</span><br><span class="line">    self.topView.layer.mask = maskLayer;</span><br><span class="line">    </span><br><span class="line">    self.doneBtn = [UIButton buttonWithType:UIButtonTypeCustom];</span><br><span class="line">    [self.doneBtn setTitle:@&quot;Done&quot; forState:UIControlStateNormal];</span><br><span class="line">    [self.doneBtn setTitleColor:[UIColor grayColor] forState:UIControlStateNormal];</span><br><span class="line">    [self.doneBtn setFrame:YLSRect(320/375, 5/667, 50/375, 40/667)];</span><br><span class="line">    [self.doneBtn addTarget:self action:@selector(quit) forControlEvents:UIControlEventTouchUpInside];</span><br><span class="line">    [self.topView addSubview:self.doneBtn];</span><br><span class="line">    </span><br><span class="line">    UILabel *titlelb = [[UILabel alloc]initWithFrame:YLSRect(100/375, 0, 175/375, 50/667)];</span><br><span class="line">    titlelb.backgroundColor = ClearColor;</span><br><span class="line">    titlelb.textAlignment = NSTextAlignmentCenter;</span><br><span class="line">    titlelb.text = self.title;</span><br><span class="line">    titlelb.font = YLSFont(20/375);</span><br><span class="line">    [self.topView addSubview:titlelb];</span><br><span class="line">    </span><br><span class="line">    self.pickerView = [[UIPickerView alloc]init];</span><br><span class="line">    [self.pickerView setFrame:YLSRect(0, 50/667, 1, 200/667)];</span><br><span class="line">    [self.pickerView setBackgroundColor:YLSMainBackColor];</span><br><span class="line">    [self.pickerView setDelegate:self];</span><br><span class="line">    [self.pickerView setDataSource:self];</span><br><span class="line">    [self.pickerView selectRow:0 inComponent:0 animated:YES];</span><br><span class="line">    [self.topView addSubview:self.pickerView];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> &#160;&#160;&#160;&#160;<strong>同样，在这里我把topview的左上和右上两个角设置成了圆角也就是为了好看点，其实没啥区别，用的时候可以根据自己的需求来注释掉啥的。</strong></p><ul><li>实现pickerView的协议方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;UIPickerViewDelegate,UIPickerViewDataSource&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 返回选择器有几列.</span><br><span class="line">- (NSInteger)numberOfComponentsInPickerView:(UIPickerView *)pickerView</span><br><span class="line">&#123;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 返回每组有几行</span><br><span class="line">- (NSInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component</span><br><span class="line">&#123;</span><br><span class="line">    return [self.array count];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 代理</span><br><span class="line">// 返回第component列第row行的内容（标题）</span><br><span class="line">- (NSString *)pickerView:(UIPickerView *)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component</span><br><span class="line">&#123;</span><br><span class="line">    return self.array[row];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 选中第component第row的时候调用</span><br><span class="line">- (void)pickerView:(UIPickerView *)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component</span><br><span class="line">&#123;</span><br><span class="line">    self.result = self.array[row];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>先现实show方法，然后实现点击按钮Done的推出方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//弹出</span><br><span class="line">- (void)show</span><br><span class="line">&#123;</span><br><span class="line">    [self showInView:[UIApplication sharedApplication].keyWindow];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//添加弹出移除的动画效果</span><br><span class="line">- (void)showInView:(UIView *)view</span><br><span class="line">&#123;</span><br><span class="line">    // 浮现</span><br><span class="line">    [UIView animateWithDuration:0.5 animations:^&#123;</span><br><span class="line">        CGPoint point = self.center;</span><br><span class="line">        point.y -= 250;</span><br><span class="line">        self.center = point;</span><br><span class="line">    &#125; completion:^(BOOL finished) &#123;   </span><br><span class="line">    &#125;];</span><br><span class="line">    [view addSubview:self];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-(void)quit</span><br><span class="line">&#123;</span><br><span class="line">    [UIView animateWithDuration:0.5 animations:^&#123;</span><br><span class="line">        self.alpha = 0;</span><br><span class="line">        CGPoint point = self.center;</span><br><span class="line">        point.y += 250;</span><br><span class="line">        self.center = point;</span><br><span class="line">    &#125; completion:^(BOOL finished) &#123;</span><br><span class="line">        if (!self.result) &#123;</span><br><span class="line">            self.result = self.array[0];</span><br><span class="line">        &#125;</span><br><span class="line">        NSLog(@&quot;%@&quot;,self.result);</span><br><span class="line">        [[NSNotificationCenter defaultCenter]postNotificationName:@&quot;value&quot; object:self.result];</span><br><span class="line">        [self removeFromSuperview];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> &#160;&#160;&#160;&#160;<strong>在这里呢，需要注意的是，假设你没有点击，没有滑动的话，self.result是空值，所以需要你判断下，若为空，传入数组第一个数据，不为空的话就直接传递了，另外我用的是通知传值，因为block传值我还没有去学习了解，所以这里就用上我会的一个通知传值，但是我有个小问题，希望看到的人回答下我，通知一般在什么时候移除比较好呢？？</strong></p><p></p><h4>第三步：主页实现点击出现的方法，并且接收回传的值。</h4><p></p><ul><li>主页面引入头文件<strong>#import “YLSOPickerView.h”</strong></li><li>实现点击弹出的事件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - UITextFieldDelegate</span><br><span class="line">//点击文本框时触发的事件，唤起跳出视图</span><br><span class="line">- (BOOL)textFieldShouldBeginEditing:(UITextField *)textField</span><br><span class="line">&#123;</span><br><span class="line">    if(textField.tag == 1000)</span><br><span class="line">    &#123;</span><br><span class="line">        YLSOPickerView *picker = [[YLSOPickerView alloc]init];</span><br><span class="line">        picker.array = @[@&quot;iPhone4&quot;,@&quot;iPhone4S&quot;,@&quot;iPhone5&quot;,@&quot;iPhone5S&quot;,@&quot;iPhone5C&quot;,@&quot;iPhone6&quot;,@&quot;iPhone6Plus&quot;,@&quot;iPhone6S&quot;,@&quot;iPhone6SPlus&quot;];</span><br><span class="line">        picker.title = @&quot;pick number&quot;;</span><br><span class="line">        [picker show];</span><br><span class="line">    &#125;</span><br><span class="line">    return NO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在<strong>- (void)viewDidLoad</strong>方法中接收通知，实现通知方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(getValue:) name:@&quot;value&quot; object:nil];</span><br><span class="line"></span><br><span class="line">-(void)getValue:(NSNotification *)notification</span><br><span class="line">&#123;</span><br><span class="line">    self.text1.text = notification.object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这样一来，一个简单的挑选单个数据的自定义选择器就算是大功告成了，使用起来有些许不方法，大家如果使用的话可以自己修改修改，此外要是有什么好的改进方法，大家也可以教教我，一起学习学习</strong></p><p></p><h4>Others</h4><br> &#160;&#160;&#160;&#160;在另外两个文本框点击出现的选择器本质上还是与上面写的一样，只是第二个数有联动效果的，第一组数据滑动的时候，第二组数据也跟着换，那我在写的时候传入的数据是字典形式的，然后另外设置两个数组将字典里的数据接收了，当然，开始就传数组形式的数据也可以，只需要在协议方法里面修改响应的代码就可以了。其他没什么变化。<br>传值的时候<br> &#160;&#160;&#160;&#160;第三个文本框也同样与前两个本质上行没有啥区别，只是在上面多了一个随机按钮，随机按钮点击事件实现也挺简单的<p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">self.ranBtn = [UIButton buttonWithType:UIButtonTypeCustom];</span><br><span class="line">[self.ranBtn setTitle:@&quot;Random&quot; forState:UIControlStateNormal];</span><br><span class="line">[self.ranBtn setTitleColor:[UIColor grayColor] forState:UIControlStateNormal];</span><br><span class="line">[self.ranBtn setFrame:YLSRect(5/375, 5/667, 100/375, 40/667)];</span><br><span class="line">[self.ranBtn addTarget:self action:@selector(random:) forControlEvents:UIControlEventTouchUpInside];</span><br><span class="line">[self.topView addSubview:self.ranBtn];</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-(void)random:(UIPickerView *)picker</span><br><span class="line">&#123;</span><br><span class="line">    for (int i = 0; i &lt; 3; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        // 取出第i列的行数</span><br><span class="line">        NSInteger count = [self.array[i] count];</span><br><span class="line">        int random = arc4random_uniform((u_int32_t)count);</span><br><span class="line">        //不会触发代理的选中方法</span><br><span class="line">        [self.pickerView selectRow:random inComponent:i animated:YES];</span><br><span class="line">        //label数据刷新</span><br><span class="line">        [self pickerView:picker didSelectRow:random inComponent:i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这就ok了</strong></p><p></p><h5>新增</h5><br>在热心网友的提醒下，告知直接在页面添加也可以，我就添加上去了，然后还有评论说可以直接textfield的inputview设置成pickerview，这个可以的，之前我也写过的，但是刚才粗糙的加了个主页面的view，还没有去写inputview上的pickerview，等有时间再添加上去。另外也添加了dealloc方法，移除通知了。<br> &#160;&#160;&#160;&#160;<h6>这边就是我所有的思路和大部分的代码，虽然感觉没啥用处，但是新手学习的话还是有些意思的。以上的demo呢，还有很多没有完善的地方，要是大家有意见或者建议，留言评论下，讨论下应该怎么改怎么优化啥的，我很欢迎的，希望大家可以一起学习啥的。也希望我自己能经常写出一些对大家有帮助的代码。</h6><p></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>iOS常用宏定义</title>
      <link href="/2016/08/19/iOS%E5%B8%B8%E7%94%A8%E5%AE%8F%E5%AE%9A%E4%B9%89/"/>
      <url>/2016/08/19/iOS%E5%B8%B8%E7%94%A8%E5%AE%8F%E5%AE%9A%E4%B9%89/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#define SCREEN_WIDTH     [[UIScreen mainScreen] bounds].size.width</span><br><span class="line">#define SCREEN_HEIGHT    [[UIScreen mainScreen] bounds].size.height</span><br><span class="line"></span><br><span class="line">#define YLSRect(x, y, w, h)  CGRectMake(SCREEN_WIDTH * x, SCREEN_HEIGHT * y, SCREEN_WIDTH * w,  SCREEN_HEIGHT * h)</span><br><span class="line"></span><br><span class="line">#define YLSColor(r, g, b, a) [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:a]</span><br><span class="line"></span><br><span class="line">#define YLSFont(f) SCREEN_WIDTH * f</span><br><span class="line">#define YLSSize(s) SCREEN_WIDTH * s</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
  
  
</search>
